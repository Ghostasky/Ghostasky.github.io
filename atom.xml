<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郁涛丶&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-01T16:07:44.074Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>郁涛丶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在64位的glibc上payload调用system导致crash的问题</title>
    <link href="http://example.com/2021/04/08/64%E4%B8%BApayload%E8%B0%83%E7%94%A8system%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/04/08/64%E4%B8%BApayload%E8%B0%83%E7%94%A8system%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-07T16:00:00.000Z</published>
    <updated>2021-06-01T16:07:44.074Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="在64位的glibc上payload调用system导致crash的问题"><a href="#在64位的glibc上payload调用system导致crash的问题" class="headerlink" title="在64位的glibc上payload调用system导致crash的问题"></a>在64位的glibc上payload调用system导致crash的问题</h1><p>在一些64位的pwn题中，调用system后会导致程序crash掉</p><p>首先小讲下原因：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040F93C                 mov     [rsp+198h+var_190], rax</span><br><span class="line">.text:000000000040F941                 movhps  xmm0, [rsp+198h+var_190]</span><br><span class="line">.text:000000000040F946                 movaps  [rsp+198h+var_158], xmm0</span><br><span class="line">.text:000000000040F94B                 call    sigaction</span><br></pre></td></tr></table></figure><p>是<code>movaps  [rsp+198h+var_158], xmm0</code>指令要求<code>rsp+198h+var_158</code>的值是对其16byte(0x10)，否则的话会直接出发中断从而导致crash。</p><blockquote><p>  Movaps：<br>  <code>movaps XMM,XMM/m128 movaps XMM/128,XMM</code><br>  把源存储器内容值送入目的寄存器,当有m128时,必须对齐内存16字节,也就是内存地址低4位为0.</p></blockquote><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>示例程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断在：<code>movaps  [rsp+198h+var_158], xmm0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; </span><br><span class="line">131in ../sysdeps/posix/system.c</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────</span><br><span class="line"> RAX  0x7ffff7b95e17 ◂— sub    eax, 0x622f0063 /* &#x27;-c&#x27; */</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7ffff7b95e1f ◂— jae    0x7ffff7b95e89 /* &#x27;sh&#x27; */</span><br><span class="line"> RDX  0x0</span><br><span class="line"> RDI  0x2</span><br><span class="line"> RSI  0x7ffff7dcf6a0 (intr) ◂— 0x0</span><br><span class="line"> R8   0x7ffff7dcf600 (quit) ◂— 0x0</span><br><span class="line"> R9   0x7ffff7dced80 (initial) ◂— 0x0</span><br><span class="line"> R10  0x8</span><br><span class="line"> R11  0x346</span><br><span class="line"> R12  0x5555555546f4 ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */</span><br><span class="line"> R13  0x7fffffffe080 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffde60 ◂— 0x0</span><br><span class="line"> RSP  0x7fffffffde00 ◂— 0x7fff00000002</span><br><span class="line">*RIP  0x7ffff7a3140b (do_system+1099) ◂— call   0x7ffff7a21230</span><br><span class="line">───────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────</span><br><span class="line">   0x7ffff7a313ed &lt;do_system+1069&gt;    mov    qword ptr [rsp + 0x58], 0</span><br><span class="line">   0x7ffff7a313f6 &lt;do_system+1078&gt;    movq   xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x7ffff7a313fc &lt;do_system+1084&gt;    mov    qword ptr [rsp + 8], rax</span><br><span class="line">   0x7ffff7a31401 &lt;do_system+1089&gt;    movhps xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x7ffff7a31406 &lt;do_system+1094&gt;    movaps xmmword ptr [rsp + 0x40], xmm0</span><br><span class="line"> ► 0x7ffff7a3140b &lt;do_system+1099&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line">        sig: 0x2</span><br><span class="line">        act: 0x7ffff7dcf6a0 (intr) ◂— 0x0</span><br><span class="line">        oact: 0x0</span><br><span class="line"> </span><br><span class="line">   0x7ffff7a31410 &lt;do_system+1104&gt;    lea    rsi, [rip + 0x39e1e9] &lt;0x7ffff7dcf600&gt;</span><br><span class="line">   0x7ffff7a31417 &lt;do_system+1111&gt;    xor    edx, edx</span><br><span class="line">   0x7ffff7a31419 &lt;do_system+1113&gt;    mov    edi, 3</span><br><span class="line">   0x7ffff7a3141e &lt;do_system+1118&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line"> </span><br><span class="line">   0x7ffff7a31423 &lt;do_system+1123&gt;    xor    edx, edx</span><br><span class="line">───────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffde00 ◂— 0x7fff00000002</span><br><span class="line">01:0008│      0x7fffffffde08 —▸ 0x7ffff7b95e17 ◂— sub    eax, 0x622f0063 /* &#x27;-c&#x27; */</span><br><span class="line">02:0010│      0x7fffffffde10 —▸ 0x7fffffffdf10 ◂— 0x0</span><br><span class="line">03:0018│      0x7fffffffde18 ◂— 0x3</span><br><span class="line">04:0020│      0x7fffffffde20 —▸ 0x7ffff7a31470 (cancel_handler) ◂— push   rbx</span><br><span class="line">05:0028│      0x7fffffffde28 —▸ 0x7fffffffde1c ◂— 0xf7a3147000000000</span><br><span class="line">06:0030│      0x7fffffffde30 —▸ 0x7ffff7ffe738 —▸ 0x7ffff7ffe710 —▸ 0x7ffff7ffb000 ◂— jg     0x7ffff7ffb047</span><br><span class="line">07:0038│      0x7fffffffde38 ◂— 0x0</span><br><span class="line">─────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────</span><br><span class="line"> ► f 0     7ffff7a3140b do_system+1099</span><br><span class="line">   f 1     55555555465a main+16</span><br><span class="line">   f 2     7ffff7a03bf7 __libc_start_main+231</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后查看$rsp+0x40:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x $rsp+0x40</span><br><span class="line">$2 = 0x7fffffffde40</span><br></pre></td></tr></table></figure><p>可以看到是对齐的，也就是内存地址的低位为0。</p><p>下面对$rsp+1：<code>set $rsp=$rsp+1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; set $rsp=$rsp+1</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────</span><br><span class="line"> RAX  0x7ffff7b95e17 ◂— sub    eax, 0x622f0063 /* &#x27;-c&#x27; */</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7ffff7b95e1f ◂— jae    0x7ffff7b95e89 /* &#x27;sh&#x27; */</span><br><span class="line"> RDX  0x0</span><br><span class="line"> RDI  0x2</span><br><span class="line"> RSI  0x7ffff7dcf6a0 (intr) ◂— 0x0</span><br><span class="line"> R8   0x7ffff7dcf600 (quit) ◂— 0x0</span><br><span class="line"> R9   0x7ffff7dced80 (initial) ◂— 0x0</span><br><span class="line"> R10  0x8</span><br><span class="line"> R11  0x346</span><br><span class="line"> R12  0x5555555546f4 ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */</span><br><span class="line"> R13  0x7fffffffe080 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffde60 ◂— 0x0</span><br><span class="line">*RSP  0x7fffffffde01 ◂— 0x1700007fff000000</span><br><span class="line">*RIP  0x7ffff7a3140b (do_system+1099) ◂— call   0x7ffff7a21230</span><br><span class="line">───────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────</span><br><span class="line">   0x7ffff7a313ed &lt;do_system+1069&gt;    mov    qword ptr [rsp + 0x58], 0</span><br><span class="line">   0x7ffff7a313f6 &lt;do_system+1078&gt;    movq   xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x7ffff7a313fc &lt;do_system+1084&gt;    mov    qword ptr [rsp + 8], rax</span><br><span class="line">   0x7ffff7a31401 &lt;do_system+1089&gt;    movhps xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x7ffff7a31406 &lt;do_system+1094&gt;    movaps xmmword ptr [rsp + 0x40], xmm0</span><br><span class="line"> ► 0x7ffff7a3140b &lt;do_system+1099&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line">        sig: 0x2</span><br><span class="line">        act: 0x7ffff7dcf6a0 (intr) ◂— 0x0</span><br><span class="line">        oact: 0x0</span><br><span class="line"> </span><br><span class="line">   0x7ffff7a31410 &lt;do_system+1104&gt;    lea    rsi, [rip + 0x39e1e9] &lt;0x7ffff7dcf600&gt;</span><br><span class="line">   0x7ffff7a31417 &lt;do_system+1111&gt;    xor    edx, edx</span><br><span class="line">   0x7ffff7a31419 &lt;do_system+1113&gt;    mov    edi, 3</span><br><span class="line">   0x7ffff7a3141e &lt;do_system+1118&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line"> </span><br><span class="line">   0x7ffff7a31423 &lt;do_system+1123&gt;    xor    edx, edx</span><br><span class="line">───────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffde01 ◂— 0x1700007fff000000</span><br><span class="line">01:0008│      0x7fffffffde09 ◂— 0x1000007ffff7b95e</span><br><span class="line">02:0010│      0x7fffffffde11 ◂— 0x300007fffffffdf</span><br><span class="line">03:0018│      0x7fffffffde19 ◂— 0x7000000000000000</span><br><span class="line">04:0020│      0x7fffffffde21 ◂— 0x1c00007ffff7a314</span><br><span class="line">05:0028│      0x7fffffffde29 ◂— 0x3800007fffffffde</span><br><span class="line">06:0030│      0x7fffffffde31 ◂— 0x7ffff7ffe7</span><br><span class="line">07:0038│      0x7fffffffde39 ◂— 0x1f00000000000000</span><br><span class="line">─────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────</span><br><span class="line"> ► f 0     7ffff7a3140b do_system+1099</span><br><span class="line">   f 1 7000005555555546</span><br><span class="line">   f 2 f700005555555546</span><br><span class="line">   f 3       7ffff7a03b</span><br><span class="line">   f 4 8800000020000000</span><br><span class="line">   f 5       7fffffffe0</span><br><span class="line">   f 6 4a00000001000000</span><br><span class="line">   f 7       5555555546</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后查看$rsp+0x40的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x $rsp+0x40</span><br><span class="line">$3 = 0x7fffffffde41</span><br></pre></td></tr></table></figure><p>已经未对齐了，继续执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Thread 2.1 &quot;a.out&quot; received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x000000000040f946 in do_system ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────</span><br><span class="line"> RAX  0x492be5 ◂— sub    eax, 0x622f0063 /* &#x27;-c&#x27; */</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x492bed ◂— jae    0x492c57 /* &#x27;sh&#x27; */</span><br><span class="line"> RDX  0x0</span><br><span class="line"> RDI  0x2</span><br><span class="line"> RSI  0x6bbdc0 (intr) ◂— 0x0</span><br><span class="line"> R8   0x6bbd20 (quit) ◂— 0x0</span><br><span class="line"> R9   0x6bb8e0 (initial) ◂— 0x0</span><br><span class="line"> R10  0x8</span><br><span class="line"> R11  0x346</span><br><span class="line"> R12  0x492444 ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */</span><br><span class="line"> R13  0x0</span><br><span class="line"> R14  0x6b9018 (_GLOBAL_OFFSET_TABLE_+24) —▸ 0x440670 (__strcpy_ssse3) ◂— mov    rcx, rsi</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fffffffde20 ◂— 0x0</span><br><span class="line"> RSP  0x7fffffffddc1 ◂— 0xe500007fffffffe3</span><br><span class="line"> RIP  0x40f946 (do_system+1062) ◂— movaps xmmword ptr [rsp + 0x40], xmm0</span><br><span class="line">───────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────</span><br><span class="line">   0x40f928 &lt;do_system+1032&gt;    mov    qword ptr [rsp + 8], rcx</span><br><span class="line">   0x40f92d &lt;do_system+1037&gt;    mov    qword ptr [rsp + 0x58], 0</span><br><span class="line">   0x40f936 &lt;do_system+1046&gt;    movq   xmm0, qword ptr [rsp + 8]</span><br><span class="line">   0x40f93c &lt;do_system+1052&gt;    mov    qword ptr [rsp + 8], rax</span><br><span class="line">   0x40f941 &lt;do_system+1057&gt;    movhps xmm0, qword ptr [rsp + 8]</span><br><span class="line"> ► 0x40f946 &lt;do_system+1062&gt;    movaps xmmword ptr [rsp + 0x40], xmm0</span><br><span class="line">   0x40f94b &lt;do_system+1067&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line"> </span><br><span class="line">   0x40f950 &lt;do_system+1072&gt;    lea    rsi, [rip + 0x2ac3c9] &lt;0x6bbd20&gt;</span><br><span class="line">   0x40f957 &lt;do_system+1079&gt;    xor    edx, edx</span><br><span class="line">   0x40f959 &lt;do_system+1081&gt;    mov    edi, 3</span><br><span class="line">   0x40f95e &lt;do_system+1086&gt;    call   sigaction &lt;sigaction&gt;</span><br><span class="line">───────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffddc1 ◂— 0xe500007fffffffe3</span><br><span class="line">01:0008│      0x7fffffffddc9 ◂— 0xb0000000000492b /* &#x27;+I&#x27; */</span><br><span class="line">02:0010│      0x7fffffffddd1 ◂— 0x700000015004a4f /* &#x27;OJ&#x27; */</span><br><span class="line">03:0018│      0x7fffffffddd9 ◂— 0x4000000000000000</span><br><span class="line">04:0020│      0x7fffffffdde1 ◂— 0xdc000000000040f4</span><br><span class="line">05:0028│      0x7fffffffdde9 ◂— 0x6800007fffffffdd</span><br><span class="line">06:0030│      0x7fffffffddf1 ◂— 0x7000000000006be2</span><br><span class="line">07:0038│      0x7fffffffddf9 ◂— 0x500000000000001</span><br><span class="line">─────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────</span><br><span class="line"> ► f 0           40f946 do_system+1062</span><br><span class="line">   f 1 700000000000400b</span><br><span class="line">   f 2  900000000004018</span><br><span class="line">   f 3             4011</span><br><span class="line">   f 4                0</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>已经crash掉。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>1.改变payload的长度</p><p>​    直接更改payload的长度，在栈溢出的时候栈的地址会不同，将栈地址+1，不行的话，继续增加，最多16次就一定会遇到栈对齐的长度。</p><p>2.栈转移</p><p>​    当有些payload有长度限制时，可以使用栈转移，之后如果栈的地址还是不同的话，继续+1，对齐。</p><p>3.execve</p><p>​    调用system的话可能会crash掉，那么可以使用execve函数，只不过这个函数的参数比system的参数多，在之前的ret2syscall 中也有讲到，之前讲的是32位，那64位的话就是参数构造不一样而已：rdi,rsi,rdx。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * filename,<span class="keyword">char</span> * <span class="keyword">const</span> argv[ ],<span class="keyword">char</span> * <span class="keyword">const</span> envp[ ])</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;在64位的glibc上payload调用system导致crash的问题&quot;&gt;&lt;a href=&quot;#在64位的glibc上payload调用system导致crash的问题&quot; class=&quot;headerlink&quot; title=&quot;在64位的gl</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>JSON相关</title>
    <link href="http://example.com/2021/02/27/json%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2021/02/27/json%E7%9B%B8%E5%85%B3/</id>
    <published>2021-02-27T09:57:36.000Z</published>
    <updated>2021-06-01T16:13:35.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-JSON的两种结构"><a href="#1-JSON的两种结构" class="headerlink" title="1. JSON的两种结构"></a>1. JSON的两种结构</h2><p>两种结构分别为：对象，数组。</p><h3 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h3><p>这种结构以大括号开始和结束，中间有多个以逗号分隔的键值对构成，键值对由冒号分隔。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">key:value,</span><br><span class="line">key2:value2,</span><br><span class="line">key3:value3,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的键为字符串，而值可以是字符串，数值，true，false，null，对象或数组。</p><h3 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h3><p>数组结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;键名1&quot;</span>:值<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;键名2&quot;</span>:值<span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;键名3&quot;</span>:值<span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;键名4&quot;</span>:值<span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ……</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2-python中JSON模块"><a href="#2-python中JSON模块" class="headerlink" title="2. python中JSON模块"></a>2. python中JSON模块</h2><p>四个方法：</p><p>dumps，dump，loads，load</p><ul><li>dump的功能就是把<strong>Python对象</strong>encode为<strong>json对象</strong>，一个编码过程。 注意json模块提供了json.dumps和json.dump方法，区别是<strong>dump直接到文件</strong>，而<strong>dumps到一个字符串</strong>，这里的s可以理解为string。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dumps方法</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = [&#123; <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>:(<span class="number">2</span>, <span class="number">4</span>), <span class="string">&#x27;c&#x27;</span>:<span class="number">3.0</span> &#125;]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;DATA:&#x27;</span>, <span class="built_in">repr</span>(data), <span class="built_in">type</span>(data)) </span><br><span class="line"></span><br><span class="line">data_string = json.dumps(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;JSON:&#x27;</span>, data_string, <span class="built_in">type</span>(data_string))</span><br></pre></td></tr></table></figure><ul><li>dump方法不仅可以将python对象编码为string，还可写入文件。但是不能把Python对象直接写入文件。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dump方法</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = [ &#123; <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>:(<span class="number">2</span>, <span class="number">4</span>), <span class="string">&#x27;c&#x27;</span>:<span class="number">3.0</span> &#125; ]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(data,fp)</span><br></pre></td></tr></table></figure><ul><li>loads方法可以将JSON对象decode为python可以识别是对象，这是基于string的，如果是文件，可以用json.load方法。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-JSON的两种结构&quot;&gt;&lt;a href=&quot;#1-JSON的两种结构&quot; class=&quot;headerlink&quot; title=&quot;1. JSON的两种结构&quot;&gt;&lt;/a&gt;1. JSON的两种结构&lt;/h2&gt;&lt;p&gt;两种结构分别为：对象，数组。&lt;/p&gt;
&lt;h3 id=&quot;对象结构&quot;</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2020年都干了啥</title>
    <link href="http://example.com/2021/02/12/2020%E5%B9%B4%E9%83%BD%E5%B9%B2%E4%BA%86%E5%95%A5/"/>
    <id>http://example.com/2021/02/12/2020%E5%B9%B4%E9%83%BD%E5%B9%B2%E4%BA%86%E5%95%A5/</id>
    <published>2021-02-11T16:00:00.000Z</published>
    <updated>2021-06-01T16:09:34.635Z</updated>
    
    <content type="html"><![CDATA[<p>​        写这篇年终总结的时候2021已经过去1/10了，正好大年初一，也闲着，把这篇总结写下吧。</p><p>​        年初疫情爆发，原本要返校补课结果全部改为线上课，质量差的一批，各种浪费时间，但是对我还好吧，可以自己做题看自己想看的网课，学校的课挂着就完了，反正授课质量也就那样。之后过了好一段时间，可以去学校复习了，然后教育局又说说高考推迟了一个月，有好有坏吧。到了高考前，也是各种事情，体检啊乱七八糟的，就是可惜这届高三成人礼没有搞，正好也不用那么尬。</p><p>​        之后的几天高考，考的一塌糊涂，数学考的lj的一批，相比平时能低二三十分，多复习了一个月结果就考了这么个鸟样，唉，没办法，就认命呗，也不可能说什么再来一年了。之前想考的西电啊、南邮啊、成信大啊之类的都去不了了。</p><p>​        填志愿的时候没有写提前批，要不然的话兰大的计算机应该也可以去，大不了滑到一批也可。后来查了好多学校，有的是地方不喜欢，有的听说学校试宿舍不好，等等，最终写了武工大后来听舍友说在他们那里西邮比武工大高？？？黑人问号。。既来之则安之吧。</p><p>​        图书馆去了两次，没意思，人太多还不如去教室自习。</p><p>​        学校的课也不算太紧，就是计院还要有周考就离谱，关键还不给解析和答案，那我考个鸟？？高数老师还是挺好的，宁小青yyds！！听说下学期要换高数老师，这？？？</p><p>​        再后来，就考试、放假，到家后，也就是1.1号，《CTF权威指南PWN篇》这个新书出了，立马入手了，讲的是真不错，之后的两个月就练车和学PWN一起在搞，知识点还没学完，堆还没看，做了一些PWN的题目，写了一些wp，感觉算是刚刚入门吧，路还很长，慢慢走。听说《reserve篇》已经在写了，希望在出来之前把pwn的知识点学完吧。</p><p>​        2020就这么过去了，还记得当时上小学的时候，学校发了个社保卡吧，好像叫社保卡，记得很清楚，绿色的卡片，上面写的有效截止日期正好是2020年，当时我就在算，刚刚好是我上大学的那一年，在幻想2020年会发生什么，当时的社会会怎样，科学技术水平又会怎样……</p><p>​        第一次写年记，怎么说呢，这些年遗憾很多，但是后面的路还很长，不管怎样，2021还要继续努力吖！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        写这篇年终总结的时候2021已经过去1/10了，正好大年初一，也闲着，把这篇总结写下吧。&lt;/p&gt;
&lt;p&gt;​        年初疫情爆发，原本要返校补课结果全部改为线上课，质量差的一批，各种浪费时间，但是对我还好吧，可以自己做题看自己想看的网课，学校的课挂着</summary>
      
    
    
    
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
  </entry>
  
</feed>
