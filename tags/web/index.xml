<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WEB on Ghostasky&#39;s Blog</title>
    <link>http://ghostasky.github.io/tags/web/</link>
    <description>Recent content in WEB on Ghostasky&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>wt20wl@gmail.com (Ghostasky)</managingEditor>
    <webMaster>wt20wl@gmail.com (Ghostasky)</webMaster>
    <lastBuildDate>Wed, 05 Oct 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://ghostasky.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTP Smuggling攻击</title>
      <link>http://ghostasky.github.io/posts/2022-10-http/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/2022-10-http/</guid>
      <description>[toc] TimeLine 2004年，@Amit Klein 提出 HTTP Response Splitting 技术，雏形 2005年，@Watchfire 首次提出 HTTP Request Smuggling 2016 年 Defcon 24 ，@regilero 提出了 [Hiding Wookiees In Http](https://media.defcon.org/DEF CON 24/DEF CON 24 presentations/DEF CON 24 - Regilero-Hiding-Wookiees-In-Http.pdf)，进一步揭示了</description>
    </item>
    <item>
      <title>PHP反序列化整理</title>
      <link>http://ghostasky.github.io/posts/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B4%E7%90%86/</guid>
      <description>[toc] 1.反序列化 Demo: &amp;lt;?php class test { private $flag = &amp;#34;flag{233}&amp;#34;; protected $ccc = &amp;#34;ccc&amp;#34;; public $a = &amp;#34;aaa&amp;#34;; static $b = &amp;#34;bbb&amp;#34;; } $test = new test; $data = serialize($test); echo $data; ?&amp;gt; out: O:4:&amp;#34;test&amp;#34;:3:{s:10:&amp;#34;testflag&amp;#34;;s:9:&amp;#34;flag{233}&amp;#34;;s:6:&amp;#34;*ccc&amp;#34;;s:3:&amp;#34;ccc&amp;#34;;s:1:&amp;#34;a&amp;#34;;s:3:&amp;#34;aaa&amp;#34;;} 注意这里testflag长度为8，但序列化的显示确是10，可以抓包一下： 可以看到其实类名的前后有不可见字符，其实就是%00，这是因为flag是private，</description>
    </item>
    <item>
      <title>BUU_WEB刷题_0x20-0x2F</title>
      <link>http://ghostasky.github.io/posts/buu-web-0x20-0x2f/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/buu-web-0x20-0x2f/</guid>
      <description>[toc] 0x20.[GXYCTF2019]禁止套娃 考点是无参数RCE先贴两个链接： https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE http://www.heetian.com/info/827 找了半天没发现啥，看wp说是git泄露，然后 ┌──(kali㉿kali)-[~/GitHack] └─$ python GitHack.py http://25ced3f5-75c8-4ac6-9d2c-9097371101ca.node4.buuoj.cn:81/ [+] Download and parse index file ... error: Not a Git index file ┌──(kali㉿kali</description>
    </item>
    <item>
      <title>BUU_WEB刷题_0x10-0x1F</title>
      <link>http://ghostasky.github.io/posts/buu-web-0x10-0x1f/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/buu-web-0x10-0x1f/</guid>
      <description>0x10.[ACTF2020 新生赛]Upload 和之前的一个一样，改个后缀名就OK。 0x11.[ACTF2020 新生赛]BackupFile 可以简单扫下，发现index.php.bak &amp;lt;?php include_once &amp;#34;flag.php&amp;#34;; if(isset($_GET[&amp;#39;key&amp;#39;])) { $key = $_GET[&amp;#39;key&amp;#39;]; if(!is_numeric($key)) { exit(&amp;#34;Just num!&amp;#34;); } $key = intval($key); $str = &amp;#34;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&amp;#34;; if($key == $str) { echo $flag; } } else { echo &amp;#34;Try to find out source file!&amp;#34;; } str弱相等，被转化为整形 传参ke</description>
    </item>
    <item>
      <title>BUU_WEB刷题_0x01-0x0F</title>
      <link>http://ghostasky.github.io/posts/buu-web-0x1-0xf/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/buu-web-0x1-0xf/</guid>
      <description>[TOC] 0x1.[HCTF 2018]WarmUp 代码审计+文件包含 &amp;lt;?php highlight_file(__FILE__); class emmm { public static function checkFile(&amp;amp;$page) { $whitelist = [&amp;#34;source&amp;#34;=&amp;gt;&amp;#34;source.php&amp;#34;,&amp;#34;hint&amp;#34;=&amp;gt;&amp;#34;hint.php&amp;#34;]; if (! isset($page) || !is_string($page)) { echo &amp;#34;you can&amp;#39;t see it&amp;#34;; return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . &amp;#39;?&amp;#39;, &amp;#39;?&amp;#39;) ); /*这里mb_sustr 是个截断，返回0到mb_strpos之间的内容，而mb_strps 则是查找第一次出现的位置， 所以基本可以</description>
    </item>
    <item>
      <title>文件包含漏洞</title>
      <link>http://ghostasky.github.io/posts/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Wed, 25 Nov 2020 14:58:30 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</guid>
      <description>[TOC] 1.文件包含相关函数 ​ include()，include_once()，require()，require_once() require()函数如果在包含的时候有错，如文件不存在，会直接退出，不执行后面的语句 include()函数如果在包含</description>
    </item>
    <item>
      <title>SQL注入小结</title>
      <link>http://ghostasky.github.io/posts/sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Thu, 19 Nov 2020 09:11:07 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/sql%E6%B3%A8%E5%85%A5%E5%B0%8F%E7%BB%93/</guid>
      <description>[TOC] 1.联合查询注入： http://xxxx.xx/?id=1&amp;#39; http://xxxx.xx/?id=1&amp;#39; order by 4# union前后的字段数要一致，所以要order by http://xxxx.xx/?id=1&amp;#39; union 1,2,3,database()# ​ 假设当前数据库:bugku ​ user(): ​ database(): ​ table_schema:库名 ​ table_name:表名 ​ column_name:列名 先介绍几个函数： 一 concat</description>
    </item>
    <item>
      <title>HTTP头各字段详解</title>
      <link>http://ghostasky.github.io/posts/2023-2-http%E5%A4%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/2023-2-http%E5%A4%B4/</guid>
      <description>[toc] 记录下http头各个字段的含义。 Accept 浏览器（或者其他基于HTTP的客户端程序）可以接收的内容类型（或者说通知服务器可以发回的数据类型）,例如 Accept: text/plain 示例： Accept: text/html Accept: image/* Accept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8 Accept-Charset 浏览器能识别的字符集 示例： Accept-Charset: iso-8859-1 Accept-Charset: utf-8, iso-8859-1;q=0.5 Accept-Charset: utf-8, iso-8859-1;q=0.5, *;q=0.1 Accept-Encoding 浏览器可以处理的编码方式</description>
    </item>
    <item>
      <title>SSTI payload记录</title>
      <link>http://ghostasky.github.io/posts/ssti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>wt20wl@gmail.com (Ghostasky)</author>
      <guid>http://ghostasky.github.io/posts/ssti/</guid>
      <description>[toc] 1.PHP中的ssti Twig框架 {{}}:输出 {# 注释 #}:注释 {% %}：逻辑运算 循环： {% for word in words %} {{ word }} {% endfor %} 测试用payload: {{2*2**3}} = 16 {# 这里要注意的是，#要写成%23，不然会被浏览器当成锚点 #} {{2*2**3}}{%23%20注释不会</description>
    </item>
  </channel>
</rss>
