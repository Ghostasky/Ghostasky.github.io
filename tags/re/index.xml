<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>RE - 标签 - Ghostasky&#39;s Blog</title>
    <link>http://ghostasky.github.io/tags/re/</link>
    <description>RE - 标签 | Ghostasky&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>wt20wl@gmail.com (Ghostasky)</managingEditor>
      <webMaster>wt20wl@gmail.com (Ghostasky)</webMaster><lastBuildDate>Mon, 04 Sep 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://ghostasky.github.io/tags/re/" rel="self" type="application/rss+xml" /><item>
  <title>Angr学习</title>
  <link>http://ghostasky.github.io/posts/2023-9-angr/</link>
  <pubDate>Mon, 04 Sep 2023 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/2023-9-angr/</guid>
  <description><![CDATA[<p>坟墓里寂静无比，埋葬你的是你所有没说出口的话</p>]]></description>
</item>
<item>
  <title>【译】AFL白皮书</title>
  <link>http://ghostasky.github.io/posts/2023-5aflwritepaper/</link>
  <pubDate>Tue, 16 May 2023 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/2023-5aflwritepaper/</guid>
  <description><![CDATA[[toc] AFL 翻译 afl-fuzz 技术 白皮书 本文档快速概述了American Fuzzy Lop的核心内容。 请参阅README获取一般指导手册；有关AFL背后动机和设计目标的讨论，请参阅historical_notes.txt。 historical_notes: 这篇文档主要谈论了AFL（American Fuzzy L]]></description>
</item>
<item>
  <title>反检测(更新中...)</title>
  <link>http://ghostasky.github.io/posts/2023-5antidebug/</link>
  <pubDate>Thu, 04 May 2023 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/2023-5antidebug/</guid>
  <description><![CDATA[<p>坟墓里寂静无比，埋葬你的是你所有没说出口的话</p>]]></description>
</item>
<item>
  <title>BUU_RE刷题</title>
  <link>http://ghostasky.github.io/posts/buu-re-0x01-0x1f/</link>
  <pubDate>Sun, 07 Nov 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/buu-re-0x01-0x1f/</guid>
  <description><![CDATA[之前写过一部分re的题解，最近又有点想搞re了，重来吧。(从01开始计) 0x01.简单注册器 简单的替换和翻转字符串 x = &#34;dd2940c04462b4dd7c450528835cca15&#34; x = list(x) x[2] = chr((ord(x[2]) + ord(x[3])) - 50) x[4] = chr((ord(x[2]) + ord(x[5])) - 48) x[30] = chr((ord(x[31]) + ord(x[9])) - 48) x[14] = chr((ord(x[27]) + ord(x[28])) - 97) x = x[::-1] x = &#39;&#39;.join(x) print(x)0x02.Java逆向解密 代码]]></description>
</item>
<item>
  <title>再战PE结构</title>
  <link>http://ghostasky.github.io/posts/pe%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</link>
  <pubDate>Sat, 23 Oct 2021 00:00:00 &#43;0000</pubDate>
  <author>Ghostasky</author>
  <guid>http://ghostasky.github.io/posts/pe%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</guid>
  <description><![CDATA[[toc] PE文件结构解析 0.总述 大致结构如下： DOS头（占位），仅适用于映像文件 DOS存根（又叫签名），仅适用于映像文件 COFF文件头，适用于映像文件和目标文件 NT（可选文件头），仅适用于映像文件 节表（节区头） 节 其中，PE头包含DOS头、DOS存]]></description>
</item>
</channel>
</rss>
